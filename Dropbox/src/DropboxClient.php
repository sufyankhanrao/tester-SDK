<?php

declare(strict_types=1);

/*
 * DropboxLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace DropboxLib;

use DropboxLib\Controllers;

/**
 * DropboxLib client class
 */
class DropboxClient implements ConfigurationInterface
{
    private $files;

    private $timeout = ConfigurationDefaults::TIMEOUT;
    private $environment = ConfigurationDefaults::ENVIRONMENT;
    private $basepath = ConfigurationDefaults::BASEPATH;
    private $oAuthClientId = ConfigurationDefaults::O_AUTH_CLIENT_ID;
    private $oAuthRedirectUri = ConfigurationDefaults::O_AUTH_REDIRECT_URI;
    private $oAuthToken = ConfigurationDefaults::O_AUTH_TOKEN;
    private $implicitAuthManager;
    private $authManagers = [];
    private $httpCallback;

    public function __construct(array $configOptions = null)
    {
        if (isset($configOptions['timeout'])) {
            $this->timeout = $configOptions['timeout'];
        }
        if (isset($configOptions['environment'])) {
            $this->environment = $configOptions['environment'];
        }
        if (isset($configOptions['basepath'])) {
            $this->basepath = $configOptions['basepath'];
        }
        if (isset($configOptions['oAuthClientId'])) {
            $this->oAuthClientId = $configOptions['oAuthClientId'];
        }
        if (isset($configOptions['oAuthRedirectUri'])) {
            $this->oAuthRedirectUri = $configOptions['oAuthRedirectUri'];
        }
        if (isset($configOptions['oAuthToken'])) {
            $this->oAuthToken = clone $configOptions['oAuthToken'];
        }
        if (isset($configOptions['httpCallback'])) {
            $this->httpCallback = $configOptions['httpCallback'];
        }

        $this->implicitAuthManager = new ImplicitAuthManager(
            $this->oAuthClientId,
            $this->oAuthRedirectUri,
            $this->oAuthToken,
            $this
        );
        $this->authManagers['global'] = $this->implicitAuthManager;
    }

    /**
     * Get the client configuration as an associative array
     */
    public function getConfiguration(): array
    {
        $configMap = [];

        if (isset($this->timeout)) {
            $configMap['timeout'] = $this->timeout;
        }
        if (isset($this->environment)) {
            $configMap['environment'] = $this->environment;
        }
        if (isset($this->basepath)) {
            $configMap['basepath'] = $this->basepath;
        }
        if (isset($this->oAuthClientId)) {
            $configMap['oAuthClientId'] = $this->oAuthClientId;
        }
        if (isset($this->oAuthRedirectUri)) {
            $configMap['oAuthRedirectUri'] = $this->oAuthRedirectUri;
        }
        if (isset($this->oAuthToken)) {
            $configMap['oAuthToken'] = clone $this->oAuthToken;
        }
        if (isset($this->httpCallback)) {
            $configMap['httpCallback'] = $this->httpCallback;
        }

        return $configMap;
    }

    /**
     * Clone this client and override given configuration options
     */
    public function withConfiguration(array $configOptions): self
    {
        return new self(\array_merge($this->getConfiguration(), $configOptions));
    }

    public function getTimeout(): int
    {
        return $this->timeout;
    }

    public function getEnvironment(): string
    {
        return $this->environment;
    }

    public function getBasepath(): string
    {
        return $this->basepath;
    }

    public function getImplicitAuth(): ?ImplicitAuth
    {
        return $this->implicitAuthManager;
    }

    /**
     * Get the base uri for a given server in the current environment
     *
     * @param  string $server Server name
     *
     * @return string         Base URI
     */
    public function getBaseUri(string $server = Server::DEFAULT_): string
    {
        return ApiHelper::appendUrlWithTemplateParameters(
            static::ENVIRONMENT_MAP[$this->environment][$server],
            [
                'basepath' => $this->basepath,
            ],
            false
        );
    }

    /**
     * Returns Files Controller
     */
    public function getFilesController(): Controllers\FilesController
    {
        if ($this->files == null) {
            $this->files = new Controllers\FilesController($this, $this->authManagers, $this->httpCallback);
        }
        return $this->files;
    }

    /**
     * A map of all baseurls used in different environments and servers
     *
     * @var array
     */
    private const ENVIRONMENT_MAP = [
        Environment::PRODUCTION => [
            Server::DEFAULT_ => 'https://{basepath}/2',
            Server::TOKEN_AUTH => 'https://api.dropbox.com/oauth2',
            Server::AUTH => 'https://www.dropbox.com/oauth2',
        ],
    ];
}
