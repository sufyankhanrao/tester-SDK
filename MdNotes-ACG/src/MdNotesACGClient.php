<?php

declare(strict_types=1);

/*
 * MdNotesACGLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace MdNotesACGLib;

use MdNotesACGLib\Controllers;

/**
 * MdNotesACGLib client class
 */
class MdNotesACGClient implements ConfigurationInterface
{
    private $service;
    private $user;
    private $oAuthAuthorization;

    private $timeout = ConfigurationDefaults::TIMEOUT;
    private $environment = ConfigurationDefaults::ENVIRONMENT;
    private $oAuthClientId = ConfigurationDefaults::O_AUTH_CLIENT_ID;
    private $oAuthClientSecret = ConfigurationDefaults::O_AUTH_CLIENT_SECRET;
    private $oAuthRedirectUri = ConfigurationDefaults::O_AUTH_REDIRECT_URI;
    private $oAuthToken = ConfigurationDefaults::O_AUTH_TOKEN;
    private $authorizationCodeAuthManager;
    private $authManagers = [];
    private $httpCallback;

    public function __construct(array $configOptions = null)
    {
        if (isset($configOptions['timeout'])) {
            $this->timeout = $configOptions['timeout'];
        }
        if (isset($configOptions['environment'])) {
            $this->environment = $configOptions['environment'];
        }
        if (isset($configOptions['oAuthClientId'])) {
            $this->oAuthClientId = $configOptions['oAuthClientId'];
        }
        if (isset($configOptions['oAuthClientSecret'])) {
            $this->oAuthClientSecret = $configOptions['oAuthClientSecret'];
        }
        if (isset($configOptions['oAuthRedirectUri'])) {
            $this->oAuthRedirectUri = $configOptions['oAuthRedirectUri'];
        }
        if (isset($configOptions['oAuthToken'])) {
            $this->oAuthToken = clone $configOptions['oAuthToken'];
        }
        if (isset($configOptions['httpCallback'])) {
            $this->httpCallback = $configOptions['httpCallback'];
        }

        $this->authorizationCodeAuthManager = new AuthorizationCodeAuthManager(
            $this->oAuthClientId,
            $this->oAuthClientSecret,
            $this->oAuthRedirectUri,
            $this->oAuthToken,
            $this
        );
        $this->authManagers['global'] = $this->authorizationCodeAuthManager;
    }

    /**
     * Get the client configuration as an associative array
     */
    public function getConfiguration(): array
    {
        $configMap = [];

        if (isset($this->timeout)) {
            $configMap['timeout'] = $this->timeout;
        }
        if (isset($this->environment)) {
            $configMap['environment'] = $this->environment;
        }
        if (isset($this->oAuthClientId)) {
            $configMap['oAuthClientId'] = $this->oAuthClientId;
        }
        if (isset($this->oAuthClientSecret)) {
            $configMap['oAuthClientSecret'] = $this->oAuthClientSecret;
        }
        if (isset($this->oAuthRedirectUri)) {
            $configMap['oAuthRedirectUri'] = $this->oAuthRedirectUri;
        }
        if (isset($this->oAuthToken)) {
            $configMap['oAuthToken'] = clone $this->oAuthToken;
        }
        if (isset($this->httpCallback)) {
            $configMap['httpCallback'] = $this->httpCallback;
        }

        return $configMap;
    }

    /**
     * Clone this client and override given configuration options
     */
    public function withConfiguration(array $configOptions): self
    {
        return new self(\array_merge($this->getConfiguration(), $configOptions));
    }

    public function getTimeout(): int
    {
        return $this->timeout;
    }

    public function getEnvironment(): string
    {
        return $this->environment;
    }

    public function getAuthorizationCodeAuth(): ?AuthorizationCodeAuth
    {
        return $this->authorizationCodeAuthManager;
    }

    /**
     * Get the base uri for a given server in the current environment
     *
     * @param  string $server Server name
     *
     * @return string         Base URI
     */
    public function getBaseUri(string $server = Server::DEFAULT_): string
    {
        return static::ENVIRONMENT_MAP[$this->environment][$server];
    }

    /**
     * Returns Service Controller
     */
    public function getServiceController(): Controllers\ServiceController
    {
        if ($this->service == null) {
            $this->service = new Controllers\ServiceController(
                $this,
                $this->authManagers,
                $this->httpCallback
            );
        }
        return $this->service;
    }

    /**
     * Returns User Controller
     */
    public function getUserController(): Controllers\UserController
    {
        if ($this->user == null) {
            $this->user = new Controllers\UserController($this, $this->authManagers, $this->httpCallback);
        }
        return $this->user;
    }

    /**
     * Returns O Auth Authorization Controller
     */
    public function getOAuthAuthorizationController(): Controllers\OAuthAuthorizationController
    {
        if ($this->oAuthAuthorization == null) {
            $this->oAuthAuthorization = new Controllers\OAuthAuthorizationController(
                $this,
                $this->authManagers,
                $this->httpCallback
            );
        }
        return $this->oAuthAuthorization;
    }

    /**
     * A map of all baseurls used in different environments and servers
     *
     * @var array
     */
    private const ENVIRONMENT_MAP = [
        Environment::PRODUCTION => [
            Server::DEFAULT_ => 'http://markdown-notes-app.herokuapp.com',
        ],
    ];
}
