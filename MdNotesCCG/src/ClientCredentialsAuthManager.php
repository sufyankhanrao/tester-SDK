<?php

declare(strict_types=1);

/*
 * MdNotesCCGLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace MdNotesCCGLib;

use MdNotesCCGLib\Http\HttpRequest;
use MdNotesCCGLib\Models\OAuthToken;
use MdNotesCCGLib\Controllers\OAuthAuthorizationController;

/**
 * Utility class for OAuth 2 authorization and token management
 */
class ClientCredentialsAuthManager implements AuthManagerInterface, ClientCredentialsAuth
{
    /**
     * Singleton instance of OAuth 2 API controller
     * @var OAuthAuthorizationController
     */
    private $oAuthApi;

    private $oAuthClientId;

    private $oAuthClientSecret;

    private $oAuthToken;

    /**
     * Returns an instance of this class.
     *
     * @param string $oAuthClientId OAuth 2 Client ID
     * @param string $oAuthClientSecret OAuth 2 Client Secret
     * @param OAuthToken|null $oAuthToken
     */
    public function __construct(
        string $oAuthClientId,
        string $oAuthClientSecret,
        ?OAuthToken $oAuthToken,
        ConfigurationInterface $config
    ) {
        $this->oAuthClientId = $oAuthClientId;
        $this->oAuthClientSecret = $oAuthClientSecret;
        $this->oAuthToken = $oAuthToken;
        $this->oAuthApi = new OAuthAuthorizationController($config, [], null);
    }

    /**
     * String value for oAuthClientId.
     */
    public function getOAuthClientId(): string
    {
        return $this->oAuthClientId;
    }

    /**
     * String value for oAuthClientSecret.
     */
    public function getOAuthClientSecret(): string
    {
        return $this->oAuthClientSecret;
    }

    /**
     * OAuthToken value for oAuthToken.
     */
    public function getOAuthToken(): ?OAuthToken
    {
        return $this->oAuthToken;
    }

    /**
     * Checks if provided credentials match with existing ones.
     *
     * @param string $oAuthClientId OAuth 2 Client ID
     * @param string $oAuthClientSecret OAuth 2 Client Secret
     */
    public function equals(string $oAuthClientId, string $oAuthClientSecret): bool
    {
        return $oAuthClientId == $this->getOAuthClientId() &&
            $oAuthClientSecret == $this->getOAuthClientSecret();
    }

    /**
     * Fetch the OAuth token.
     * @param  array|null        $additionalParams  Additional parameters to send during authorization
     */
    public function fetchToken(?array $additionalParams = null): OAuthToken
    {
        //send request for access token
        $oAuthToken = $this->oAuthApi->requestToken(
            $this->buildBasicHeader(),
            $additionalParams
        );

        //add expiry
        if ($oAuthToken->getExpiresIn() != null && $oAuthToken->getExpiresIn() != 0) {
            $oAuthToken->setExpiry(time() + $oAuthToken->getExpiresIn());
        }

        return $oAuthToken;
    }

    /**
     * Has the OAuth token expired?
     */
    public function isTokenExpired(): bool
    {
        return $this->oAuthToken->getExpiry() == null ||
            $this->oAuthToken->getExpiry() < time();
    }

    /**
     * Check if client is authorized, throws exceptions when token is null or expired.
     */
    private function checkAuthorization(): void
    {
        if ($this->oAuthToken == null) {
            throw new \Exception('Client is not authorized. An OAuth token is needed to make API calls.');
        }

        if ($this->isTokenExpired()) {
            throw new \Exception('OAuth token is expired. A valid token is needed to make API calls.');
        }
    }

    /**
     * Build authorization header value for basic auth
     */
    private function buildBasicHeader(): string
    {
        return 'Basic ' . base64_encode(
            $this->oAuthClientId . ':' . $this->oAuthClientSecret
        );
    }

    /**
     * Adds authentication to the given HttpRequest.
     */
    public function apply(HttpRequest $httpRequest)
    {
        $this->checkAuthorization();
        $httpRequest->addHeader('Authorization', 'Bearer ' . $this->oAuthToken->getAccessToken());
    }
}
