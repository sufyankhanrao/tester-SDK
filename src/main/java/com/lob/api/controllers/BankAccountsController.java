/*
 * LobAPI20200211SpecificationLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.controllers;

import com.lob.api.ApiHelper;
import com.lob.api.AuthManager;
import com.lob.api.Configuration;
import com.lob.api.DateTimeHelper;
import com.lob.api.exceptions.ApiException;
import com.lob.api.exceptions.ErrorErrorException;
import com.lob.api.http.Headers;
import com.lob.api.http.client.HttpCallback;
import com.lob.api.http.client.HttpClient;
import com.lob.api.http.client.HttpContext;
import com.lob.api.http.request.HttpRequest;
import com.lob.api.http.response.HttpResponse;
import com.lob.api.http.response.HttpStringResponse;
import com.lob.api.models.AccountTypeEnum;
import com.lob.api.models.AllBankAccounts;
import com.lob.api.models.BankAccount;
import com.lob.api.models.BankDeletion;
import com.lob.api.models.Metadata;
import java.io.IOException;
import java.time.LocalDateTime;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * This class lists all the endpoints of the groups.
 */
public final class BankAccountsController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public BankAccountsController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }

    /**
     * Initializes the controller with HTTPCallback.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     * @param httpCallback    Callback to be called before and after the HTTP call.
     */
    public BankAccountsController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        super(config, httpClient, authManagers, httpCallback);
    }

    /**
     * Verify a bank account in order to create a check.
     * @param  bankId  Required parameter: id of the bank account to be verified
     * @param  amounts  Required parameter: In live mode, an array containing the two micro deposits
     *         (in cents) placed in the bank account. In test mode, no micro deposits will be
     *         placed, so any two integers between `1` and `100` will work.
     * @return    Returns the BankAccount response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public BankAccount verifyBankAccount(
            final String bankId,
            final List<Integer> amounts) throws ApiException, IOException {
        HttpRequest request = buildVerifyBankAccountRequest(bankId, amounts);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleVerifyBankAccountResponse(context);
    }

    /**
     * Verify a bank account in order to create a check.
     * @param  bankId  Required parameter: id of the bank account to be verified
     * @param  amounts  Required parameter: In live mode, an array containing the two micro deposits
     *         (in cents) placed in the bank account. In test mode, no micro deposits will be
     *         placed, so any two integers between `1` and `100` will work.
     * @return    Returns the BankAccount response from the API call
     */
    public CompletableFuture<BankAccount> verifyBankAccountAsync(
            final String bankId,
            final List<Integer> amounts) {
        return makeHttpCallAsync(() -> buildVerifyBankAccountRequest(bankId, amounts),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleVerifyBankAccountResponse(context));
    }

    /**
     * Builds the HttpRequest object for verifyBankAccount.
     */
    private HttpRequest buildVerifyBankAccountRequest(
            final String bankId,
            final List<Integer> amounts) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/bank_accounts/{bank_id}/verify");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("bank_id",
                new SimpleEntry<Object, Boolean>(bankId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //load all fields for the outgoing API request
        Map<String, Object> formParameters = new HashMap<>();
        formParameters.put("amounts", amounts);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().post(queryBuilder, headers, null,
                ApiHelper.prepareFormFields(formParameters));

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for verifyBankAccount.
     * @return An object of type BankAccount
     */
    private BankAccount handleVerifyBankAccountResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if ((responseCode < 200) || (responseCode > 208)) {
            throw new ErrorErrorException("Error", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        BankAccount result = ApiHelper.deserialize(responseBody,
                BankAccount.class);

        return result;
    }

    /**
     * Retrieves the details of an existing bank account. You need only supply the unique bank
     * account identifier that was returned upon bank account creation.
     * @param  bankId  Required parameter: id of the bank account
     * @return    Returns the BankAccount response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public BankAccount retrieve(
            final String bankId) throws ApiException, IOException {
        HttpRequest request = buildRetrieveRequest(bankId);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleRetrieveResponse(context);
    }

    /**
     * Retrieves the details of an existing bank account. You need only supply the unique bank
     * account identifier that was returned upon bank account creation.
     * @param  bankId  Required parameter: id of the bank account
     * @return    Returns the BankAccount response from the API call
     */
    public CompletableFuture<BankAccount> retrieveAsync(
            final String bankId) {
        return makeHttpCallAsync(() -> buildRetrieveRequest(bankId),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleRetrieveResponse(context));
    }

    /**
     * Builds the HttpRequest object for retrieve.
     */
    private HttpRequest buildRetrieveRequest(
            final String bankId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/bank_accounts/{bank_id}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("bank_id",
                new SimpleEntry<Object, Boolean>(bankId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for retrieve.
     * @return An object of type BankAccount
     */
    private BankAccount handleRetrieveResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if ((responseCode < 200) || (responseCode > 208)) {
            throw new ErrorErrorException("Error", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        BankAccount result = ApiHelper.deserialize(responseBody,
                BankAccount.class);

        return result;
    }

    /**
     * Permanently deletes a bank account. It cannot be undone.
     * @param  bankId  Required parameter: id of the bank account
     * @return    Returns the BankDeletion response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public BankDeletion delete(
            final String bankId) throws ApiException, IOException {
        HttpRequest request = buildDeleteRequest(bankId);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleDeleteResponse(context);
    }

    /**
     * Permanently deletes a bank account. It cannot be undone.
     * @param  bankId  Required parameter: id of the bank account
     * @return    Returns the BankDeletion response from the API call
     */
    public CompletableFuture<BankDeletion> deleteAsync(
            final String bankId) {
        return makeHttpCallAsync(() -> buildDeleteRequest(bankId),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleDeleteResponse(context));
    }

    /**
     * Builds the HttpRequest object for delete.
     */
    private HttpRequest buildDeleteRequest(
            final String bankId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/bank_accounts/{bank_id}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("bank_id",
                new SimpleEntry<Object, Boolean>(bankId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().delete(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for delete.
     * @return An object of type BankDeletion
     */
    private BankDeletion handleDeleteResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if ((responseCode < 200) || (responseCode > 208)) {
            throw new ErrorErrorException("Error", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        BankDeletion result = ApiHelper.deserialize(responseBody,
                BankDeletion.class);

        return result;
    }

    /**
     * Returns a list of your bank accounts. The bank accounts are returned sorted by creation date,
     * with the most recently created bank accounts appearing first.
     * @param  limit  Optional parameter: How many results to return.
     * @param  beforeOrAfter  Optional parameter: before and after are both optional but only one of
     *         them can be in the query at a time.
     * @param  include  Optional parameter: Request that the response include the total count by
     *         specifying `include[]=total_count`.
     * @param  dateCreated  Optional parameter: Filter by ISO-8601 date or datetime, e.g. `{ gt:
     *         '2012-01-01', lt: '2012-01-31T12:34:56Z' }` where `gt` is &gt;, `lt` is &lt;, `gte` is ≥,
     *         and `lte` is ≤.
     * @param  metadata  Optional parameter: Filter by metadata key-value pair, e.g.
     *         `metadata[customer_id]=987654`.
     * @return    Returns the AllBankAccounts response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public AllBankAccounts listBankAccounts(
            final Integer limit,
            final Object beforeOrAfter,
            final Object include,
            final LocalDateTime dateCreated,
            final Integer metadata) throws ApiException, IOException {
        HttpRequest request = buildListBankAccountsRequest(limit, beforeOrAfter, include,
                dateCreated, metadata);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleListBankAccountsResponse(context);
    }

    /**
     * Returns a list of your bank accounts. The bank accounts are returned sorted by creation date,
     * with the most recently created bank accounts appearing first.
     * @param  limit  Optional parameter: How many results to return.
     * @param  beforeOrAfter  Optional parameter: before and after are both optional but only one of
     *         them can be in the query at a time.
     * @param  include  Optional parameter: Request that the response include the total count by
     *         specifying `include[]=total_count`.
     * @param  dateCreated  Optional parameter: Filter by ISO-8601 date or datetime, e.g. `{ gt:
     *         '2012-01-01', lt: '2012-01-31T12:34:56Z' }` where `gt` is &gt;, `lt` is &lt;, `gte` is ≥,
     *         and `lte` is ≤.
     * @param  metadata  Optional parameter: Filter by metadata key-value pair, e.g.
     *         `metadata[customer_id]=987654`.
     * @return    Returns the AllBankAccounts response from the API call
     */
    public CompletableFuture<AllBankAccounts> listBankAccountsAsync(
            final Integer limit,
            final Object beforeOrAfter,
            final Object include,
            final LocalDateTime dateCreated,
            final Integer metadata) {
        return makeHttpCallAsync(() -> buildListBankAccountsRequest(limit, beforeOrAfter, include,
                dateCreated, metadata),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleListBankAccountsResponse(context));
    }

    /**
     * Builds the HttpRequest object for listBankAccounts.
     */
    private HttpRequest buildListBankAccountsRequest(
            final Integer limit,
            final Object beforeOrAfter,
            final Object include,
            final LocalDateTime dateCreated,
            final Integer metadata) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/bank_accounts");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("limit",
                (limit != null) ? limit : 10);
        queryParameters.put("before-or-after", beforeOrAfter);
        queryParameters.put("include", include);
        queryParameters.put("date_created", DateTimeHelper.toRfc8601DateTime(dateCreated));
        queryParameters.put("metadata",
                (metadata != null) ? metadata : 0);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for listBankAccounts.
     * @return An object of type AllBankAccounts
     */
    private AllBankAccounts handleListBankAccountsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if ((responseCode < 200) || (responseCode > 208)) {
            throw new ErrorErrorException("Error", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        AllBankAccounts result = ApiHelper.deserialize(responseBody,
                AllBankAccounts.class);

        return result;
    }

    /**
     * Creates a new bank account with the provided properties. Bank accounts created in live mode
     * will need to be verified via micro deposits before being able to send live checks. The
     * deposits will appear in the bank account in 2-3 business days and have the description
     * "VERIFICATION".
     * @param  routingNumber  Required parameter: Must be a [valid US routing
     *         number](https://www.frbservices.org/index.html).
     * @param  accountNumber  Required parameter: Example:
     * @param  accountType  Required parameter: The type of entity that holds the account.
     * @param  signatory  Required parameter: The signatory associated with your account. This name
     *         will be printed on checks created with this bank account. If you prefer to use a
     *         custom signature image on your checks instead, please create your bank account from
     *         the [Dashboard](https://dashboard.lob.com/#/login).
     * @param  description  Optional parameter: An internal description that identifies this
     *         resource. Must be no longer than 255 characters.
     * @param  metadata  Optional parameter: Use metadata to store custom information for tagging
     *         and labeling back to your internal systems. Must be an object with up to 20 key-value
     *         pairs. Keys must be at most 40 characters and values must be at most 500 characters.
     *         Neither can contain the characters `"` and `\`. Nested objects are not supported. See
     *         [Metadata](#section/Metadata) for more information.
     * @return    Returns the BankAccount response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public BankAccount create(
            final String routingNumber,
            final String accountNumber,
            final AccountTypeEnum accountType,
            final String signatory,
            final String description,
            final Metadata metadata) throws ApiException, IOException {
        HttpRequest request = buildCreateRequest(routingNumber, accountNumber, accountType,
                signatory, description, metadata);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleCreateResponse(context);
    }

    /**
     * Creates a new bank account with the provided properties. Bank accounts created in live mode
     * will need to be verified via micro deposits before being able to send live checks. The
     * deposits will appear in the bank account in 2-3 business days and have the description
     * "VERIFICATION".
     * @param  routingNumber  Required parameter: Must be a [valid US routing
     *         number](https://www.frbservices.org/index.html).
     * @param  accountNumber  Required parameter: Example:
     * @param  accountType  Required parameter: The type of entity that holds the account.
     * @param  signatory  Required parameter: The signatory associated with your account. This name
     *         will be printed on checks created with this bank account. If you prefer to use a
     *         custom signature image on your checks instead, please create your bank account from
     *         the [Dashboard](https://dashboard.lob.com/#/login).
     * @param  description  Optional parameter: An internal description that identifies this
     *         resource. Must be no longer than 255 characters.
     * @param  metadata  Optional parameter: Use metadata to store custom information for tagging
     *         and labeling back to your internal systems. Must be an object with up to 20 key-value
     *         pairs. Keys must be at most 40 characters and values must be at most 500 characters.
     *         Neither can contain the characters `"` and `\`. Nested objects are not supported. See
     *         [Metadata](#section/Metadata) for more information.
     * @return    Returns the BankAccount response from the API call
     */
    public CompletableFuture<BankAccount> createAsync(
            final String routingNumber,
            final String accountNumber,
            final AccountTypeEnum accountType,
            final String signatory,
            final String description,
            final Metadata metadata) {
        return makeHttpCallAsync(() -> buildCreateRequest(routingNumber, accountNumber, accountType,
                signatory, description, metadata),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleCreateResponse(context));
    }

    /**
     * Builds the HttpRequest object for create.
     */
    private HttpRequest buildCreateRequest(
            final String routingNumber,
            final String accountNumber,
            final AccountTypeEnum accountType,
            final String signatory,
            final String description,
            final Metadata metadata) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/bank_accounts");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //load all fields for the outgoing API request
        Map<String, Object> formParameters = new HashMap<>();
        formParameters.put("routing_number", routingNumber);
        formParameters.put("account_number", accountNumber);
        formParameters.put("account_type",
                (accountType != null) ? accountType.value() : null);
        formParameters.put("signatory", signatory);
        if (description != null) {
            formParameters.put("description", description);
        }
        if (metadata != null) {
            formParameters.put("metadata", metadata);
        }

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().post(queryBuilder, headers, null,
                ApiHelper.prepareFormFields(formParameters));

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for create.
     * @return An object of type BankAccount
     */
    private BankAccount handleCreateResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if ((responseCode < 200) || (responseCode > 208)) {
            throw new ErrorErrorException("Error", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        BankAccount result = ApiHelper.deserialize(responseBody,
                BankAccount.class);

        return result;
    }

}