/*
 * LobAPI20200211SpecificationLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.controllers;

import com.lob.api.ApiHelper;
import com.lob.api.AuthManager;
import com.lob.api.Configuration;
import com.lob.api.exceptions.ApiException;
import com.lob.api.exceptions.ErrorErrorException;
import com.lob.api.http.Headers;
import com.lob.api.http.client.HttpCallback;
import com.lob.api.http.client.HttpClient;
import com.lob.api.http.client.HttpContext;
import com.lob.api.http.request.HttpRequest;
import com.lob.api.http.response.HttpResponse;
import com.lob.api.http.response.HttpStringResponse;
import com.lob.api.models.ReverseGeocode;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * This class lists all the endpoints of the groups.
 */
public final class ReverseGeocodeController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public ReverseGeocodeController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }

    /**
     * Initializes the controller with HTTPCallback.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     * @param httpCallback    Callback to be called before and after the HTTP call.
     */
    public ReverseGeocodeController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        super(config, httpClient, authManagers, httpCallback);
    }

    /**
     * Reverse geocode a valid US location with a live API key.
     * @param  latitude  Required parameter: A positive or negative decimal indicating the
     *         geographic latitude of the address, specifying the north-to-south position of a
     *         location. This should be input with `longitude` to pinpoint locations on a map.
     * @param  longitude  Required parameter: A positive or negative decimal indicating the
     *         geographic longitude of the address, specifying the north-to-south position of a
     *         location. This should be input with `latitude` to pinpoint locations on a map.
     * @param  size  Optional parameter: Determines the number of locations returned. Possible
     *         values are between 1 and 50 and any number higher will be rounded down to 50. Default
     *         size is a list of 5 reverse geocoded locations.
     * @return    Returns the ReverseGeocode response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ReverseGeocode lookup(
            final Double latitude,
            final Double longitude,
            final Integer size) throws ApiException, IOException {
        HttpRequest request = buildLookupRequest(latitude, longitude, size);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleLookupResponse(context);
    }

    /**
     * Reverse geocode a valid US location with a live API key.
     * @param  latitude  Required parameter: A positive or negative decimal indicating the
     *         geographic latitude of the address, specifying the north-to-south position of a
     *         location. This should be input with `longitude` to pinpoint locations on a map.
     * @param  longitude  Required parameter: A positive or negative decimal indicating the
     *         geographic longitude of the address, specifying the north-to-south position of a
     *         location. This should be input with `latitude` to pinpoint locations on a map.
     * @param  size  Optional parameter: Determines the number of locations returned. Possible
     *         values are between 1 and 50 and any number higher will be rounded down to 50. Default
     *         size is a list of 5 reverse geocoded locations.
     * @return    Returns the ReverseGeocode response from the API call
     */
    public CompletableFuture<ReverseGeocode> lookupAsync(
            final Double latitude,
            final Double longitude,
            final Integer size) {
        return makeHttpCallAsync(() -> buildLookupRequest(latitude, longitude, size),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleLookupResponse(context));
    }

    /**
     * Builds the HttpRequest object for lookup.
     */
    private HttpRequest buildLookupRequest(
            final Double latitude,
            final Double longitude,
            final Integer size) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/us_reverse_geocode_lookups");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("size",
                (size != null) ? size : 5);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //load all fields for the outgoing API request
        Map<String, Object> formParameters = new HashMap<>();
        if (latitude != null) {
            formParameters.put("latitude", latitude);
        }
        if (longitude != null) {
            formParameters.put("longitude", longitude);
        }

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().post(queryBuilder, headers, queryParameters,
                ApiHelper.prepareFormFields(formParameters));

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for lookup.
     * @return An object of type ReverseGeocode
     */
    private ReverseGeocode handleLookupResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if ((responseCode < 200) || (responseCode > 208)) {
            throw new ErrorErrorException("Error", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ReverseGeocode result = ApiHelper.deserialize(responseBody,
                ReverseGeocode.class);

        return result;
    }

}