/*
 * LobAPI20200211SpecificationLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.controllers;

import com.lob.api.ApiHelper;
import com.lob.api.AuthManager;
import com.lob.api.Configuration;
import com.lob.api.DateTimeHelper;
import com.lob.api.exceptions.ApiException;
import com.lob.api.exceptions.ErrorErrorException;
import com.lob.api.http.Headers;
import com.lob.api.http.client.HttpCallback;
import com.lob.api.http.client.HttpClient;
import com.lob.api.http.client.HttpContext;
import com.lob.api.http.request.HttpRequest;
import com.lob.api.http.response.HttpResponse;
import com.lob.api.http.response.HttpStringResponse;
import com.lob.api.models.AllTemplateVersions;
import com.lob.api.models.EngineEnum;
import com.lob.api.models.TemplateVersion;
import com.lob.api.models.TemplateVersionDeletion;
import java.io.IOException;
import java.time.LocalDateTime;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * This class lists all the endpoints of the groups.
 */
public final class TemplateVersionsController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public TemplateVersionsController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }

    /**
     * Initializes the controller with HTTPCallback.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     * @param httpCallback    Callback to be called before and after the HTTP call.
     */
    public TemplateVersionsController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        super(config, httpClient, authManagers, httpCallback);
    }

    /**
     * Retrieves the template version with the given template and version ids.
     * @param  tmplId  Required parameter: The ID of the template to which the version belongs.
     * @param  vrsnId  Required parameter: id of the template_version
     * @return    Returns the TemplateVersion response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public TemplateVersion getTemplateVersion(
            final String tmplId,
            final String vrsnId) throws ApiException, IOException {
        HttpRequest request = buildGetTemplateVersionRequest(tmplId, vrsnId);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetTemplateVersionResponse(context);
    }

    /**
     * Retrieves the template version with the given template and version ids.
     * @param  tmplId  Required parameter: The ID of the template to which the version belongs.
     * @param  vrsnId  Required parameter: id of the template_version
     * @return    Returns the TemplateVersion response from the API call
     */
    public CompletableFuture<TemplateVersion> getTemplateVersionAsync(
            final String tmplId,
            final String vrsnId) {
        return makeHttpCallAsync(() -> buildGetTemplateVersionRequest(tmplId, vrsnId),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleGetTemplateVersionResponse(context));
    }

    /**
     * Builds the HttpRequest object for getTemplateVersion.
     */
    private HttpRequest buildGetTemplateVersionRequest(
            final String tmplId,
            final String vrsnId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/templates/{tmpl_id}/versions/{vrsn_id}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("tmpl_id",
                new SimpleEntry<Object, Boolean>(tmplId, true));
        templateParameters.put("vrsn_id",
                new SimpleEntry<Object, Boolean>(vrsnId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getTemplateVersion.
     * @return An object of type TemplateVersion
     */
    private TemplateVersion handleGetTemplateVersionResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if ((responseCode < 200) || (responseCode > 208)) {
            throw new ErrorErrorException("Error", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        TemplateVersion result = ApiHelper.deserialize(responseBody,
                TemplateVersion.class);

        return result;
    }

    /**
     * Updates the template version with the given template and version ids.
     * @param  tmplId  Required parameter: The ID of the template to which the version belongs.
     * @param  vrsnId  Required parameter: id of the template_version
     * @param  description  Optional parameter: An internal description that identifies this
     *         resource. Must be no longer than 255 characters.
     * @param  engine  Optional parameter: The engine used to combine HTML template with merge
     *         variables. * `legacy` - Lob's original engine * `handlebars`
     * @return    Returns the TemplateVersion response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public TemplateVersion updateTemplateVersion(
            final String tmplId,
            final String vrsnId,
            final String description,
            final EngineEnum engine) throws ApiException, IOException {
        HttpRequest request = buildUpdateTemplateVersionRequest(tmplId, vrsnId, description,
                engine);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleUpdateTemplateVersionResponse(context);
    }

    /**
     * Updates the template version with the given template and version ids.
     * @param  tmplId  Required parameter: The ID of the template to which the version belongs.
     * @param  vrsnId  Required parameter: id of the template_version
     * @param  description  Optional parameter: An internal description that identifies this
     *         resource. Must be no longer than 255 characters.
     * @param  engine  Optional parameter: The engine used to combine HTML template with merge
     *         variables. * `legacy` - Lob's original engine * `handlebars`
     * @return    Returns the TemplateVersion response from the API call
     */
    public CompletableFuture<TemplateVersion> updateTemplateVersionAsync(
            final String tmplId,
            final String vrsnId,
            final String description,
            final EngineEnum engine) {
        return makeHttpCallAsync(() -> buildUpdateTemplateVersionRequest(tmplId, vrsnId,
                description, engine),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleUpdateTemplateVersionResponse(context));
    }

    /**
     * Builds the HttpRequest object for updateTemplateVersion.
     */
    private HttpRequest buildUpdateTemplateVersionRequest(
            final String tmplId,
            final String vrsnId,
            final String description,
            final EngineEnum engine) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/templates/{tmpl_id}/versions/{vrsn_id}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("tmpl_id",
                new SimpleEntry<Object, Boolean>(tmplId, true));
        templateParameters.put("vrsn_id",
                new SimpleEntry<Object, Boolean>(vrsnId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //load all fields for the outgoing API request
        Map<String, Object> formParameters = new HashMap<>();
        if (description != null) {
            formParameters.put("description", description);
        }
        if (engine != null) {
            formParameters.put("engine",
                (engine != null) ? engine.value() : "legacy");
        }

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().post(queryBuilder, headers, null,
                ApiHelper.prepareFormFields(formParameters));

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for updateTemplateVersion.
     * @return An object of type TemplateVersion
     */
    private TemplateVersion handleUpdateTemplateVersionResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if ((responseCode < 200) || (responseCode > 208)) {
            throw new ErrorErrorException("Error", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        TemplateVersion result = ApiHelper.deserialize(responseBody,
                TemplateVersion.class);

        return result;
    }

    /**
     * Permanently deletes a template version. A template's `published_version` can not be deleted.
     * @param  tmplId  Required parameter: The ID of the template to which the version belongs.
     * @param  vrsnId  Required parameter: id of the template_version
     * @return    Returns the TemplateVersionDeletion response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public TemplateVersionDeletion deleteTemplateVersion(
            final String tmplId,
            final String vrsnId) throws ApiException, IOException {
        HttpRequest request = buildDeleteTemplateVersionRequest(tmplId, vrsnId);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleDeleteTemplateVersionResponse(context);
    }

    /**
     * Permanently deletes a template version. A template's `published_version` can not be deleted.
     * @param  tmplId  Required parameter: The ID of the template to which the version belongs.
     * @param  vrsnId  Required parameter: id of the template_version
     * @return    Returns the TemplateVersionDeletion response from the API call
     */
    public CompletableFuture<TemplateVersionDeletion> deleteTemplateVersionAsync(
            final String tmplId,
            final String vrsnId) {
        return makeHttpCallAsync(() -> buildDeleteTemplateVersionRequest(tmplId, vrsnId),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleDeleteTemplateVersionResponse(context));
    }

    /**
     * Builds the HttpRequest object for deleteTemplateVersion.
     */
    private HttpRequest buildDeleteTemplateVersionRequest(
            final String tmplId,
            final String vrsnId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/templates/{tmpl_id}/versions/{vrsn_id}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("tmpl_id",
                new SimpleEntry<Object, Boolean>(tmplId, true));
        templateParameters.put("vrsn_id",
                new SimpleEntry<Object, Boolean>(vrsnId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().delete(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for deleteTemplateVersion.
     * @return An object of type TemplateVersionDeletion
     */
    private TemplateVersionDeletion handleDeleteTemplateVersionResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if ((responseCode < 200) || (responseCode > 208)) {
            throw new ErrorErrorException("Error", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        TemplateVersionDeletion result = ApiHelper.deserialize(responseBody,
                TemplateVersionDeletion.class);

        return result;
    }

    /**
     * Returns a list of template versions for the given template ID. The template versions are
     * sorted by creation date, with the most recently created appearing first.
     * @param  tmplId  Required parameter: The ID of the template associated with the retrieved
     *         versions
     * @param  limit  Optional parameter: How many results to return.
     * @param  beforeOrAfter  Optional parameter: before and after are both optional but only one of
     *         them can be in the query at a time.
     * @param  include  Optional parameter: Request that the response include the total count by
     *         specifying `include[]=total_count`.
     * @param  dateCreated  Optional parameter: Filter by ISO-8601 date or datetime, e.g. `{ gt:
     *         '2012-01-01', lt: '2012-01-31T12:34:56Z' }` where `gt` is &gt;, `lt` is &lt;, `gte` is ≥,
     *         and `lte` is ≤.
     * @return    Returns the AllTemplateVersions response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public AllTemplateVersions listTemplateVersions(
            final String tmplId,
            final Integer limit,
            final Object beforeOrAfter,
            final Object include,
            final LocalDateTime dateCreated) throws ApiException, IOException {
        HttpRequest request = buildListTemplateVersionsRequest(tmplId, limit, beforeOrAfter,
                include, dateCreated);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleListTemplateVersionsResponse(context);
    }

    /**
     * Returns a list of template versions for the given template ID. The template versions are
     * sorted by creation date, with the most recently created appearing first.
     * @param  tmplId  Required parameter: The ID of the template associated with the retrieved
     *         versions
     * @param  limit  Optional parameter: How many results to return.
     * @param  beforeOrAfter  Optional parameter: before and after are both optional but only one of
     *         them can be in the query at a time.
     * @param  include  Optional parameter: Request that the response include the total count by
     *         specifying `include[]=total_count`.
     * @param  dateCreated  Optional parameter: Filter by ISO-8601 date or datetime, e.g. `{ gt:
     *         '2012-01-01', lt: '2012-01-31T12:34:56Z' }` where `gt` is &gt;, `lt` is &lt;, `gte` is ≥,
     *         and `lte` is ≤.
     * @return    Returns the AllTemplateVersions response from the API call
     */
    public CompletableFuture<AllTemplateVersions> listTemplateVersionsAsync(
            final String tmplId,
            final Integer limit,
            final Object beforeOrAfter,
            final Object include,
            final LocalDateTime dateCreated) {
        return makeHttpCallAsync(() -> buildListTemplateVersionsRequest(tmplId, limit,
                beforeOrAfter, include, dateCreated),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleListTemplateVersionsResponse(context));
    }

    /**
     * Builds the HttpRequest object for listTemplateVersions.
     */
    private HttpRequest buildListTemplateVersionsRequest(
            final String tmplId,
            final Integer limit,
            final Object beforeOrAfter,
            final Object include,
            final LocalDateTime dateCreated) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/templates/{tmpl_id}/versions");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("tmpl_id",
                new SimpleEntry<Object, Boolean>(tmplId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("limit",
                (limit != null) ? limit : 10);
        queryParameters.put("before-or-after", beforeOrAfter);
        queryParameters.put("include", include);
        queryParameters.put("date_created", DateTimeHelper.toRfc8601DateTime(dateCreated));

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for listTemplateVersions.
     * @return An object of type AllTemplateVersions
     */
    private AllTemplateVersions handleListTemplateVersionsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if ((responseCode < 200) || (responseCode > 208)) {
            throw new ErrorErrorException("Error", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        AllTemplateVersions result = ApiHelper.deserialize(responseBody,
                AllTemplateVersions.class);

        return result;
    }

    /**
     * Creates a new template version attached to the specified template.
     * @param  tmplId  Required parameter: The ID of the template the new version will be attached
     *         to
     * @param  html  Required parameter: An HTML string of less than 100,000 characters to be used
     *         as the `published_version` of this template. See [here](#section/HTML-Examples) for
     *         guidance on designing HTML templates. Please see endpoint specific documentation for
     *         any other product-specific HTML details: - [Postcards](#operation/create_postcard) -
     *         `front` and `back` - [Self Mailers](#operation/create_self_mailer) - `inside` and
     *         `outside` - [Letters](#operation/create_letter) - `file` -
     *         [Checks](#operation/create_check) - `check_bottom` and `attachment` If there is a
     *         syntax error with your variable names within your HTML, then an error will be thrown,
     *         e.g. using a `{{#users}}` opening tag without the corresponding closing tag
     *         `{{/users}}`.
     * @param  description  Optional parameter: An internal description that identifies this
     *         resource. Must be no longer than 255 characters.
     * @param  engine  Optional parameter: The engine used to combine HTML template with merge
     *         variables. * `legacy` - Lob's original engine * `handlebars`
     * @return    Returns the TemplateVersion response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public TemplateVersion createTemplateVersion(
            final String tmplId,
            final String html,
            final String description,
            final EngineEnum engine) throws ApiException, IOException {
        HttpRequest request = buildCreateTemplateVersionRequest(tmplId, html, description, engine);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleCreateTemplateVersionResponse(context);
    }

    /**
     * Creates a new template version attached to the specified template.
     * @param  tmplId  Required parameter: The ID of the template the new version will be attached
     *         to
     * @param  html  Required parameter: An HTML string of less than 100,000 characters to be used
     *         as the `published_version` of this template. See [here](#section/HTML-Examples) for
     *         guidance on designing HTML templates. Please see endpoint specific documentation for
     *         any other product-specific HTML details: - [Postcards](#operation/create_postcard) -
     *         `front` and `back` - [Self Mailers](#operation/create_self_mailer) - `inside` and
     *         `outside` - [Letters](#operation/create_letter) - `file` -
     *         [Checks](#operation/create_check) - `check_bottom` and `attachment` If there is a
     *         syntax error with your variable names within your HTML, then an error will be thrown,
     *         e.g. using a `{{#users}}` opening tag without the corresponding closing tag
     *         `{{/users}}`.
     * @param  description  Optional parameter: An internal description that identifies this
     *         resource. Must be no longer than 255 characters.
     * @param  engine  Optional parameter: The engine used to combine HTML template with merge
     *         variables. * `legacy` - Lob's original engine * `handlebars`
     * @return    Returns the TemplateVersion response from the API call
     */
    public CompletableFuture<TemplateVersion> createTemplateVersionAsync(
            final String tmplId,
            final String html,
            final String description,
            final EngineEnum engine) {
        return makeHttpCallAsync(() -> buildCreateTemplateVersionRequest(tmplId, html, description,
                engine),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleCreateTemplateVersionResponse(context));
    }

    /**
     * Builds the HttpRequest object for createTemplateVersion.
     */
    private HttpRequest buildCreateTemplateVersionRequest(
            final String tmplId,
            final String html,
            final String description,
            final EngineEnum engine) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/templates/{tmpl_id}/versions");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("tmpl_id",
                new SimpleEntry<Object, Boolean>(tmplId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //load all fields for the outgoing API request
        Map<String, Object> formParameters = new HashMap<>();
        formParameters.put("html", html);
        if (description != null) {
            formParameters.put("description", description);
        }
        if (engine != null) {
            formParameters.put("engine",
                (engine != null) ? engine.value() : "legacy");
        }

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().post(queryBuilder, headers, null,
                ApiHelper.prepareFormFields(formParameters));

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for createTemplateVersion.
     * @return An object of type TemplateVersion
     */
    private TemplateVersion handleCreateTemplateVersionResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if ((responseCode < 200) || (responseCode > 208)) {
            throw new ErrorErrorException("Error", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        TemplateVersion result = ApiHelper.deserialize(responseBody,
                TemplateVersion.class);

        return result;
    }

}