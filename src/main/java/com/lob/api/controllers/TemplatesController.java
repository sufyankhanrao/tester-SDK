/*
 * LobAPI20200211SpecificationLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.controllers;

import com.lob.api.ApiHelper;
import com.lob.api.AuthManager;
import com.lob.api.Configuration;
import com.lob.api.DateTimeHelper;
import com.lob.api.exceptions.ApiException;
import com.lob.api.exceptions.ErrorErrorException;
import com.lob.api.http.Headers;
import com.lob.api.http.client.HttpCallback;
import com.lob.api.http.client.HttpClient;
import com.lob.api.http.client.HttpContext;
import com.lob.api.http.request.HttpRequest;
import com.lob.api.http.response.HttpResponse;
import com.lob.api.http.response.HttpStringResponse;
import com.lob.api.models.AllTemplates;
import com.lob.api.models.EngineEnum;
import com.lob.api.models.Metadata;
import com.lob.api.models.Template;
import com.lob.api.models.TemplateDeletion;
import java.io.IOException;
import java.time.LocalDateTime;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * This class lists all the endpoints of the groups.
 */
public final class TemplatesController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public TemplatesController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }

    /**
     * Initializes the controller with HTTPCallback.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     * @param httpCallback    Callback to be called before and after the HTTP call.
     */
    public TemplatesController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        super(config, httpClient, authManagers, httpCallback);
    }

    /**
     * Retrieves the details of an existing template. You need only supply the unique template
     * identifier that was returned upon template creation.
     * @param  tmplId  Required parameter: id of the template
     * @return    Returns the Template response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Template getTemplate(
            final String tmplId) throws ApiException, IOException {
        HttpRequest request = buildGetTemplateRequest(tmplId);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetTemplateResponse(context);
    }

    /**
     * Retrieves the details of an existing template. You need only supply the unique template
     * identifier that was returned upon template creation.
     * @param  tmplId  Required parameter: id of the template
     * @return    Returns the Template response from the API call
     */
    public CompletableFuture<Template> getTemplateAsync(
            final String tmplId) {
        return makeHttpCallAsync(() -> buildGetTemplateRequest(tmplId),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleGetTemplateResponse(context));
    }

    /**
     * Builds the HttpRequest object for getTemplate.
     */
    private HttpRequest buildGetTemplateRequest(
            final String tmplId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/templates/{tmpl_id}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("tmpl_id",
                new SimpleEntry<Object, Boolean>(tmplId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getTemplate.
     * @return An object of type Template
     */
    private Template handleGetTemplateResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if ((responseCode < 200) || (responseCode > 208)) {
            throw new ErrorErrorException("Error", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Template result = ApiHelper.deserialize(responseBody,
                Template.class);

        return result;
    }

    /**
     * Updates the description and/or published version of the template with the given id. To update
     * the template's html, create a new version of the template.
     * @param  tmplId  Required parameter: id of the template
     * @param  description  Optional parameter: An internal description that identifies this
     *         resource. Must be no longer than 255 characters.
     * @param  publishedVersion  Optional parameter: Example:
     * @return    Returns the Template response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Template updateTemplate(
            final String tmplId,
            final String description,
            final String publishedVersion) throws ApiException, IOException {
        HttpRequest request = buildUpdateTemplateRequest(tmplId, description, publishedVersion);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleUpdateTemplateResponse(context);
    }

    /**
     * Updates the description and/or published version of the template with the given id. To update
     * the template's html, create a new version of the template.
     * @param  tmplId  Required parameter: id of the template
     * @param  description  Optional parameter: An internal description that identifies this
     *         resource. Must be no longer than 255 characters.
     * @param  publishedVersion  Optional parameter: Example:
     * @return    Returns the Template response from the API call
     */
    public CompletableFuture<Template> updateTemplateAsync(
            final String tmplId,
            final String description,
            final String publishedVersion) {
        return makeHttpCallAsync(() -> buildUpdateTemplateRequest(tmplId, description,
                publishedVersion),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleUpdateTemplateResponse(context));
    }

    /**
     * Builds the HttpRequest object for updateTemplate.
     */
    private HttpRequest buildUpdateTemplateRequest(
            final String tmplId,
            final String description,
            final String publishedVersion) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/templates/{tmpl_id}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("tmpl_id",
                new SimpleEntry<Object, Boolean>(tmplId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //load all fields for the outgoing API request
        Map<String, Object> formParameters = new HashMap<>();
        if (description != null) {
            formParameters.put("description", description);
        }
        if (publishedVersion != null) {
            formParameters.put("published_version", publishedVersion);
        }

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().post(queryBuilder, headers, null,
                ApiHelper.prepareFormFields(formParameters));

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for updateTemplate.
     * @return An object of type Template
     */
    private Template handleUpdateTemplateResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if ((responseCode < 200) || (responseCode > 208)) {
            throw new ErrorErrorException("Error", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Template result = ApiHelper.deserialize(responseBody,
                Template.class);

        return result;
    }

    /**
     * Permanently deletes a template. Deleting a template also deletes its associated versions.
     * Deleted templates can not be used to create postcard, letter, or check resources.
     * @param  tmplId  Required parameter: id of the template
     * @return    Returns the TemplateDeletion response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public TemplateDeletion deleteTemplate(
            final String tmplId) throws ApiException, IOException {
        HttpRequest request = buildDeleteTemplateRequest(tmplId);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleDeleteTemplateResponse(context);
    }

    /**
     * Permanently deletes a template. Deleting a template also deletes its associated versions.
     * Deleted templates can not be used to create postcard, letter, or check resources.
     * @param  tmplId  Required parameter: id of the template
     * @return    Returns the TemplateDeletion response from the API call
     */
    public CompletableFuture<TemplateDeletion> deleteTemplateAsync(
            final String tmplId) {
        return makeHttpCallAsync(() -> buildDeleteTemplateRequest(tmplId),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleDeleteTemplateResponse(context));
    }

    /**
     * Builds the HttpRequest object for deleteTemplate.
     */
    private HttpRequest buildDeleteTemplateRequest(
            final String tmplId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/templates/{tmpl_id}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("tmpl_id",
                new SimpleEntry<Object, Boolean>(tmplId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().delete(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for deleteTemplate.
     * @return An object of type TemplateDeletion
     */
    private TemplateDeletion handleDeleteTemplateResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if ((responseCode < 200) || (responseCode > 208)) {
            throw new ErrorErrorException("Error", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        TemplateDeletion result = ApiHelper.deserialize(responseBody,
                TemplateDeletion.class);

        return result;
    }

    /**
     * Returns a list of your templates. The templates are returned sorted by creation date, with
     * the most recently created templates appearing first.
     * @param  limit  Optional parameter: How many results to return.
     * @param  beforeOrAfter  Optional parameter: before and after are both optional but only one of
     *         them can be in the query at a time.
     * @param  include  Optional parameter: Request that the response include the total count by
     *         specifying `include[]=total_count`.
     * @param  dateCreated  Optional parameter: Filter by ISO-8601 date or datetime, e.g. `{ gt:
     *         '2012-01-01', lt: '2012-01-31T12:34:56Z' }` where `gt` is &gt;, `lt` is &lt;, `gte` is ≥,
     *         and `lte` is ≤.
     * @param  metadata  Optional parameter: Filter by metadata key-value pair, e.g.
     *         `metadata[customer_id]=987654`.
     * @return    Returns the AllTemplates response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public AllTemplates listTemplates(
            final Integer limit,
            final Object beforeOrAfter,
            final Object include,
            final LocalDateTime dateCreated,
            final Integer metadata) throws ApiException, IOException {
        HttpRequest request = buildListTemplatesRequest(limit, beforeOrAfter, include, dateCreated,
                metadata);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleListTemplatesResponse(context);
    }

    /**
     * Returns a list of your templates. The templates are returned sorted by creation date, with
     * the most recently created templates appearing first.
     * @param  limit  Optional parameter: How many results to return.
     * @param  beforeOrAfter  Optional parameter: before and after are both optional but only one of
     *         them can be in the query at a time.
     * @param  include  Optional parameter: Request that the response include the total count by
     *         specifying `include[]=total_count`.
     * @param  dateCreated  Optional parameter: Filter by ISO-8601 date or datetime, e.g. `{ gt:
     *         '2012-01-01', lt: '2012-01-31T12:34:56Z' }` where `gt` is &gt;, `lt` is &lt;, `gte` is ≥,
     *         and `lte` is ≤.
     * @param  metadata  Optional parameter: Filter by metadata key-value pair, e.g.
     *         `metadata[customer_id]=987654`.
     * @return    Returns the AllTemplates response from the API call
     */
    public CompletableFuture<AllTemplates> listTemplatesAsync(
            final Integer limit,
            final Object beforeOrAfter,
            final Object include,
            final LocalDateTime dateCreated,
            final Integer metadata) {
        return makeHttpCallAsync(() -> buildListTemplatesRequest(limit, beforeOrAfter, include,
                dateCreated, metadata),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleListTemplatesResponse(context));
    }

    /**
     * Builds the HttpRequest object for listTemplates.
     */
    private HttpRequest buildListTemplatesRequest(
            final Integer limit,
            final Object beforeOrAfter,
            final Object include,
            final LocalDateTime dateCreated,
            final Integer metadata) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/templates");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("limit",
                (limit != null) ? limit : 10);
        queryParameters.put("before-or-after", beforeOrAfter);
        queryParameters.put("include", include);
        queryParameters.put("date_created", DateTimeHelper.toRfc8601DateTime(dateCreated));
        queryParameters.put("metadata",
                (metadata != null) ? metadata : 0);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for listTemplates.
     * @return An object of type AllTemplates
     */
    private AllTemplates handleListTemplatesResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if ((responseCode < 200) || (responseCode > 208)) {
            throw new ErrorErrorException("Error", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        AllTemplates result = ApiHelper.deserialize(responseBody,
                AllTemplates.class);

        return result;
    }

    /**
     * Creates a new template for use with the Print & Mail API. In Live mode, you can only have as
     * many non-deleted templates as allotted in your current [Print & Mail
     * Edition](https://dashboard.lob.com/#/settings/editions). If you attempt to create a template
     * past your limit, you will receive a `403` error. There is no limit in Test mode.
     * @param  html  Required parameter: An HTML string of less than 100,000 characters to be used
     *         as the `published_version` of this template. See [here](#section/HTML-Examples) for
     *         guidance on designing HTML templates. Please see endpoint specific documentation for
     *         any other product-specific HTML details: - [Postcards](#operation/create_postcard) -
     *         `front` and `back` - [Self Mailers](#operation/create_self_mailer) - `inside` and
     *         `outside` - [Letters](#operation/create_letter) - `file` -
     *         [Checks](#operation/create_check) - `check_bottom` and `attachment` If there is a
     *         syntax error with your variable names within your HTML, then an error will be thrown,
     *         e.g. using a `{{#users}}` opening tag without the corresponding closing tag
     *         `{{/users}}`.
     * @param  description  Optional parameter: An internal description that identifies this
     *         resource. Must be no longer than 255 characters.
     * @param  metadata  Optional parameter: Use metadata to store custom information for tagging
     *         and labeling back to your internal systems. Must be an object with up to 20 key-value
     *         pairs. Keys must be at most 40 characters and values must be at most 500 characters.
     *         Neither can contain the characters `"` and `\`. Nested objects are not supported. See
     *         [Metadata](#section/Metadata) for more information.
     * @param  engine  Optional parameter: The engine used to combine HTML template with merge
     *         variables. * `legacy` - Lob's original engine * `handlebars`
     * @return    Returns the Template response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Template createTemplate(
            final String html,
            final String description,
            final Metadata metadata,
            final EngineEnum engine) throws ApiException, IOException {
        HttpRequest request = buildCreateTemplateRequest(html, description, metadata, engine);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleCreateTemplateResponse(context);
    }

    /**
     * Creates a new template for use with the Print & Mail API. In Live mode, you can only have as
     * many non-deleted templates as allotted in your current [Print & Mail
     * Edition](https://dashboard.lob.com/#/settings/editions). If you attempt to create a template
     * past your limit, you will receive a `403` error. There is no limit in Test mode.
     * @param  html  Required parameter: An HTML string of less than 100,000 characters to be used
     *         as the `published_version` of this template. See [here](#section/HTML-Examples) for
     *         guidance on designing HTML templates. Please see endpoint specific documentation for
     *         any other product-specific HTML details: - [Postcards](#operation/create_postcard) -
     *         `front` and `back` - [Self Mailers](#operation/create_self_mailer) - `inside` and
     *         `outside` - [Letters](#operation/create_letter) - `file` -
     *         [Checks](#operation/create_check) - `check_bottom` and `attachment` If there is a
     *         syntax error with your variable names within your HTML, then an error will be thrown,
     *         e.g. using a `{{#users}}` opening tag without the corresponding closing tag
     *         `{{/users}}`.
     * @param  description  Optional parameter: An internal description that identifies this
     *         resource. Must be no longer than 255 characters.
     * @param  metadata  Optional parameter: Use metadata to store custom information for tagging
     *         and labeling back to your internal systems. Must be an object with up to 20 key-value
     *         pairs. Keys must be at most 40 characters and values must be at most 500 characters.
     *         Neither can contain the characters `"` and `\`. Nested objects are not supported. See
     *         [Metadata](#section/Metadata) for more information.
     * @param  engine  Optional parameter: The engine used to combine HTML template with merge
     *         variables. * `legacy` - Lob's original engine * `handlebars`
     * @return    Returns the Template response from the API call
     */
    public CompletableFuture<Template> createTemplateAsync(
            final String html,
            final String description,
            final Metadata metadata,
            final EngineEnum engine) {
        return makeHttpCallAsync(() -> buildCreateTemplateRequest(html, description, metadata,
                engine),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleCreateTemplateResponse(context));
    }

    /**
     * Builds the HttpRequest object for createTemplate.
     */
    private HttpRequest buildCreateTemplateRequest(
            final String html,
            final String description,
            final Metadata metadata,
            final EngineEnum engine) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/templates");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //load all fields for the outgoing API request
        Map<String, Object> formParameters = new HashMap<>();
        formParameters.put("html", html);
        if (description != null) {
            formParameters.put("description", description);
        }
        if (metadata != null) {
            formParameters.put("metadata", metadata);
        }
        if (engine != null) {
            formParameters.put("engine",
                (engine != null) ? engine.value() : "legacy");
        }

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().post(queryBuilder, headers, null,
                ApiHelper.prepareFormFields(formParameters));

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for createTemplate.
     * @return An object of type Template
     */
    private Template handleCreateTemplateResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if ((responseCode < 200) || (responseCode > 208)) {
            throw new ErrorErrorException("Error", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Template result = ApiHelper.deserialize(responseBody,
                Template.class);

        return result;
    }

}