/*
 * LobAPI20200211SpecificationLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.controllers;

import com.lob.api.ApiHelper;
import com.lob.api.AuthManager;
import com.lob.api.Configuration;
import com.lob.api.exceptions.ApiException;
import com.lob.api.exceptions.ErrorErrorException;
import com.lob.api.http.Headers;
import com.lob.api.http.client.HttpCallback;
import com.lob.api.http.client.HttpClient;
import com.lob.api.http.client.HttpContext;
import com.lob.api.http.request.HttpRequest;
import com.lob.api.http.response.HttpResponse;
import com.lob.api.http.response.HttpStringResponse;
import com.lob.api.models.UsAutocompletions;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * This class lists all the endpoints of the groups.
 */
public final class USAutocompletionsController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public USAutocompletionsController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }

    /**
     * Initializes the controller with HTTPCallback.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     * @param httpCallback    Callback to be called before and after the HTTP call.
     */
    public USAutocompletionsController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        super(config, httpClient, authManagers, httpCallback);
    }

    /**
     * Given an address prefix consisting of a partial primary line, as well as optional input of
     * city, state, and zip code, this functionality returns up to 10 full US address suggestions.
     * Not all of them will turn out to be valid addresses; they'll need to be
     * [verified](#operation/us_verification).
     * @param  addressPrefix  Required parameter: Only accepts numbers and street names in an
     *         alphanumeric format.
     * @param  city  Optional parameter: An optional city input used to filter suggestions. Case
     *         insensitive and does not match partial abbreviations.
     * @param  state  Optional parameter: An optional state input used to filter suggestions. Case
     *         insensitive and does not match partial abbreviations.
     * @param  zipCode  Optional parameter: An optional ZIP Code input used to filter suggestions.
     *         Matches partial entries.
     * @param  geoIpSort  Optional parameter: If `true`, sort suggestions by proximity to the IP set
     *         in the `X-Forwarded-For` header.
     * @return    Returns the UsAutocompletions response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public UsAutocompletions autocompletion(
            final String addressPrefix,
            final String city,
            final String state,
            final String zipCode,
            final Boolean geoIpSort) throws ApiException, IOException {
        HttpRequest request = buildAutocompletionRequest(addressPrefix, city, state, zipCode,
                geoIpSort);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleAutocompletionResponse(context);
    }

    /**
     * Given an address prefix consisting of a partial primary line, as well as optional input of
     * city, state, and zip code, this functionality returns up to 10 full US address suggestions.
     * Not all of them will turn out to be valid addresses; they'll need to be
     * [verified](#operation/us_verification).
     * @param  addressPrefix  Required parameter: Only accepts numbers and street names in an
     *         alphanumeric format.
     * @param  city  Optional parameter: An optional city input used to filter suggestions. Case
     *         insensitive and does not match partial abbreviations.
     * @param  state  Optional parameter: An optional state input used to filter suggestions. Case
     *         insensitive and does not match partial abbreviations.
     * @param  zipCode  Optional parameter: An optional ZIP Code input used to filter suggestions.
     *         Matches partial entries.
     * @param  geoIpSort  Optional parameter: If `true`, sort suggestions by proximity to the IP set
     *         in the `X-Forwarded-For` header.
     * @return    Returns the UsAutocompletions response from the API call
     */
    public CompletableFuture<UsAutocompletions> autocompletionAsync(
            final String addressPrefix,
            final String city,
            final String state,
            final String zipCode,
            final Boolean geoIpSort) {
        return makeHttpCallAsync(() -> buildAutocompletionRequest(addressPrefix, city, state,
                zipCode, geoIpSort),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleAutocompletionResponse(context));
    }

    /**
     * Builds the HttpRequest object for autocompletion.
     */
    private HttpRequest buildAutocompletionRequest(
            final String addressPrefix,
            final String city,
            final String state,
            final String zipCode,
            final Boolean geoIpSort) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/us_autocompletions");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //load all fields for the outgoing API request
        Map<String, Object> formParameters = new HashMap<>();
        formParameters.put("address_prefix", addressPrefix);
        if (city != null) {
            formParameters.put("city", city);
        }
        if (state != null) {
            formParameters.put("state", state);
        }
        if (zipCode != null) {
            formParameters.put("zip_code", zipCode);
        }
        if (geoIpSort != null) {
            formParameters.put("geo_ip_sort", geoIpSort);
        }

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().post(queryBuilder, headers, null,
                ApiHelper.prepareFormFields(formParameters));

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for autocompletion.
     * @return An object of type UsAutocompletions
     */
    private UsAutocompletions handleAutocompletionResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if ((responseCode < 200) || (responseCode > 208)) {
            throw new ErrorErrorException("Error", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        UsAutocompletions result = ApiHelper.deserialize(responseBody,
                UsAutocompletions.class);

        return result;
    }

}