/*
 * LobAPI20200211SpecificationLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.lob.api.ApiHelper;
import com.lob.api.AuthManager;
import com.lob.api.Configuration;
import com.lob.api.exceptions.ApiException;
import com.lob.api.exceptions.ErrorErrorException;
import com.lob.api.http.Headers;
import com.lob.api.http.client.HttpCallback;
import com.lob.api.http.client.HttpClient;
import com.lob.api.http.client.HttpContext;
import com.lob.api.http.request.HttpRequest;
import com.lob.api.http.response.HttpResponse;
import com.lob.api.http.response.HttpStringResponse;
import com.lob.api.models.CaseEnum;
import com.lob.api.models.MultipleComponents;
import com.lob.api.models.UsVerification;
import com.lob.api.models.UsVerifications;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * This class lists all the endpoints of the groups.
 */
public final class USVerificationsController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public USVerificationsController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }

    /**
     * Initializes the controller with HTTPCallback.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     * @param httpCallback    Callback to be called before and after the HTTP call.
     */
    public USVerificationsController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        super(config, httpClient, authManagers, httpCallback);
    }

    /**
     * Verify a list of US or US territory addresses _with a live API key_. Requests to this
     * endpoint with a test API key will return a dummy response based on the primary line you
     * input.
     * @param  addresses  Required parameter: Example:
     * @param  mCase  Optional parameter: Casing of the verified address. Possible values are
     *         `upper` and `proper` for uppercased (e.g. "PO BOX") and proper-cased (e.g. "PO Box"),
     *         respectively. Only affects `recipient`, `primary_line`, `secondary_line`,
     *         `urbanization`, and `last_line`. Default casing is `upper`.
     * @return    Returns the UsVerifications response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public UsVerifications bulkUsVerifications(
            final List<MultipleComponents> addresses,
            final CaseEnum mCase) throws ApiException, IOException {
        HttpRequest request = buildBulkUsVerificationsRequest(addresses, mCase);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleBulkUsVerificationsResponse(context);
    }

    /**
     * Verify a list of US or US territory addresses _with a live API key_. Requests to this
     * endpoint with a test API key will return a dummy response based on the primary line you
     * input.
     * @param  addresses  Required parameter: Example:
     * @param  mCase  Optional parameter: Casing of the verified address. Possible values are
     *         `upper` and `proper` for uppercased (e.g. "PO BOX") and proper-cased (e.g. "PO Box"),
     *         respectively. Only affects `recipient`, `primary_line`, `secondary_line`,
     *         `urbanization`, and `last_line`. Default casing is `upper`.
     * @return    Returns the UsVerifications response from the API call
     */
    public CompletableFuture<UsVerifications> bulkUsVerificationsAsync(
            final List<MultipleComponents> addresses,
            final CaseEnum mCase) {
        return makeHttpCallAsync(() -> buildBulkUsVerificationsRequest(addresses, mCase),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleBulkUsVerificationsResponse(context));
    }

    /**
     * Builds the HttpRequest object for bulkUsVerifications.
     */
    private HttpRequest buildBulkUsVerificationsRequest(
            final List<MultipleComponents> addresses,
            final CaseEnum mCase) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/bulk/us_verifications");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("case",
                (mCase != null) ? mCase.value() : "upper");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //load all fields for the outgoing API request
        Map<String, Object> formParameters = new HashMap<>();
        formParameters.put("addresses", addresses);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().post(queryBuilder, headers, queryParameters,
                ApiHelper.prepareFormFields(formParameters));

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for bulkUsVerifications.
     * @return An object of type UsVerifications
     */
    private UsVerifications handleBulkUsVerificationsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if ((responseCode < 200) || (responseCode > 208)) {
            throw new ErrorErrorException("Error", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        UsVerifications result = ApiHelper.deserialize(responseBody,
                UsVerifications.class);

        return result;
    }

    /**
     * Verify a US or US territory address _with a live API key_. The address can be in components
     * (e.g. `primary_line` is "210 King Street", `zip_code` is "94107") or as a single string (e.g.
     * "210 King Street 94107"), but not as both. Requests using a test API key validate required
     * fields but return empty values unless specific `primary_line` values are provided. See the
     * [US Verifications Test Environment](#section/US-Verifications-Test-Env) for details.
     * @param  body  Required parameter: Example:
     * @param  mCase  Optional parameter: Casing of the verified address. Possible values are
     *         `upper` and `proper` for uppercased (e.g. "PO BOX") and proper-cased (e.g. "PO Box"),
     *         respectively. Only affects `recipient`, `primary_line`, `secondary_line`,
     *         `urbanization`, and `last_line`. Default casing is `upper`.
     * @return    Returns the UsVerification response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public UsVerification usVerification(
            final Object body,
            final CaseEnum mCase) throws ApiException, IOException {
        HttpRequest request = buildUsVerificationRequest(body, mCase);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleUsVerificationResponse(context);
    }

    /**
     * Verify a US or US territory address _with a live API key_. The address can be in components
     * (e.g. `primary_line` is "210 King Street", `zip_code` is "94107") or as a single string (e.g.
     * "210 King Street 94107"), but not as both. Requests using a test API key validate required
     * fields but return empty values unless specific `primary_line` values are provided. See the
     * [US Verifications Test Environment](#section/US-Verifications-Test-Env) for details.
     * @param  body  Required parameter: Example:
     * @param  mCase  Optional parameter: Casing of the verified address. Possible values are
     *         `upper` and `proper` for uppercased (e.g. "PO BOX") and proper-cased (e.g. "PO Box"),
     *         respectively. Only affects `recipient`, `primary_line`, `secondary_line`,
     *         `urbanization`, and `last_line`. Default casing is `upper`.
     * @return    Returns the UsVerification response from the API call
     */
    public CompletableFuture<UsVerification> usVerificationAsync(
            final Object body,
            final CaseEnum mCase) {
        return makeHttpCallAsync(() -> buildUsVerificationRequest(body, mCase),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleUsVerificationResponse(context));
    }

    /**
     * Builds the HttpRequest object for usVerification.
     */
    private HttpRequest buildUsVerificationRequest(
            final Object body,
            final CaseEnum mCase) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/us_verifications");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("case",
                (mCase != null) ? mCase.value() : "upper");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for usVerification.
     * @return An object of type UsVerification
     */
    private UsVerification handleUsVerificationResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if ((responseCode < 200) || (responseCode > 208)) {
            throw new ErrorErrorException("Error", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        UsVerification result = ApiHelper.deserialize(responseBody,
                UsVerification.class);

        return result;
    }

}