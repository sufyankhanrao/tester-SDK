/*
 * LobAPI20200211SpecificationLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.lob.api.internal.OptionalNullable;

/**
 * This is a model class for AddressEditableBase type.
 */
public class AddressEditableBase {
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<String> description;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<String> name;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<String> company;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<String> phone;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<String> email;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Metadata metadata;

    /**
     * Default constructor.
     */
    public AddressEditableBase() {
    }

    /**
     * Initialization constructor.
     * @param  description  String value for description.
     * @param  name  String value for name.
     * @param  company  String value for company.
     * @param  phone  String value for phone.
     * @param  email  String value for email.
     * @param  metadata  Metadata value for metadata.
     */
    public AddressEditableBase(
            String description,
            String name,
            String company,
            String phone,
            String email,
            Metadata metadata) {
        this.description = OptionalNullable.of(description);
        this.name = OptionalNullable.of(name);
        this.company = OptionalNullable.of(company);
        this.phone = OptionalNullable.of(phone);
        this.email = OptionalNullable.of(email);
        this.metadata = metadata;
    }

    /**
     * Internal initialization constructor.
     */
    protected AddressEditableBase(OptionalNullable<String> description,
            OptionalNullable<String> name, OptionalNullable<String> company,
            OptionalNullable<String> phone, OptionalNullable<String> email, Metadata metadata) {
        this.description = description;
        this.name = name;
        this.company = company;
        this.phone = phone;
        this.email = email;
        this.metadata = metadata;
    }

    /**
     * Internal Getter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     * @return Returns the Internal String
     */
    @JsonGetter("description")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDescription() {
        return this.description;
    }

    /**
     * Getter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     * @return Returns the String
     */
    public String getDescription() {
        return OptionalNullable.getFrom(description);
    }

    /**
     * Setter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = OptionalNullable.of(description);
    }

    /**
     * UnSetter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     */
    public void unsetDescription() {
        description = null;
    }

    /**
     * Internal Getter for Name.
     * Either `name` or `company` is required, you may also add both. Must be no longer than 40
     * characters. If both `name` and `company` are provided, they will be printed on two separate
     * lines above the rest of the address.
     * @return Returns the Internal String
     */
    @JsonGetter("name")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetName() {
        return this.name;
    }

    /**
     * Getter for Name.
     * Either `name` or `company` is required, you may also add both. Must be no longer than 40
     * characters. If both `name` and `company` are provided, they will be printed on two separate
     * lines above the rest of the address.
     * @return Returns the String
     */
    public String getName() {
        return OptionalNullable.getFrom(name);
    }

    /**
     * Setter for Name.
     * Either `name` or `company` is required, you may also add both. Must be no longer than 40
     * characters. If both `name` and `company` are provided, they will be printed on two separate
     * lines above the rest of the address.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = OptionalNullable.of(name);
    }

    /**
     * UnSetter for Name.
     * Either `name` or `company` is required, you may also add both. Must be no longer than 40
     * characters. If both `name` and `company` are provided, they will be printed on two separate
     * lines above the rest of the address.
     */
    public void unsetName() {
        name = null;
    }

    /**
     * Internal Getter for Company.
     * Either `name` or `company` is required, you may also add both. Must be no longer than 40
     * characters. If both `name` and `company` are provided, they will be printed on two separate
     * lines above the rest of the address. This field can be used for any secondary recipient
     * information which is not part of the actual mailing address (Company Name, Department,
     * Attention Line, etc).
     * @return Returns the Internal String
     */
    @JsonGetter("company")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCompany() {
        return this.company;
    }

    /**
     * Getter for Company.
     * Either `name` or `company` is required, you may also add both. Must be no longer than 40
     * characters. If both `name` and `company` are provided, they will be printed on two separate
     * lines above the rest of the address. This field can be used for any secondary recipient
     * information which is not part of the actual mailing address (Company Name, Department,
     * Attention Line, etc).
     * @return Returns the String
     */
    public String getCompany() {
        return OptionalNullable.getFrom(company);
    }

    /**
     * Setter for Company.
     * Either `name` or `company` is required, you may also add both. Must be no longer than 40
     * characters. If both `name` and `company` are provided, they will be printed on two separate
     * lines above the rest of the address. This field can be used for any secondary recipient
     * information which is not part of the actual mailing address (Company Name, Department,
     * Attention Line, etc).
     * @param company Value for String
     */
    @JsonSetter("company")
    public void setCompany(String company) {
        this.company = OptionalNullable.of(company);
    }

    /**
     * UnSetter for Company.
     * Either `name` or `company` is required, you may also add both. Must be no longer than 40
     * characters. If both `name` and `company` are provided, they will be printed on two separate
     * lines above the rest of the address. This field can be used for any secondary recipient
     * information which is not part of the actual mailing address (Company Name, Department,
     * Attention Line, etc).
     */
    public void unsetCompany() {
        company = null;
    }

    /**
     * Internal Getter for Phone.
     * Must be no longer than 40 characters.
     * @return Returns the Internal String
     */
    @JsonGetter("phone")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPhone() {
        return this.phone;
    }

    /**
     * Getter for Phone.
     * Must be no longer than 40 characters.
     * @return Returns the String
     */
    public String getPhone() {
        return OptionalNullable.getFrom(phone);
    }

    /**
     * Setter for Phone.
     * Must be no longer than 40 characters.
     * @param phone Value for String
     */
    @JsonSetter("phone")
    public void setPhone(String phone) {
        this.phone = OptionalNullable.of(phone);
    }

    /**
     * UnSetter for Phone.
     * Must be no longer than 40 characters.
     */
    public void unsetPhone() {
        phone = null;
    }

    /**
     * Internal Getter for Email.
     * Must be no longer than 100 characters.
     * @return Returns the Internal String
     */
    @JsonGetter("email")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetEmail() {
        return this.email;
    }

    /**
     * Getter for Email.
     * Must be no longer than 100 characters.
     * @return Returns the String
     */
    public String getEmail() {
        return OptionalNullable.getFrom(email);
    }

    /**
     * Setter for Email.
     * Must be no longer than 100 characters.
     * @param email Value for String
     */
    @JsonSetter("email")
    public void setEmail(String email) {
        this.email = OptionalNullable.of(email);
    }

    /**
     * UnSetter for Email.
     * Must be no longer than 100 characters.
     */
    public void unsetEmail() {
        email = null;
    }

    /**
     * Getter for Metadata.
     * Use metadata to store custom information for tagging and labeling back to your internal
     * systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters
     * and values must be at most 500 characters. Neither can contain the characters `"` and `\`.
     * Nested objects are not supported. See [Metadata](#section/Metadata) for more information.
     * @return Returns the Metadata
     */
    @JsonGetter("metadata")
    public Metadata getMetadata() {
        return metadata;
    }

    /**
     * Setter for Metadata.
     * Use metadata to store custom information for tagging and labeling back to your internal
     * systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters
     * and values must be at most 500 characters. Neither can contain the characters `"` and `\`.
     * Nested objects are not supported. See [Metadata](#section/Metadata) for more information.
     * @param metadata Value for Metadata
     */
    @JsonSetter("metadata")
    public void setMetadata(Metadata metadata) {
        this.metadata = metadata;
    }

    /**
     * Converts this AddressEditableBase into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "AddressEditableBase [" + "description=" + description + ", name=" + name
                + ", company=" + company + ", phone=" + phone + ", email=" + email + ", metadata="
                + metadata + "]";
    }

    /**
     * Builds a new {@link AddressEditableBase.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link AddressEditableBase.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .metadata(getMetadata());
        builder.description = internalGetDescription();
        builder.name = internalGetName();
        builder.company = internalGetCompany();
        builder.phone = internalGetPhone();
        builder.email = internalGetEmail();
        return builder;
    }

    /**
     * Class to build instances of {@link AddressEditableBase}.
     */
    public static class Builder {
        private OptionalNullable<String> description;
        private OptionalNullable<String> name;
        private OptionalNullable<String> company;
        private OptionalNullable<String> phone;
        private OptionalNullable<String> email;
        private Metadata metadata;



        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = OptionalNullable.of(description);
            return this;
        }

        /**
         * UnSetter for description.
         * @return Builder
         */
        public Builder unsetDescription() {
            description = null;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = OptionalNullable.of(name);
            return this;
        }

        /**
         * UnSetter for name.
         * @return Builder
         */
        public Builder unsetName() {
            name = null;
            return this;
        }

        /**
         * Setter for company.
         * @param  company  String value for company.
         * @return Builder
         */
        public Builder company(String company) {
            this.company = OptionalNullable.of(company);
            return this;
        }

        /**
         * UnSetter for company.
         * @return Builder
         */
        public Builder unsetCompany() {
            company = null;
            return this;
        }

        /**
         * Setter for phone.
         * @param  phone  String value for phone.
         * @return Builder
         */
        public Builder phone(String phone) {
            this.phone = OptionalNullable.of(phone);
            return this;
        }

        /**
         * UnSetter for phone.
         * @return Builder
         */
        public Builder unsetPhone() {
            phone = null;
            return this;
        }

        /**
         * Setter for email.
         * @param  email  String value for email.
         * @return Builder
         */
        public Builder email(String email) {
            this.email = OptionalNullable.of(email);
            return this;
        }

        /**
         * UnSetter for email.
         * @return Builder
         */
        public Builder unsetEmail() {
            email = null;
            return this;
        }

        /**
         * Setter for metadata.
         * @param  metadata  Metadata value for metadata.
         * @return Builder
         */
        public Builder metadata(Metadata metadata) {
            this.metadata = metadata;
            return this;
        }

        /**
         * Builds a new {@link AddressEditableBase} object using the set fields.
         * @return {@link AddressEditableBase}
         */
        public AddressEditableBase build() {
            return new AddressEditableBase(description, name, company, phone, email, metadata);
        }
    }
}
