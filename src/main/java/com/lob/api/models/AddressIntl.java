/*
 * LobAPI20200211SpecificationLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.lob.api.DateTimeHelper;
import com.lob.api.internal.OptionalNullable;
import java.time.LocalDateTime;

/**
 * This is a model class for AddressIntl type.
 */
public class AddressIntl {
    private LocalDateTime dateCreated;
    private LocalDateTime dateModified;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Boolean deleted;
    private String object;
    private String id;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<String> description;
    private String name;
    private String company;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<String> phone;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<String> email;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Metadata metadata;
    private String addressLine1;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<String> addressLine2;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<String> addressCity;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<String> addressState;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<String> addressZip;
    private AddressCountry1Enum addressCountry;

    /**
     * Default constructor.
     */
    public AddressIntl() {
    }

    /**
     * Initialization constructor.
     * @param  dateCreated  LocalDateTime value for dateCreated.
     * @param  dateModified  LocalDateTime value for dateModified.
     * @param  object  String value for object.
     * @param  id  String value for id.
     * @param  name  String value for name.
     * @param  company  String value for company.
     * @param  addressLine1  String value for addressLine1.
     * @param  addressCountry  AddressCountry1Enum value for addressCountry.
     * @param  deleted  Boolean value for deleted.
     * @param  description  String value for description.
     * @param  phone  String value for phone.
     * @param  email  String value for email.
     * @param  metadata  Metadata value for metadata.
     * @param  addressLine2  String value for addressLine2.
     * @param  addressCity  String value for addressCity.
     * @param  addressState  String value for addressState.
     * @param  addressZip  String value for addressZip.
     */
    public AddressIntl(
            LocalDateTime dateCreated,
            LocalDateTime dateModified,
            String object,
            String id,
            String name,
            String company,
            String addressLine1,
            AddressCountry1Enum addressCountry,
            Boolean deleted,
            String description,
            String phone,
            String email,
            Metadata metadata,
            String addressLine2,
            String addressCity,
            String addressState,
            String addressZip) {
        this.dateCreated = dateCreated;
        this.dateModified = dateModified;
        this.deleted = deleted;
        this.object = object;
        this.id = id;
        this.description = OptionalNullable.of(description);
        this.name = name;
        this.company = company;
        this.phone = OptionalNullable.of(phone);
        this.email = OptionalNullable.of(email);
        this.metadata = metadata;
        this.addressLine1 = addressLine1;
        this.addressLine2 = OptionalNullable.of(addressLine2);
        this.addressCity = OptionalNullable.of(addressCity);
        this.addressState = OptionalNullable.of(addressState);
        this.addressZip = OptionalNullable.of(addressZip);
        this.addressCountry = addressCountry;
    }

    /**
     * Internal initialization constructor.
     */
    protected AddressIntl(LocalDateTime dateCreated, LocalDateTime dateModified, String object,
            String id, String name, String company, String addressLine1,
            AddressCountry1Enum addressCountry, Boolean deleted,
            OptionalNullable<String> description, OptionalNullable<String> phone,
            OptionalNullable<String> email, Metadata metadata,
            OptionalNullable<String> addressLine2, OptionalNullable<String> addressCity,
            OptionalNullable<String> addressState, OptionalNullable<String> addressZip) {
        this.dateCreated = dateCreated;
        this.dateModified = dateModified;
        this.deleted = deleted;
        this.object = object;
        this.id = id;
        this.description = description;
        this.name = name;
        this.company = company;
        this.phone = phone;
        this.email = email;
        this.metadata = metadata;
        this.addressLine1 = addressLine1;
        this.addressLine2 = addressLine2;
        this.addressCity = addressCity;
        this.addressState = addressState;
        this.addressZip = addressZip;
        this.addressCountry = addressCountry;
    }

    /**
     * Getter for DateCreated.
     * A timestamp in ISO 8601 format of the date the resource was created.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("date_created")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getDateCreated() {
        return dateCreated;
    }

    /**
     * Setter for DateCreated.
     * A timestamp in ISO 8601 format of the date the resource was created.
     * @param dateCreated Value for LocalDateTime
     */
    @JsonSetter("date_created")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setDateCreated(LocalDateTime dateCreated) {
        this.dateCreated = dateCreated;
    }

    /**
     * Getter for DateModified.
     * A timestamp in ISO 8601 format of the date the resource was last modified.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("date_modified")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getDateModified() {
        return dateModified;
    }

    /**
     * Setter for DateModified.
     * A timestamp in ISO 8601 format of the date the resource was last modified.
     * @param dateModified Value for LocalDateTime
     */
    @JsonSetter("date_modified")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setDateModified(LocalDateTime dateModified) {
        this.dateModified = dateModified;
    }

    /**
     * Getter for Deleted.
     * Only returned if the resource has been successfully deleted.
     * @return Returns the Boolean
     */
    @JsonGetter("deleted")
    public Boolean getDeleted() {
        return deleted;
    }

    /**
     * Setter for Deleted.
     * Only returned if the resource has been successfully deleted.
     * @param deleted Value for Boolean
     */
    @JsonSetter("deleted")
    public void setDeleted(Boolean deleted) {
        this.deleted = deleted;
    }

    /**
     * Getter for Object.
     * Value is type of resource.
     * @return Returns the String
     */
    @JsonGetter("object")
    public String getObject() {
        return object;
    }

    /**
     * Setter for Object.
     * Value is type of resource.
     * @param object Value for String
     */
    @JsonSetter("object")
    public void setObject(String object) {
        this.object = object;
    }

    /**
     * Getter for Id.
     * Unique identifier prefixed with `adr_`.
     * @return Returns the String
     */
    @JsonGetter("id")
    public String getId() {
        return id;
    }

    /**
     * Setter for Id.
     * Unique identifier prefixed with `adr_`.
     * @param id Value for String
     */
    @JsonSetter("id")
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Internal Getter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     * @return Returns the Internal String
     */
    @JsonGetter("description")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDescription() {
        return this.description;
    }

    /**
     * Getter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     * @return Returns the String
     */
    public String getDescription() {
        return OptionalNullable.getFrom(description);
    }

    /**
     * Setter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = OptionalNullable.of(description);
    }

    /**
     * UnSetter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     */
    public void unsetDescription() {
        description = null;
    }

    /**
     * Getter for Name.
     * Either `name` or `company` is required, you may also add both. Must be no longer than 40
     * characters. If both `name` and `company` are provided, they will be printed on two separate
     * lines above the rest of the address.
     * @return Returns the String
     */
    @JsonGetter("name")
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * Either `name` or `company` is required, you may also add both. Must be no longer than 40
     * characters. If both `name` and `company` are provided, they will be printed on two separate
     * lines above the rest of the address.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for Company.
     * Either `name` or `company` is required, you may also add both. Must be no longer than 40
     * characters. If both `name` and `company` are provided, they will be printed on two separate
     * lines above the rest of the address. This field can be used for any secondary recipient
     * information which is not part of the actual mailing address (Company Name, Department,
     * Attention Line, etc).
     * @return Returns the String
     */
    @JsonGetter("company")
    public String getCompany() {
        return company;
    }

    /**
     * Setter for Company.
     * Either `name` or `company` is required, you may also add both. Must be no longer than 40
     * characters. If both `name` and `company` are provided, they will be printed on two separate
     * lines above the rest of the address. This field can be used for any secondary recipient
     * information which is not part of the actual mailing address (Company Name, Department,
     * Attention Line, etc).
     * @param company Value for String
     */
    @JsonSetter("company")
    public void setCompany(String company) {
        this.company = company;
    }

    /**
     * Internal Getter for Phone.
     * Must be no longer than 40 characters.
     * @return Returns the Internal String
     */
    @JsonGetter("phone")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPhone() {
        return this.phone;
    }

    /**
     * Getter for Phone.
     * Must be no longer than 40 characters.
     * @return Returns the String
     */
    public String getPhone() {
        return OptionalNullable.getFrom(phone);
    }

    /**
     * Setter for Phone.
     * Must be no longer than 40 characters.
     * @param phone Value for String
     */
    @JsonSetter("phone")
    public void setPhone(String phone) {
        this.phone = OptionalNullable.of(phone);
    }

    /**
     * UnSetter for Phone.
     * Must be no longer than 40 characters.
     */
    public void unsetPhone() {
        phone = null;
    }

    /**
     * Internal Getter for Email.
     * Must be no longer than 100 characters.
     * @return Returns the Internal String
     */
    @JsonGetter("email")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetEmail() {
        return this.email;
    }

    /**
     * Getter for Email.
     * Must be no longer than 100 characters.
     * @return Returns the String
     */
    public String getEmail() {
        return OptionalNullable.getFrom(email);
    }

    /**
     * Setter for Email.
     * Must be no longer than 100 characters.
     * @param email Value for String
     */
    @JsonSetter("email")
    public void setEmail(String email) {
        this.email = OptionalNullable.of(email);
    }

    /**
     * UnSetter for Email.
     * Must be no longer than 100 characters.
     */
    public void unsetEmail() {
        email = null;
    }

    /**
     * Getter for Metadata.
     * Use metadata to store custom information for tagging and labeling back to your internal
     * systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters
     * and values must be at most 500 characters. Neither can contain the characters `"` and `\`.
     * Nested objects are not supported. See [Metadata](#section/Metadata) for more information.
     * @return Returns the Metadata
     */
    @JsonGetter("metadata")
    public Metadata getMetadata() {
        return metadata;
    }

    /**
     * Setter for Metadata.
     * Use metadata to store custom information for tagging and labeling back to your internal
     * systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters
     * and values must be at most 500 characters. Neither can contain the characters `"` and `\`.
     * Nested objects are not supported. See [Metadata](#section/Metadata) for more information.
     * @param metadata Value for Metadata
     */
    @JsonSetter("metadata")
    public void setMetadata(Metadata metadata) {
        this.metadata = metadata;
    }

    /**
     * Getter for AddressLine1.
     * @return Returns the String
     */
    @JsonGetter("address_line1")
    public String getAddressLine1() {
        return addressLine1;
    }

    /**
     * Setter for AddressLine1.
     * @param addressLine1 Value for String
     */
    @JsonSetter("address_line1")
    public void setAddressLine1(String addressLine1) {
        this.addressLine1 = addressLine1;
    }

    /**
     * Internal Getter for AddressLine2.
     * @return Returns the Internal String
     */
    @JsonGetter("address_line2")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAddressLine2() {
        return this.addressLine2;
    }

    /**
     * Getter for AddressLine2.
     * @return Returns the String
     */
    public String getAddressLine2() {
        return OptionalNullable.getFrom(addressLine2);
    }

    /**
     * Setter for AddressLine2.
     * @param addressLine2 Value for String
     */
    @JsonSetter("address_line2")
    public void setAddressLine2(String addressLine2) {
        this.addressLine2 = OptionalNullable.of(addressLine2);
    }

    /**
     * UnSetter for AddressLine2.
     */
    public void unsetAddressLine2() {
        addressLine2 = null;
    }

    /**
     * Internal Getter for AddressCity.
     * @return Returns the Internal String
     */
    @JsonGetter("address_city")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAddressCity() {
        return this.addressCity;
    }

    /**
     * Getter for AddressCity.
     * @return Returns the String
     */
    public String getAddressCity() {
        return OptionalNullable.getFrom(addressCity);
    }

    /**
     * Setter for AddressCity.
     * @param addressCity Value for String
     */
    @JsonSetter("address_city")
    public void setAddressCity(String addressCity) {
        this.addressCity = OptionalNullable.of(addressCity);
    }

    /**
     * UnSetter for AddressCity.
     */
    public void unsetAddressCity() {
        addressCity = null;
    }

    /**
     * Internal Getter for AddressState.
     * Will be returned as a full string
     * @return Returns the Internal String
     */
    @JsonGetter("address_state")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAddressState() {
        return this.addressState;
    }

    /**
     * Getter for AddressState.
     * Will be returned as a full string
     * @return Returns the String
     */
    public String getAddressState() {
        return OptionalNullable.getFrom(addressState);
    }

    /**
     * Setter for AddressState.
     * Will be returned as a full string
     * @param addressState Value for String
     */
    @JsonSetter("address_state")
    public void setAddressState(String addressState) {
        this.addressState = OptionalNullable.of(addressState);
    }

    /**
     * UnSetter for AddressState.
     * Will be returned as a full string
     */
    public void unsetAddressState() {
        addressState = null;
    }

    /**
     * Internal Getter for AddressZip.
     * Optional postal code.
     * @return Returns the Internal String
     */
    @JsonGetter("address_zip")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAddressZip() {
        return this.addressZip;
    }

    /**
     * Getter for AddressZip.
     * Optional postal code.
     * @return Returns the String
     */
    public String getAddressZip() {
        return OptionalNullable.getFrom(addressZip);
    }

    /**
     * Setter for AddressZip.
     * Optional postal code.
     * @param addressZip Value for String
     */
    @JsonSetter("address_zip")
    public void setAddressZip(String addressZip) {
        this.addressZip = OptionalNullable.of(addressZip);
    }

    /**
     * UnSetter for AddressZip.
     * Optional postal code.
     */
    public void unsetAddressZip() {
        addressZip = null;
    }

    /**
     * Getter for AddressCountry.
     * Full name of country
     * @return Returns the AddressCountry1Enum
     */
    @JsonGetter("address_country")
    public AddressCountry1Enum getAddressCountry() {
        return addressCountry;
    }

    /**
     * Setter for AddressCountry.
     * Full name of country
     * @param addressCountry Value for AddressCountry1Enum
     */
    @JsonSetter("address_country")
    public void setAddressCountry(AddressCountry1Enum addressCountry) {
        this.addressCountry = addressCountry;
    }

    /**
     * Converts this AddressIntl into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "AddressIntl [" + "dateCreated=" + dateCreated + ", dateModified=" + dateModified
                + ", object=" + object + ", id=" + id + ", name=" + name + ", company=" + company
                + ", addressLine1=" + addressLine1 + ", addressCountry=" + addressCountry
                + ", deleted=" + deleted + ", description=" + description + ", phone=" + phone
                + ", email=" + email + ", metadata=" + metadata + ", addressLine2=" + addressLine2
                + ", addressCity=" + addressCity + ", addressState=" + addressState
                + ", addressZip=" + addressZip + "]";
    }

    /**
     * Builds a new {@link AddressIntl.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link AddressIntl.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(dateCreated, dateModified, object, id, name, company,
                addressLine1, addressCountry)
                .deleted(getDeleted())
                .metadata(getMetadata());
        builder.description = internalGetDescription();
        builder.phone = internalGetPhone();
        builder.email = internalGetEmail();
        builder.addressLine2 = internalGetAddressLine2();
        builder.addressCity = internalGetAddressCity();
        builder.addressState = internalGetAddressState();
        builder.addressZip = internalGetAddressZip();
        return builder;
    }

    /**
     * Class to build instances of {@link AddressIntl}.
     */
    public static class Builder {
        private LocalDateTime dateCreated;
        private LocalDateTime dateModified;
        private String object;
        private String id;
        private String name;
        private String company;
        private String addressLine1;
        private AddressCountry1Enum addressCountry;
        private Boolean deleted;
        private OptionalNullable<String> description;
        private OptionalNullable<String> phone;
        private OptionalNullable<String> email;
        private Metadata metadata;
        private OptionalNullable<String> addressLine2;
        private OptionalNullable<String> addressCity;
        private OptionalNullable<String> addressState;
        private OptionalNullable<String> addressZip;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  dateCreated  LocalDateTime value for dateCreated.
         * @param  dateModified  LocalDateTime value for dateModified.
         * @param  object  String value for object.
         * @param  id  String value for id.
         * @param  name  String value for name.
         * @param  company  String value for company.
         * @param  addressLine1  String value for addressLine1.
         * @param  addressCountry  AddressCountry1Enum value for addressCountry.
         */
        public Builder(LocalDateTime dateCreated, LocalDateTime dateModified, String object,
                String id, String name, String company, String addressLine1,
                AddressCountry1Enum addressCountry) {
            this.dateCreated = dateCreated;
            this.dateModified = dateModified;
            this.object = object;
            this.id = id;
            this.name = name;
            this.company = company;
            this.addressLine1 = addressLine1;
            this.addressCountry = addressCountry;
        }

        /**
         * Setter for dateCreated.
         * @param  dateCreated  LocalDateTime value for dateCreated.
         * @return Builder
         */
        public Builder dateCreated(LocalDateTime dateCreated) {
            this.dateCreated = dateCreated;
            return this;
        }

        /**
         * Setter for dateModified.
         * @param  dateModified  LocalDateTime value for dateModified.
         * @return Builder
         */
        public Builder dateModified(LocalDateTime dateModified) {
            this.dateModified = dateModified;
            return this;
        }

        /**
         * Setter for object.
         * @param  object  String value for object.
         * @return Builder
         */
        public Builder object(String object) {
            this.object = object;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  String value for id.
         * @return Builder
         */
        public Builder id(String id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for company.
         * @param  company  String value for company.
         * @return Builder
         */
        public Builder company(String company) {
            this.company = company;
            return this;
        }

        /**
         * Setter for addressLine1.
         * @param  addressLine1  String value for addressLine1.
         * @return Builder
         */
        public Builder addressLine1(String addressLine1) {
            this.addressLine1 = addressLine1;
            return this;
        }

        /**
         * Setter for addressCountry.
         * @param  addressCountry  AddressCountry1Enum value for addressCountry.
         * @return Builder
         */
        public Builder addressCountry(AddressCountry1Enum addressCountry) {
            this.addressCountry = addressCountry;
            return this;
        }

        /**
         * Setter for deleted.
         * @param  deleted  Boolean value for deleted.
         * @return Builder
         */
        public Builder deleted(Boolean deleted) {
            this.deleted = deleted;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = OptionalNullable.of(description);
            return this;
        }

        /**
         * UnSetter for description.
         * @return Builder
         */
        public Builder unsetDescription() {
            description = null;
            return this;
        }

        /**
         * Setter for phone.
         * @param  phone  String value for phone.
         * @return Builder
         */
        public Builder phone(String phone) {
            this.phone = OptionalNullable.of(phone);
            return this;
        }

        /**
         * UnSetter for phone.
         * @return Builder
         */
        public Builder unsetPhone() {
            phone = null;
            return this;
        }

        /**
         * Setter for email.
         * @param  email  String value for email.
         * @return Builder
         */
        public Builder email(String email) {
            this.email = OptionalNullable.of(email);
            return this;
        }

        /**
         * UnSetter for email.
         * @return Builder
         */
        public Builder unsetEmail() {
            email = null;
            return this;
        }

        /**
         * Setter for metadata.
         * @param  metadata  Metadata value for metadata.
         * @return Builder
         */
        public Builder metadata(Metadata metadata) {
            this.metadata = metadata;
            return this;
        }

        /**
         * Setter for addressLine2.
         * @param  addressLine2  String value for addressLine2.
         * @return Builder
         */
        public Builder addressLine2(String addressLine2) {
            this.addressLine2 = OptionalNullable.of(addressLine2);
            return this;
        }

        /**
         * UnSetter for addressLine2.
         * @return Builder
         */
        public Builder unsetAddressLine2() {
            addressLine2 = null;
            return this;
        }

        /**
         * Setter for addressCity.
         * @param  addressCity  String value for addressCity.
         * @return Builder
         */
        public Builder addressCity(String addressCity) {
            this.addressCity = OptionalNullable.of(addressCity);
            return this;
        }

        /**
         * UnSetter for addressCity.
         * @return Builder
         */
        public Builder unsetAddressCity() {
            addressCity = null;
            return this;
        }

        /**
         * Setter for addressState.
         * @param  addressState  String value for addressState.
         * @return Builder
         */
        public Builder addressState(String addressState) {
            this.addressState = OptionalNullable.of(addressState);
            return this;
        }

        /**
         * UnSetter for addressState.
         * @return Builder
         */
        public Builder unsetAddressState() {
            addressState = null;
            return this;
        }

        /**
         * Setter for addressZip.
         * @param  addressZip  String value for addressZip.
         * @return Builder
         */
        public Builder addressZip(String addressZip) {
            this.addressZip = OptionalNullable.of(addressZip);
            return this;
        }

        /**
         * UnSetter for addressZip.
         * @return Builder
         */
        public Builder unsetAddressZip() {
            addressZip = null;
            return this;
        }

        /**
         * Builds a new {@link AddressIntl} object using the set fields.
         * @return {@link AddressIntl}
         */
        public AddressIntl build() {
            return new AddressIntl(dateCreated, dateModified, object, id, name, company,
                    addressLine1, addressCountry, deleted, description, phone, email, metadata,
                    addressLine2, addressCity, addressState, addressZip);
        }
    }
}
