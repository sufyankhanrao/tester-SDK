/*
 * LobAPI20200211SpecificationLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.models;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * AdvancedEnum to be used.
 */
public enum AdvancedEnum {
    ADDRESS_LENGTH_EXCEEDS_LIMIT,

    BANK_ACCOUNT_ALREADY_VERIFIED,

    BANK_ERROR,

    CUSTOM_ENVELOPE_INVENTORY_DEPLETED,

    DELETED_BANK_ACCOUNT,

    FAILED_DELIVERABILITY_STRICTNESS,

    FILE_PAGES_BELOW_MIN,

    FILE_PAGES_EXCEED_MAX,

    FILE_SIZE_EXCEEDS_LIMIT,

    FOREIGN_RETURN_ADDRESS,

    INCONSISTENT_PAGE_DIMENSIONS,

    INVALID_BANK_ACCOUNT,

    INVALID_BANK_ACCOUNT_VERIFICATION,

    INVALID_CHECK_INTERNATIONAL,

    INVALID_COUNTRY_COVID,

    INVALID_FILE,

    INVALID_FILE_DIMENSIONS,

    INVALID_FILE_DOWNLOAD_TIME,

    INVALID_FILE_URL,

    INVALID_IMAGE_DPI,

    INVALID_INTERNATIONAL_FEATURE,

    INVALID_PERFORATION_RETURN_ENVELOPE,

    INVALID_TEMPLATE_HTML,

    MERGE_VARIABLE_REQUIRED,

    MERGE_VARIABLE_WHITESPACE,

    PAYMENT_METHOD_UNVERIFIED,

    PDF_ENCRYPTED,

    SPECIAL_CHARACTERS_RESTRICTED,

    UNEMBEDDED_FONTS;


    private static TreeMap<String, AdvancedEnum> valueMap = new TreeMap<>();
    private String value;

    static {
        ADDRESS_LENGTH_EXCEEDS_LIMIT.value = "address_length_exceeds_limit";
        BANK_ACCOUNT_ALREADY_VERIFIED.value = "bank_account_already_verified";
        BANK_ERROR.value = "bank_error";
        CUSTOM_ENVELOPE_INVENTORY_DEPLETED.value = "custom_envelope_inventory_depleted";
        DELETED_BANK_ACCOUNT.value = "deleted_bank_account";
        FAILED_DELIVERABILITY_STRICTNESS.value = "failed_deliverability_strictness";
        FILE_PAGES_BELOW_MIN.value = "file_pages_below_min";
        FILE_PAGES_EXCEED_MAX.value = "file_pages_exceed_max";
        FILE_SIZE_EXCEEDS_LIMIT.value = "file_size_exceeds_limit";
        FOREIGN_RETURN_ADDRESS.value = "foreign_return_address";
        INCONSISTENT_PAGE_DIMENSIONS.value = "inconsistent_page_dimensions";
        INVALID_BANK_ACCOUNT.value = "invalid_bank_account";
        INVALID_BANK_ACCOUNT_VERIFICATION.value = "invalid_bank_account_verification";
        INVALID_CHECK_INTERNATIONAL.value = "invalid_check_international";
        INVALID_COUNTRY_COVID.value = "invalid_country_covid";
        INVALID_FILE.value = "invalid_file";
        INVALID_FILE_DIMENSIONS.value = "invalid_file_dimensions";
        INVALID_FILE_DOWNLOAD_TIME.value = "invalid_file_download_time";
        INVALID_FILE_URL.value = "invalid_file_url";
        INVALID_IMAGE_DPI.value = "invalid_image_dpi";
        INVALID_INTERNATIONAL_FEATURE.value = "invalid_international_feature";
        INVALID_PERFORATION_RETURN_ENVELOPE.value = "invalid_perforation_return_envelope";
        INVALID_TEMPLATE_HTML.value = "invalid_template_html";
        MERGE_VARIABLE_REQUIRED.value = "merge_variable_required";
        MERGE_VARIABLE_WHITESPACE.value = "merge_variable_whitespace";
        PAYMENT_METHOD_UNVERIFIED.value = "payment_method_unverified";
        PDF_ENCRYPTED.value = "pdf_encrypted";
        SPECIAL_CHARACTERS_RESTRICTED.value = "special_characters_restricted";
        UNEMBEDDED_FONTS.value = "unembedded_fonts";

        valueMap.put("address_length_exceeds_limit", ADDRESS_LENGTH_EXCEEDS_LIMIT);
        valueMap.put("bank_account_already_verified", BANK_ACCOUNT_ALREADY_VERIFIED);
        valueMap.put("bank_error", BANK_ERROR);
        valueMap.put("custom_envelope_inventory_depleted", CUSTOM_ENVELOPE_INVENTORY_DEPLETED);
        valueMap.put("deleted_bank_account", DELETED_BANK_ACCOUNT);
        valueMap.put("failed_deliverability_strictness", FAILED_DELIVERABILITY_STRICTNESS);
        valueMap.put("file_pages_below_min", FILE_PAGES_BELOW_MIN);
        valueMap.put("file_pages_exceed_max", FILE_PAGES_EXCEED_MAX);
        valueMap.put("file_size_exceeds_limit", FILE_SIZE_EXCEEDS_LIMIT);
        valueMap.put("foreign_return_address", FOREIGN_RETURN_ADDRESS);
        valueMap.put("inconsistent_page_dimensions", INCONSISTENT_PAGE_DIMENSIONS);
        valueMap.put("invalid_bank_account", INVALID_BANK_ACCOUNT);
        valueMap.put("invalid_bank_account_verification", INVALID_BANK_ACCOUNT_VERIFICATION);
        valueMap.put("invalid_check_international", INVALID_CHECK_INTERNATIONAL);
        valueMap.put("invalid_country_covid", INVALID_COUNTRY_COVID);
        valueMap.put("invalid_file", INVALID_FILE);
        valueMap.put("invalid_file_dimensions", INVALID_FILE_DIMENSIONS);
        valueMap.put("invalid_file_download_time", INVALID_FILE_DOWNLOAD_TIME);
        valueMap.put("invalid_file_url", INVALID_FILE_URL);
        valueMap.put("invalid_image_dpi", INVALID_IMAGE_DPI);
        valueMap.put("invalid_international_feature", INVALID_INTERNATIONAL_FEATURE);
        valueMap.put("invalid_perforation_return_envelope", INVALID_PERFORATION_RETURN_ENVELOPE);
        valueMap.put("invalid_template_html", INVALID_TEMPLATE_HTML);
        valueMap.put("merge_variable_required", MERGE_VARIABLE_REQUIRED);
        valueMap.put("merge_variable_whitespace", MERGE_VARIABLE_WHITESPACE);
        valueMap.put("payment_method_unverified", PAYMENT_METHOD_UNVERIFIED);
        valueMap.put("pdf_encrypted", PDF_ENCRYPTED);
        valueMap.put("special_characters_restricted", SPECIAL_CHARACTERS_RESTRICTED);
        valueMap.put("unembedded_fonts", UNEMBEDDED_FONTS);
    }

    /**
     * Returns the enum member associated with the given string value.
     * @param toConvert String value to get enum member.
     * @return The enum member against the given string value.
     */
    @com.fasterxml.jackson.annotation.JsonCreator
    public static AdvancedEnum fromString(String toConvert) {
        return valueMap.get(toConvert);
    }

    /**
     * Returns the string value associated with the enum member.
     * @return The string value against enum member.
     */
    @com.fasterxml.jackson.annotation.JsonValue
    public String value() {
        return value;
    }
        
    /**
     * Get string representation of this enum.
     */
    @Override
    public String toString() {
        return value.toString();
    }

    /**
     * Convert list of AdvancedEnum values to list of string values.
     * @param toConvert The list of AdvancedEnum values to convert.
     * @return List of representative string values.
     */
    public static List<String> toValue(List<AdvancedEnum> toConvert) {
        if (toConvert == null) {
            return null;
        }
        List<String> convertedValues = new ArrayList<>();
        for (AdvancedEnum enumValue : toConvert) {
            convertedValues.add(enumValue.value);
        }
        return convertedValues;
    }
} 