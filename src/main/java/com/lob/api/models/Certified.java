/*
 * LobAPI20200211SpecificationLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.lob.api.DateTimeHelper;
import com.lob.api.internal.OptionalNullable;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;

/**
 * This is a model class for Certified type.
 */
public class Certified {
    private ExtraServiceEnum extraService;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<String> trackingNumber;
    private List<TrackingEventCertified> trackingEvents;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<String> description;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Metadata metadata;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<Object> mergeVariables;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Object sendDate;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private MailTypeEnum mailType;
    private boolean color;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Boolean doubleSided;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private AddressPlacementEnum addressPlacement;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Object returnEnvelope;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<Integer> perforatedPage;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<CustomEnvelope> customEnvelope;
    private Object to;
    private String carrier;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private List<Thumbnail> thumbnails;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private LocalDate expectedDeliveryDate;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private LocalDateTime dateCreated;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private LocalDateTime dateModified;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Boolean deleted;
    private Object from;
    private String id;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Object templateId;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private String templateVersionId;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private String object;

    /**
     * Default constructor.
     */
    public Certified() {
        carrier = "USPS";
        mailType = MailTypeEnum.USPS_FIRST_CLASS;
        doubleSided = true;
        addressPlacement = AddressPlacementEnum.TOP_FIRST_PAGE;
    }

    /**
     * Initialization constructor.
     * @param  extraService  ExtraServiceEnum value for extraService.
     * @param  trackingEvents  List of TrackingEventCertified value for trackingEvents.
     * @param  color  boolean value for color.
     * @param  to  Object value for to.
     * @param  carrier  String value for carrier.
     * @param  from  Object value for from.
     * @param  id  String value for id.
     * @param  trackingNumber  String value for trackingNumber.
     * @param  description  String value for description.
     * @param  metadata  Metadata value for metadata.
     * @param  mergeVariables  Object value for mergeVariables.
     * @param  sendDate  Object value for sendDate.
     * @param  mailType  MailTypeEnum value for mailType.
     * @param  doubleSided  Boolean value for doubleSided.
     * @param  addressPlacement  AddressPlacementEnum value for addressPlacement.
     * @param  returnEnvelope  Object value for returnEnvelope.
     * @param  perforatedPage  Integer value for perforatedPage.
     * @param  customEnvelope  CustomEnvelope value for customEnvelope.
     * @param  thumbnails  List of Thumbnail value for thumbnails.
     * @param  expectedDeliveryDate  LocalDate value for expectedDeliveryDate.
     * @param  dateCreated  LocalDateTime value for dateCreated.
     * @param  dateModified  LocalDateTime value for dateModified.
     * @param  deleted  Boolean value for deleted.
     * @param  templateId  Object value for templateId.
     * @param  templateVersionId  String value for templateVersionId.
     * @param  object  String value for object.
     */
    public Certified(
            ExtraServiceEnum extraService,
            List<TrackingEventCertified> trackingEvents,
            boolean color,
            Object to,
            String carrier,
            Object from,
            String id,
            String trackingNumber,
            String description,
            Metadata metadata,
            Object mergeVariables,
            Object sendDate,
            MailTypeEnum mailType,
            Boolean doubleSided,
            AddressPlacementEnum addressPlacement,
            Object returnEnvelope,
            Integer perforatedPage,
            CustomEnvelope customEnvelope,
            List<Thumbnail> thumbnails,
            LocalDate expectedDeliveryDate,
            LocalDateTime dateCreated,
            LocalDateTime dateModified,
            Boolean deleted,
            Object templateId,
            String templateVersionId,
            String object) {
        this.extraService = extraService;
        this.trackingNumber = OptionalNullable.of(trackingNumber);
        this.trackingEvents = trackingEvents;
        this.description = OptionalNullable.of(description);
        this.metadata = metadata;
        this.mergeVariables = OptionalNullable.of(mergeVariables);
        this.sendDate = sendDate;
        this.mailType = mailType;
        this.color = color;
        this.doubleSided = doubleSided;
        this.addressPlacement = addressPlacement;
        this.returnEnvelope = returnEnvelope;
        this.perforatedPage = OptionalNullable.of(perforatedPage);
        this.customEnvelope = OptionalNullable.of(customEnvelope);
        this.to = to;
        this.carrier = carrier;
        this.thumbnails = thumbnails;
        this.expectedDeliveryDate = expectedDeliveryDate;
        this.dateCreated = dateCreated;
        this.dateModified = dateModified;
        this.deleted = deleted;
        this.from = from;
        this.id = id;
        this.templateId = templateId;
        this.templateVersionId = templateVersionId;
        this.object = object;
    }

    /**
     * Internal initialization constructor.
     */
    protected Certified(ExtraServiceEnum extraService, List<TrackingEventCertified> trackingEvents,
            boolean color, Object to, String carrier, Object from, String id,
            OptionalNullable<String> trackingNumber, OptionalNullable<String> description,
            Metadata metadata, OptionalNullable<Object> mergeVariables, Object sendDate,
            MailTypeEnum mailType, Boolean doubleSided, AddressPlacementEnum addressPlacement,
            Object returnEnvelope, OptionalNullable<Integer> perforatedPage,
            OptionalNullable<CustomEnvelope> customEnvelope, List<Thumbnail> thumbnails,
            LocalDate expectedDeliveryDate, LocalDateTime dateCreated, LocalDateTime dateModified,
            Boolean deleted, Object templateId, String templateVersionId, String object) {
        this.extraService = extraService;
        this.trackingNumber = trackingNumber;
        this.trackingEvents = trackingEvents;
        this.description = description;
        this.metadata = metadata;
        this.mergeVariables = mergeVariables;
        this.sendDate = sendDate;
        this.mailType = mailType;
        this.color = color;
        this.doubleSided = doubleSided;
        this.addressPlacement = addressPlacement;
        this.returnEnvelope = returnEnvelope;
        this.perforatedPage = perforatedPage;
        this.customEnvelope = customEnvelope;
        this.to = to;
        this.carrier = carrier;
        this.thumbnails = thumbnails;
        this.expectedDeliveryDate = expectedDeliveryDate;
        this.dateCreated = dateCreated;
        this.dateModified = dateModified;
        this.deleted = deleted;
        this.from = from;
        this.id = id;
        this.templateId = templateId;
        this.templateVersionId = templateVersionId;
        this.object = object;
    }

    /**
     * Getter for ExtraService.
     * Add an extra service to your letter. See
     * [pricing](https://www.lob.com/pricing/print-mail#compare) for extra costs incurred. *
     * `certified` - track and confirm delivery for domestic destinations. An extra sheet (1 PDF
     * page single-sided or 2 PDF pages double-sided) is added to the beginning of your letter for
     * address and barcode information. See here for templates: [#10
     * envelope](https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_certified_template.pdf)
     * and [flat
     * envelope](https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_certified_flat_template.pdf)
     * (used for letters over 6 pages single-sided or 12 pages double-sided). You will not be
     * charged for this extra sheet. * `certified_return_receipt` - request an electronic copy of
     * the recipient's signature to prove delivery of your certified letter
     * @return Returns the ExtraServiceEnum
     */
    @JsonGetter("extra_service")
    public ExtraServiceEnum getExtraService() {
        return extraService;
    }

    /**
     * Setter for ExtraService.
     * Add an extra service to your letter. See
     * [pricing](https://www.lob.com/pricing/print-mail#compare) for extra costs incurred. *
     * `certified` - track and confirm delivery for domestic destinations. An extra sheet (1 PDF
     * page single-sided or 2 PDF pages double-sided) is added to the beginning of your letter for
     * address and barcode information. See here for templates: [#10
     * envelope](https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_certified_template.pdf)
     * and [flat
     * envelope](https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_certified_flat_template.pdf)
     * (used for letters over 6 pages single-sided or 12 pages double-sided). You will not be
     * charged for this extra sheet. * `certified_return_receipt` - request an electronic copy of
     * the recipient's signature to prove delivery of your certified letter
     * @param extraService Value for ExtraServiceEnum
     */
    @JsonSetter("extra_service")
    public void setExtraService(ExtraServiceEnum extraService) {
        this.extraService = extraService;
    }

    /**
     * Internal Getter for TrackingNumber.
     * The tracking number will be here immediately upon creation. Dummy tracking numbers are
     * created in test mode.
     * @return Returns the Internal String
     */
    @JsonGetter("tracking_number")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTrackingNumber() {
        return this.trackingNumber;
    }

    /**
     * Getter for TrackingNumber.
     * The tracking number will be here immediately upon creation. Dummy tracking numbers are
     * created in test mode.
     * @return Returns the String
     */
    public String getTrackingNumber() {
        return OptionalNullable.getFrom(trackingNumber);
    }

    /**
     * Setter for TrackingNumber.
     * The tracking number will be here immediately upon creation. Dummy tracking numbers are
     * created in test mode.
     * @param trackingNumber Value for String
     */
    @JsonSetter("tracking_number")
    public void setTrackingNumber(String trackingNumber) {
        this.trackingNumber = OptionalNullable.of(trackingNumber);
    }

    /**
     * UnSetter for TrackingNumber.
     * The tracking number will be here immediately upon creation. Dummy tracking numbers are
     * created in test mode.
     */
    public void unsetTrackingNumber() {
        trackingNumber = null;
    }

    /**
     * Getter for TrackingEvents.
     * An array of certified tracking events ordered by ascending `time`. Not populated in test
     * mode.
     * @return Returns the List of TrackingEventCertified
     */
    @JsonGetter("tracking_events")
    public List<TrackingEventCertified> getTrackingEvents() {
        return trackingEvents;
    }

    /**
     * Setter for TrackingEvents.
     * An array of certified tracking events ordered by ascending `time`. Not populated in test
     * mode.
     * @param trackingEvents Value for List of TrackingEventCertified
     */
    @JsonSetter("tracking_events")
    public void setTrackingEvents(List<TrackingEventCertified> trackingEvents) {
        this.trackingEvents = trackingEvents;
    }

    /**
     * Internal Getter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     * @return Returns the Internal String
     */
    @JsonGetter("description")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDescription() {
        return this.description;
    }

    /**
     * Getter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     * @return Returns the String
     */
    public String getDescription() {
        return OptionalNullable.getFrom(description);
    }

    /**
     * Setter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = OptionalNullable.of(description);
    }

    /**
     * UnSetter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     */
    public void unsetDescription() {
        description = null;
    }

    /**
     * Getter for Metadata.
     * Use metadata to store custom information for tagging and labeling back to your internal
     * systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters
     * and values must be at most 500 characters. Neither can contain the characters `"` and `\`.
     * Nested objects are not supported. See [Metadata](#section/Metadata) for more information.
     * @return Returns the Metadata
     */
    @JsonGetter("metadata")
    public Metadata getMetadata() {
        return metadata;
    }

    /**
     * Setter for Metadata.
     * Use metadata to store custom information for tagging and labeling back to your internal
     * systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters
     * and values must be at most 500 characters. Neither can contain the characters `"` and `\`.
     * Nested objects are not supported. See [Metadata](#section/Metadata) for more information.
     * @param metadata Value for Metadata
     */
    @JsonSetter("metadata")
    public void setMetadata(Metadata metadata) {
        this.metadata = metadata;
    }

    /**
     * Internal Getter for MergeVariables.
     * You can input a merge variable payload object to your template to render dynamic content. For
     * example, if you have a template like: `{{variable_name}}`, pass in `{"variable_name":
     * "Harry"}` to render `Harry`. `merge_variables` must be an object. Any type of value is
     * accepted as long as the object is valid JSON; you can use `strings`, `numbers`, `booleans`,
     * `arrays`, `objects`, or `null`. The max length of the object is 25,000 characters. If you
     * call `JSON.stringify` on your object, it can be no longer than 25,000 characters. Your
     * variable names cannot contain any whitespace or any of the following special characters: `!`,
     * `"`, `#`, `%`, `&`, `'`, `(`, `)`, `*`, `+`, `,`, `/`, `;`, `&lt;`, `=`, `&gt;`, `@`, `[`, `\`,
     * `]`, `^`, `` ` ``, `{`, `|`, `}`, `~`. More instructions can be found in [our guide to using
     * html and merge
     * variables](https://lob.com/resources/guides/general/using-html-and-merge-variables).
     * Depending on your [Merge Variable strictness](https://dashboard.lob.com/#/settings/account)
     * setting, if you define variables in your HTML but do not pass them here, you will either
     * receive an error or the variable will render as an empty string.
     * @return Returns the Internal Object
     */
    @JsonGetter("merge_variables")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Object> internalGetMergeVariables() {
        return this.mergeVariables;
    }

    /**
     * Getter for MergeVariables.
     * You can input a merge variable payload object to your template to render dynamic content. For
     * example, if you have a template like: `{{variable_name}}`, pass in `{"variable_name":
     * "Harry"}` to render `Harry`. `merge_variables` must be an object. Any type of value is
     * accepted as long as the object is valid JSON; you can use `strings`, `numbers`, `booleans`,
     * `arrays`, `objects`, or `null`. The max length of the object is 25,000 characters. If you
     * call `JSON.stringify` on your object, it can be no longer than 25,000 characters. Your
     * variable names cannot contain any whitespace or any of the following special characters: `!`,
     * `"`, `#`, `%`, `&`, `'`, `(`, `)`, `*`, `+`, `,`, `/`, `;`, `&lt;`, `=`, `&gt;`, `@`, `[`, `\`,
     * `]`, `^`, `` ` ``, `{`, `|`, `}`, `~`. More instructions can be found in [our guide to using
     * html and merge
     * variables](https://lob.com/resources/guides/general/using-html-and-merge-variables).
     * Depending on your [Merge Variable strictness](https://dashboard.lob.com/#/settings/account)
     * setting, if you define variables in your HTML but do not pass them here, you will either
     * receive an error or the variable will render as an empty string.
     * @return Returns the Object
     */
    public Object getMergeVariables() {
        return OptionalNullable.getFrom(mergeVariables);
    }

    /**
     * Setter for MergeVariables.
     * You can input a merge variable payload object to your template to render dynamic content. For
     * example, if you have a template like: `{{variable_name}}`, pass in `{"variable_name":
     * "Harry"}` to render `Harry`. `merge_variables` must be an object. Any type of value is
     * accepted as long as the object is valid JSON; you can use `strings`, `numbers`, `booleans`,
     * `arrays`, `objects`, or `null`. The max length of the object is 25,000 characters. If you
     * call `JSON.stringify` on your object, it can be no longer than 25,000 characters. Your
     * variable names cannot contain any whitespace or any of the following special characters: `!`,
     * `"`, `#`, `%`, `&`, `'`, `(`, `)`, `*`, `+`, `,`, `/`, `;`, `&lt;`, `=`, `&gt;`, `@`, `[`, `\`,
     * `]`, `^`, `` ` ``, `{`, `|`, `}`, `~`. More instructions can be found in [our guide to using
     * html and merge
     * variables](https://lob.com/resources/guides/general/using-html-and-merge-variables).
     * Depending on your [Merge Variable strictness](https://dashboard.lob.com/#/settings/account)
     * setting, if you define variables in your HTML but do not pass them here, you will either
     * receive an error or the variable will render as an empty string.
     * @param mergeVariables Value for Object
     */
    @JsonSetter("merge_variables")
    public void setMergeVariables(Object mergeVariables) {
        this.mergeVariables = OptionalNullable.of(mergeVariables);
    }

    /**
     * UnSetter for MergeVariables.
     * You can input a merge variable payload object to your template to render dynamic content. For
     * example, if you have a template like: `{{variable_name}}`, pass in `{"variable_name":
     * "Harry"}` to render `Harry`. `merge_variables` must be an object. Any type of value is
     * accepted as long as the object is valid JSON; you can use `strings`, `numbers`, `booleans`,
     * `arrays`, `objects`, or `null`. The max length of the object is 25,000 characters. If you
     * call `JSON.stringify` on your object, it can be no longer than 25,000 characters. Your
     * variable names cannot contain any whitespace or any of the following special characters: `!`,
     * `"`, `#`, `%`, `&`, `'`, `(`, `)`, `*`, `+`, `,`, `/`, `;`, `&lt;`, `=`, `&gt;`, `@`, `[`, `\`,
     * `]`, `^`, `` ` ``, `{`, `|`, `}`, `~`. More instructions can be found in [our guide to using
     * html and merge
     * variables](https://lob.com/resources/guides/general/using-html-and-merge-variables).
     * Depending on your [Merge Variable strictness](https://dashboard.lob.com/#/settings/account)
     * setting, if you define variables in your HTML but do not pass them here, you will either
     * receive an error or the variable will render as an empty string.
     */
    public void unsetMergeVariables() {
        mergeVariables = null;
    }

    /**
     * Getter for SendDate.
     * A timestamp in ISO 8601 format which specifies a date after the current time and up to 180
     * days in the future to send the letter off for production. Setting a send date overrides the
     * default [cancellation window](#section/Cancellation-Windows) applied to the mailpiece. Until
     * the `send_date` has passed, the mailpiece can be canceled. If a date in the format
     * `2017-11-01` is passed, it will evaluate to midnight UTC of that date
     * (`2017-11-01T00:00:00.000Z`). If a datetime is passed, that exact time will be used. A
     * `send_date` passed with no time zone will default to UTC, while a `send_date` passed with a
     * time zone will be converted to UTC.
     * @return Returns the Object
     */
    @JsonGetter("send_date")
    public Object getSendDate() {
        return sendDate;
    }

    /**
     * Setter for SendDate.
     * A timestamp in ISO 8601 format which specifies a date after the current time and up to 180
     * days in the future to send the letter off for production. Setting a send date overrides the
     * default [cancellation window](#section/Cancellation-Windows) applied to the mailpiece. Until
     * the `send_date` has passed, the mailpiece can be canceled. If a date in the format
     * `2017-11-01` is passed, it will evaluate to midnight UTC of that date
     * (`2017-11-01T00:00:00.000Z`). If a datetime is passed, that exact time will be used. A
     * `send_date` passed with no time zone will default to UTC, while a `send_date` passed with a
     * time zone will be converted to UTC.
     * @param sendDate Value for Object
     */
    @JsonSetter("send_date")
    public void setSendDate(Object sendDate) {
        this.sendDate = sendDate;
    }

    /**
     * Getter for MailType.
     * A string designating the mail postage type: * `usps_first_class` - (default) *
     * `usps_standard` - a [cheaper option](https://lob.com/pricing/print-mail#compare) which is
     * less predictable and takes longer to deliver. `usps_standard` cannot be used with `4x6`
     * postcards or for any postcards sent outside of the United States.
     * @return Returns the MailTypeEnum
     */
    @JsonGetter("mail_type")
    public MailTypeEnum getMailType() {
        return mailType;
    }

    /**
     * Setter for MailType.
     * A string designating the mail postage type: * `usps_first_class` - (default) *
     * `usps_standard` - a [cheaper option](https://lob.com/pricing/print-mail#compare) which is
     * less predictable and takes longer to deliver. `usps_standard` cannot be used with `4x6`
     * postcards or for any postcards sent outside of the United States.
     * @param mailType Value for MailTypeEnum
     */
    @JsonSetter("mail_type")
    public void setMailType(MailTypeEnum mailType) {
        this.mailType = mailType;
    }

    /**
     * Getter for Color.
     * Set this key to `true` if you would like to print in color. Set to `false` if you would like
     * to print in black and white.
     * @return Returns the boolean
     */
    @JsonGetter("color")
    public boolean getColor() {
        return color;
    }

    /**
     * Setter for Color.
     * Set this key to `true` if you would like to print in color. Set to `false` if you would like
     * to print in black and white.
     * @param color Value for boolean
     */
    @JsonSetter("color")
    public void setColor(boolean color) {
        this.color = color;
    }

    /**
     * Getter for DoubleSided.
     * Set this attribute to `true` for double sided printing, or `false` for for single sided
     * printing. Defaults to `true`.
     * @return Returns the Boolean
     */
    @JsonGetter("double_sided")
    public Boolean getDoubleSided() {
        return doubleSided;
    }

    /**
     * Setter for DoubleSided.
     * Set this attribute to `true` for double sided printing, or `false` for for single sided
     * printing. Defaults to `true`.
     * @param doubleSided Value for Boolean
     */
    @JsonSetter("double_sided")
    public void setDoubleSided(Boolean doubleSided) {
        this.doubleSided = doubleSided;
    }

    /**
     * Getter for AddressPlacement.
     * Specifies the location of the address information that will show through the double-window
     * envelope. To see how this will impact your letter design, view our letter template. *
     * `top_first_page` - (default) print address information at the top of your provided first page
     * * `insert_blank_page` - insert a blank address page at the beginning of your file (you will
     * be charged for the extra page) * `bottom_first_page_center` - **(deprecation planned within a
     * few months)** print address information at the bottom center of your provided first page *
     * `bottom_first_page` - print address information at the bottom of your provided first page
     * @return Returns the AddressPlacementEnum
     */
    @JsonGetter("address_placement")
    public AddressPlacementEnum getAddressPlacement() {
        return addressPlacement;
    }

    /**
     * Setter for AddressPlacement.
     * Specifies the location of the address information that will show through the double-window
     * envelope. To see how this will impact your letter design, view our letter template. *
     * `top_first_page` - (default) print address information at the top of your provided first page
     * * `insert_blank_page` - insert a blank address page at the beginning of your file (you will
     * be charged for the extra page) * `bottom_first_page_center` - **(deprecation planned within a
     * few months)** print address information at the bottom center of your provided first page *
     * `bottom_first_page` - print address information at the bottom of your provided first page
     * @param addressPlacement Value for AddressPlacementEnum
     */
    @JsonSetter("address_placement")
    public void setAddressPlacement(AddressPlacementEnum addressPlacement) {
        this.addressPlacement = addressPlacement;
    }

    /**
     * Getter for ReturnEnvelope.
     * Indicates if a return envelope is requested for the letter. The value corresponding to this
     * field is by default a boolean. But if the account is signed up for custom return envelopes,
     * the value is of type string and is `no_9_single_window` for a standard return envelope and a
     * custom `return_envelope_id` for non-standard return envelopes. To include a return envelope
     * with your letter, set to `true` and specify the `perforated_page`. See
     * [pricing](https://www.lob.com/pricing/print-mail#compare) for extra costs incurred.
     * @return Returns the Object
     */
    @JsonGetter("return_envelope")
    public Object getReturnEnvelope() {
        return returnEnvelope;
    }

    /**
     * Setter for ReturnEnvelope.
     * Indicates if a return envelope is requested for the letter. The value corresponding to this
     * field is by default a boolean. But if the account is signed up for custom return envelopes,
     * the value is of type string and is `no_9_single_window` for a standard return envelope and a
     * custom `return_envelope_id` for non-standard return envelopes. To include a return envelope
     * with your letter, set to `true` and specify the `perforated_page`. See
     * [pricing](https://www.lob.com/pricing/print-mail#compare) for extra costs incurred.
     * @param returnEnvelope Value for Object
     */
    @JsonSetter("return_envelope")
    public void setReturnEnvelope(Object returnEnvelope) {
        this.returnEnvelope = returnEnvelope;
    }

    /**
     * Internal Getter for PerforatedPage.
     * Required if `return_envelope` is `true`. The number of the page that should be perforated for
     * use with the return envelope. Must be greater than or equal to `1`. The blank page added by
     * `address_placement=insert_blank_page` will be ignored when considering the perforated page
     * number. To see how perforation will impact your letter design, view our [perforation
     * guide](https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_perf_template.pdf).
     * @return Returns the Internal Integer
     */
    @JsonGetter("perforated_page")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetPerforatedPage() {
        return this.perforatedPage;
    }

    /**
     * Getter for PerforatedPage.
     * Required if `return_envelope` is `true`. The number of the page that should be perforated for
     * use with the return envelope. Must be greater than or equal to `1`. The blank page added by
     * `address_placement=insert_blank_page` will be ignored when considering the perforated page
     * number. To see how perforation will impact your letter design, view our [perforation
     * guide](https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_perf_template.pdf).
     * @return Returns the Integer
     */
    public Integer getPerforatedPage() {
        return OptionalNullable.getFrom(perforatedPage);
    }

    /**
     * Setter for PerforatedPage.
     * Required if `return_envelope` is `true`. The number of the page that should be perforated for
     * use with the return envelope. Must be greater than or equal to `1`. The blank page added by
     * `address_placement=insert_blank_page` will be ignored when considering the perforated page
     * number. To see how perforation will impact your letter design, view our [perforation
     * guide](https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_perf_template.pdf).
     * @param perforatedPage Value for Integer
     */
    @JsonSetter("perforated_page")
    public void setPerforatedPage(Integer perforatedPage) {
        this.perforatedPage = OptionalNullable.of(perforatedPage);
    }

    /**
     * UnSetter for PerforatedPage.
     * Required if `return_envelope` is `true`. The number of the page that should be perforated for
     * use with the return envelope. Must be greater than or equal to `1`. The blank page added by
     * `address_placement=insert_blank_page` will be ignored when considering the perforated page
     * number. To see how perforation will impact your letter design, view our [perforation
     * guide](https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_perf_template.pdf).
     */
    public void unsetPerforatedPage() {
        perforatedPage = null;
    }

    /**
     * Internal Getter for CustomEnvelope.
     * A nested custom envelope object containing more information about the custom envelope used or
     * `null` if a custom envelope was not used. Accepts an envelope ID for any customized envelope
     * with available inventory. If no inventory is available for the specified ID, the letter will
     * not be sent, and an error will be returned. If the letter has more than 6 sheets, it will be
     * sent in a blank flat envelope. Custom envelopes may be created and ordered from the
     * dashboard. This feature is exclusive to certain customers. Upgrade to the appropriate [Print
     * & Mail Edition](https://dashboard.lob.com/#/settings/editions) to gain access.
     * @return Returns the Internal CustomEnvelope
     */
    @JsonGetter("custom_envelope")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<CustomEnvelope> internalGetCustomEnvelope() {
        return this.customEnvelope;
    }

    /**
     * Getter for CustomEnvelope.
     * A nested custom envelope object containing more information about the custom envelope used or
     * `null` if a custom envelope was not used. Accepts an envelope ID for any customized envelope
     * with available inventory. If no inventory is available for the specified ID, the letter will
     * not be sent, and an error will be returned. If the letter has more than 6 sheets, it will be
     * sent in a blank flat envelope. Custom envelopes may be created and ordered from the
     * dashboard. This feature is exclusive to certain customers. Upgrade to the appropriate [Print
     * & Mail Edition](https://dashboard.lob.com/#/settings/editions) to gain access.
     * @return Returns the CustomEnvelope
     */
    public CustomEnvelope getCustomEnvelope() {
        return OptionalNullable.getFrom(customEnvelope);
    }

    /**
     * Setter for CustomEnvelope.
     * A nested custom envelope object containing more information about the custom envelope used or
     * `null` if a custom envelope was not used. Accepts an envelope ID for any customized envelope
     * with available inventory. If no inventory is available for the specified ID, the letter will
     * not be sent, and an error will be returned. If the letter has more than 6 sheets, it will be
     * sent in a blank flat envelope. Custom envelopes may be created and ordered from the
     * dashboard. This feature is exclusive to certain customers. Upgrade to the appropriate [Print
     * & Mail Edition](https://dashboard.lob.com/#/settings/editions) to gain access.
     * @param customEnvelope Value for CustomEnvelope
     */
    @JsonSetter("custom_envelope")
    public void setCustomEnvelope(CustomEnvelope customEnvelope) {
        this.customEnvelope = OptionalNullable.of(customEnvelope);
    }

    /**
     * UnSetter for CustomEnvelope.
     * A nested custom envelope object containing more information about the custom envelope used or
     * `null` if a custom envelope was not used. Accepts an envelope ID for any customized envelope
     * with available inventory. If no inventory is available for the specified ID, the letter will
     * not be sent, and an error will be returned. If the letter has more than 6 sheets, it will be
     * sent in a blank flat envelope. Custom envelopes may be created and ordered from the
     * dashboard. This feature is exclusive to certain customers. Upgrade to the appropriate [Print
     * & Mail Edition](https://dashboard.lob.com/#/settings/editions) to gain access.
     */
    public void unsetCustomEnvelope() {
        customEnvelope = null;
    }

    /**
     * Getter for To.
     * @return Returns the Object
     */
    @JsonGetter("to")
    public Object getTo() {
        return to;
    }

    /**
     * Setter for To.
     * @param to Value for Object
     */
    @JsonSetter("to")
    public void setTo(Object to) {
        this.to = to;
    }

    /**
     * Getter for Carrier.
     * @return Returns the String
     */
    @JsonGetter("carrier")
    public String getCarrier() {
        return carrier;
    }

    /**
     * Setter for Carrier.
     * @param carrier Value for String
     */
    @JsonSetter("carrier")
    private void setCarrier(String carrier) {
        this.carrier = carrier;
    }

    /**
     * Getter for Thumbnails.
     * @return Returns the List of Thumbnail
     */
    @JsonGetter("thumbnails")
    public List<Thumbnail> getThumbnails() {
        return thumbnails;
    }

    /**
     * Setter for Thumbnails.
     * @param thumbnails Value for List of Thumbnail
     */
    @JsonSetter("thumbnails")
    public void setThumbnails(List<Thumbnail> thumbnails) {
        this.thumbnails = thumbnails;
    }

    /**
     * Getter for ExpectedDeliveryDate.
     * A date in YYYY-MM-DD format of the mailpiece's expected delivery date based on its
     * `send_date`.
     * @return Returns the LocalDate
     */
    @JsonGetter("expected_delivery_date")
    @JsonSerialize(using = DateTimeHelper.SimpleDateSerializer.class)
    public LocalDate getExpectedDeliveryDate() {
        return expectedDeliveryDate;
    }

    /**
     * Setter for ExpectedDeliveryDate.
     * A date in YYYY-MM-DD format of the mailpiece's expected delivery date based on its
     * `send_date`.
     * @param expectedDeliveryDate Value for LocalDate
     */
    @JsonSetter("expected_delivery_date")
    @JsonDeserialize(using = DateTimeHelper.SimpleDateDeserializer.class)
    public void setExpectedDeliveryDate(LocalDate expectedDeliveryDate) {
        this.expectedDeliveryDate = expectedDeliveryDate;
    }

    /**
     * Getter for DateCreated.
     * A timestamp in ISO 8601 format of the date the resource was created.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("date_created")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getDateCreated() {
        return dateCreated;
    }

    /**
     * Setter for DateCreated.
     * A timestamp in ISO 8601 format of the date the resource was created.
     * @param dateCreated Value for LocalDateTime
     */
    @JsonSetter("date_created")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setDateCreated(LocalDateTime dateCreated) {
        this.dateCreated = dateCreated;
    }

    /**
     * Getter for DateModified.
     * A timestamp in ISO 8601 format of the date the resource was last modified.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("date_modified")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getDateModified() {
        return dateModified;
    }

    /**
     * Setter for DateModified.
     * A timestamp in ISO 8601 format of the date the resource was last modified.
     * @param dateModified Value for LocalDateTime
     */
    @JsonSetter("date_modified")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setDateModified(LocalDateTime dateModified) {
        this.dateModified = dateModified;
    }

    /**
     * Getter for Deleted.
     * Only returned if the resource has been successfully deleted.
     * @return Returns the Boolean
     */
    @JsonGetter("deleted")
    public Boolean getDeleted() {
        return deleted;
    }

    /**
     * Setter for Deleted.
     * Only returned if the resource has been successfully deleted.
     * @param deleted Value for Boolean
     */
    @JsonSetter("deleted")
    public void setDeleted(Boolean deleted) {
        this.deleted = deleted;
    }

    /**
     * Getter for From.
     * @return Returns the Object
     */
    @JsonGetter("from")
    public Object getFrom() {
        return from;
    }

    /**
     * Setter for From.
     * @param from Value for Object
     */
    @JsonSetter("from")
    public void setFrom(Object from) {
        this.from = from;
    }

    /**
     * Getter for Id.
     * Unique identifier prefixed with `ltr_`.
     * @return Returns the String
     */
    @JsonGetter("id")
    public String getId() {
        return id;
    }

    /**
     * Setter for Id.
     * Unique identifier prefixed with `ltr_`.
     * @param id Value for String
     */
    @JsonSetter("id")
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Getter for TemplateId.
     * @return Returns the Object
     */
    @JsonGetter("template_id")
    public Object getTemplateId() {
        return templateId;
    }

    /**
     * Setter for TemplateId.
     * @param templateId Value for Object
     */
    @JsonSetter("template_id")
    public void setTemplateId(Object templateId) {
        this.templateId = templateId;
    }

    /**
     * Getter for TemplateVersionId.
     * @return Returns the String
     */
    @JsonGetter("template_version_id")
    public String getTemplateVersionId() {
        return templateVersionId;
    }

    /**
     * Setter for TemplateVersionId.
     * @param templateVersionId Value for String
     */
    @JsonSetter("template_version_id")
    public void setTemplateVersionId(String templateVersionId) {
        this.templateVersionId = templateVersionId;
    }

    /**
     * Getter for Object.
     * @return Returns the String
     */
    @JsonGetter("object")
    public String getObject() {
        return object;
    }

    /**
     * Setter for Object.
     * @param object Value for String
     */
    @JsonSetter("object")
    public void setObject(String object) {
        this.object = object;
    }

    /**
     * Converts this Certified into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Certified [" + "extraService=" + extraService + ", trackingEvents=" + trackingEvents
                + ", color=" + color + ", to=" + to + ", carrier=" + carrier + ", from=" + from
                + ", id=" + id + ", trackingNumber=" + trackingNumber + ", description="
                + description + ", metadata=" + metadata + ", mergeVariables=" + mergeVariables
                + ", sendDate=" + sendDate + ", mailType=" + mailType + ", doubleSided="
                + doubleSided + ", addressPlacement=" + addressPlacement + ", returnEnvelope="
                + returnEnvelope + ", perforatedPage=" + perforatedPage + ", customEnvelope="
                + customEnvelope + ", thumbnails=" + thumbnails + ", expectedDeliveryDate="
                + expectedDeliveryDate + ", dateCreated=" + dateCreated + ", dateModified="
                + dateModified + ", deleted=" + deleted + ", templateId=" + templateId
                + ", templateVersionId=" + templateVersionId + ", object=" + object + "]";
    }

    /**
     * Builds a new {@link Certified.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Certified.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(extraService, trackingEvents, color, to, carrier, from, id)
                .metadata(getMetadata())
                .sendDate(getSendDate())
                .mailType(getMailType())
                .doubleSided(getDoubleSided())
                .addressPlacement(getAddressPlacement())
                .returnEnvelope(getReturnEnvelope())
                .thumbnails(getThumbnails())
                .expectedDeliveryDate(getExpectedDeliveryDate())
                .dateCreated(getDateCreated())
                .dateModified(getDateModified())
                .deleted(getDeleted())
                .templateId(getTemplateId())
                .templateVersionId(getTemplateVersionId())
                .object(getObject());
        builder.trackingNumber = internalGetTrackingNumber();
        builder.description = internalGetDescription();
        builder.mergeVariables = internalGetMergeVariables();
        builder.perforatedPage = internalGetPerforatedPage();
        builder.customEnvelope = internalGetCustomEnvelope();
        return builder;
    }

    /**
     * Class to build instances of {@link Certified}.
     */
    public static class Builder {
        private ExtraServiceEnum extraService;
        private List<TrackingEventCertified> trackingEvents;
        private boolean color;
        private Object to;
        private String carrier = "USPS";
        private Object from;
        private String id;
        private OptionalNullable<String> trackingNumber;
        private OptionalNullable<String> description;
        private Metadata metadata;
        private OptionalNullable<Object> mergeVariables;
        private Object sendDate;
        private MailTypeEnum mailType = MailTypeEnum.USPS_FIRST_CLASS;
        private Boolean doubleSided = true;
        private AddressPlacementEnum addressPlacement = AddressPlacementEnum.TOP_FIRST_PAGE;
        private Object returnEnvelope;
        private OptionalNullable<Integer> perforatedPage;
        private OptionalNullable<CustomEnvelope> customEnvelope;
        private List<Thumbnail> thumbnails;
        private LocalDate expectedDeliveryDate;
        private LocalDateTime dateCreated;
        private LocalDateTime dateModified;
        private Boolean deleted;
        private Object templateId;
        private String templateVersionId;
        private String object;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  extraService  ExtraServiceEnum value for extraService.
         * @param  trackingEvents  List of TrackingEventCertified value for trackingEvents.
         * @param  color  boolean value for color.
         * @param  to  Object value for to.
         * @param  carrier  String value for carrier.
         * @param  from  Object value for from.
         * @param  id  String value for id.
         */
        public Builder(ExtraServiceEnum extraService, List<TrackingEventCertified> trackingEvents,
                boolean color, Object to, String carrier, Object from, String id) {
            this.extraService = extraService;
            this.trackingEvents = trackingEvents;
            this.color = color;
            this.to = to;
            this.carrier = carrier;
            this.from = from;
            this.id = id;
        }

        /**
         * Setter for extraService.
         * @param  extraService  ExtraServiceEnum value for extraService.
         * @return Builder
         */
        public Builder extraService(ExtraServiceEnum extraService) {
            this.extraService = extraService;
            return this;
        }

        /**
         * Setter for trackingEvents.
         * @param  trackingEvents  List of TrackingEventCertified value for trackingEvents.
         * @return Builder
         */
        public Builder trackingEvents(List<TrackingEventCertified> trackingEvents) {
            this.trackingEvents = trackingEvents;
            return this;
        }

        /**
         * Setter for color.
         * @param  color  boolean value for color.
         * @return Builder
         */
        public Builder color(boolean color) {
            this.color = color;
            return this;
        }

        /**
         * Setter for to.
         * @param  to  Object value for to.
         * @return Builder
         */
        public Builder to(Object to) {
            this.to = to;
            return this;
        }

        /**
         * Setter for carrier.
         * @param  carrier  String value for carrier.
         * @return Builder
         */
        public Builder carrier(String carrier) {
            this.carrier = carrier;
            return this;
        }

        /**
         * Setter for from.
         * @param  from  Object value for from.
         * @return Builder
         */
        public Builder from(Object from) {
            this.from = from;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  String value for id.
         * @return Builder
         */
        public Builder id(String id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for trackingNumber.
         * @param  trackingNumber  String value for trackingNumber.
         * @return Builder
         */
        public Builder trackingNumber(String trackingNumber) {
            this.trackingNumber = OptionalNullable.of(trackingNumber);
            return this;
        }

        /**
         * UnSetter for trackingNumber.
         * @return Builder
         */
        public Builder unsetTrackingNumber() {
            trackingNumber = null;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = OptionalNullable.of(description);
            return this;
        }

        /**
         * UnSetter for description.
         * @return Builder
         */
        public Builder unsetDescription() {
            description = null;
            return this;
        }

        /**
         * Setter for metadata.
         * @param  metadata  Metadata value for metadata.
         * @return Builder
         */
        public Builder metadata(Metadata metadata) {
            this.metadata = metadata;
            return this;
        }

        /**
         * Setter for mergeVariables.
         * @param  mergeVariables  Object value for mergeVariables.
         * @return Builder
         */
        public Builder mergeVariables(Object mergeVariables) {
            this.mergeVariables = OptionalNullable.of(mergeVariables);
            return this;
        }

        /**
         * UnSetter for mergeVariables.
         * @return Builder
         */
        public Builder unsetMergeVariables() {
            mergeVariables = null;
            return this;
        }

        /**
         * Setter for sendDate.
         * @param  sendDate  Object value for sendDate.
         * @return Builder
         */
        public Builder sendDate(Object sendDate) {
            this.sendDate = sendDate;
            return this;
        }

        /**
         * Setter for mailType.
         * @param  mailType  MailTypeEnum value for mailType.
         * @return Builder
         */
        public Builder mailType(MailTypeEnum mailType) {
            this.mailType = mailType;
            return this;
        }

        /**
         * Setter for doubleSided.
         * @param  doubleSided  Boolean value for doubleSided.
         * @return Builder
         */
        public Builder doubleSided(Boolean doubleSided) {
            this.doubleSided = doubleSided;
            return this;
        }

        /**
         * Setter for addressPlacement.
         * @param  addressPlacement  AddressPlacementEnum value for addressPlacement.
         * @return Builder
         */
        public Builder addressPlacement(AddressPlacementEnum addressPlacement) {
            this.addressPlacement = addressPlacement;
            return this;
        }

        /**
         * Setter for returnEnvelope.
         * @param  returnEnvelope  Object value for returnEnvelope.
         * @return Builder
         */
        public Builder returnEnvelope(Object returnEnvelope) {
            this.returnEnvelope = returnEnvelope;
            return this;
        }

        /**
         * Setter for perforatedPage.
         * @param  perforatedPage  Integer value for perforatedPage.
         * @return Builder
         */
        public Builder perforatedPage(Integer perforatedPage) {
            this.perforatedPage = OptionalNullable.of(perforatedPage);
            return this;
        }

        /**
         * UnSetter for perforatedPage.
         * @return Builder
         */
        public Builder unsetPerforatedPage() {
            perforatedPage = null;
            return this;
        }

        /**
         * Setter for customEnvelope.
         * @param  customEnvelope  CustomEnvelope value for customEnvelope.
         * @return Builder
         */
        public Builder customEnvelope(CustomEnvelope customEnvelope) {
            this.customEnvelope = OptionalNullable.of(customEnvelope);
            return this;
        }

        /**
         * UnSetter for customEnvelope.
         * @return Builder
         */
        public Builder unsetCustomEnvelope() {
            customEnvelope = null;
            return this;
        }

        /**
         * Setter for thumbnails.
         * @param  thumbnails  List of Thumbnail value for thumbnails.
         * @return Builder
         */
        public Builder thumbnails(List<Thumbnail> thumbnails) {
            this.thumbnails = thumbnails;
            return this;
        }

        /**
         * Setter for expectedDeliveryDate.
         * @param  expectedDeliveryDate  LocalDate value for expectedDeliveryDate.
         * @return Builder
         */
        public Builder expectedDeliveryDate(LocalDate expectedDeliveryDate) {
            this.expectedDeliveryDate = expectedDeliveryDate;
            return this;
        }

        /**
         * Setter for dateCreated.
         * @param  dateCreated  LocalDateTime value for dateCreated.
         * @return Builder
         */
        public Builder dateCreated(LocalDateTime dateCreated) {
            this.dateCreated = dateCreated;
            return this;
        }

        /**
         * Setter for dateModified.
         * @param  dateModified  LocalDateTime value for dateModified.
         * @return Builder
         */
        public Builder dateModified(LocalDateTime dateModified) {
            this.dateModified = dateModified;
            return this;
        }

        /**
         * Setter for deleted.
         * @param  deleted  Boolean value for deleted.
         * @return Builder
         */
        public Builder deleted(Boolean deleted) {
            this.deleted = deleted;
            return this;
        }

        /**
         * Setter for templateId.
         * @param  templateId  Object value for templateId.
         * @return Builder
         */
        public Builder templateId(Object templateId) {
            this.templateId = templateId;
            return this;
        }

        /**
         * Setter for templateVersionId.
         * @param  templateVersionId  String value for templateVersionId.
         * @return Builder
         */
        public Builder templateVersionId(String templateVersionId) {
            this.templateVersionId = templateVersionId;
            return this;
        }

        /**
         * Setter for object.
         * @param  object  String value for object.
         * @return Builder
         */
        public Builder object(String object) {
            this.object = object;
            return this;
        }

        /**
         * Builds a new {@link Certified} object using the set fields.
         * @return {@link Certified}
         */
        public Certified build() {
            return new Certified(extraService, trackingEvents, color, to, carrier, from, id,
                    trackingNumber, description, metadata, mergeVariables, sendDate, mailType,
                    doubleSided, addressPlacement, returnEnvelope, perforatedPage, customEnvelope,
                    thumbnails, expectedDeliveryDate, dateCreated, dateModified, deleted,
                    templateId, templateVersionId, object);
        }
    }
}
