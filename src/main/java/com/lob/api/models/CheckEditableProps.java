/*
 * LobAPI20200211SpecificationLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.lob.api.internal.OptionalNullable;

/**
 * This is a model class for CheckEditableProps type.
 */
public class CheckEditableProps {
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<String> description;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Metadata metadata;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<Object> mergeVariables;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Object sendDate;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private MailType2Enum mailType;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<String> memo;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Integer checkNumber;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private String message;
    private Object to;
    private Object from;
    private String bankAccount;
    private double amount;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Object logo;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Object checkBottom;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Object attachment;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private String billingGroupId;

    /**
     * Default constructor.
     */
    public CheckEditableProps() {
        mailType = MailType2Enum.USPS_FIRST_CLASS;
    }

    /**
     * Initialization constructor.
     * @param  to  Object value for to.
     * @param  from  Object value for from.
     * @param  bankAccount  String value for bankAccount.
     * @param  amount  double value for amount.
     * @param  description  String value for description.
     * @param  metadata  Metadata value for metadata.
     * @param  mergeVariables  Object value for mergeVariables.
     * @param  sendDate  Object value for sendDate.
     * @param  mailType  MailType2Enum value for mailType.
     * @param  memo  String value for memo.
     * @param  checkNumber  Integer value for checkNumber.
     * @param  message  String value for message.
     * @param  logo  Object value for logo.
     * @param  checkBottom  Object value for checkBottom.
     * @param  attachment  Object value for attachment.
     * @param  billingGroupId  String value for billingGroupId.
     */
    public CheckEditableProps(
            Object to,
            Object from,
            String bankAccount,
            double amount,
            String description,
            Metadata metadata,
            Object mergeVariables,
            Object sendDate,
            MailType2Enum mailType,
            String memo,
            Integer checkNumber,
            String message,
            Object logo,
            Object checkBottom,
            Object attachment,
            String billingGroupId) {
        this.description = OptionalNullable.of(description);
        this.metadata = metadata;
        this.mergeVariables = OptionalNullable.of(mergeVariables);
        this.sendDate = sendDate;
        this.mailType = mailType;
        this.memo = OptionalNullable.of(memo);
        this.checkNumber = checkNumber;
        this.message = message;
        this.to = to;
        this.from = from;
        this.bankAccount = bankAccount;
        this.amount = amount;
        this.logo = logo;
        this.checkBottom = checkBottom;
        this.attachment = attachment;
        this.billingGroupId = billingGroupId;
    }

    /**
     * Internal initialization constructor.
     */
    protected CheckEditableProps(Object to, Object from, String bankAccount, double amount,
            OptionalNullable<String> description, Metadata metadata,
            OptionalNullable<Object> mergeVariables, Object sendDate, MailType2Enum mailType,
            OptionalNullable<String> memo, Integer checkNumber, String message, Object logo,
            Object checkBottom, Object attachment, String billingGroupId) {
        this.description = description;
        this.metadata = metadata;
        this.mergeVariables = mergeVariables;
        this.sendDate = sendDate;
        this.mailType = mailType;
        this.memo = memo;
        this.checkNumber = checkNumber;
        this.message = message;
        this.to = to;
        this.from = from;
        this.bankAccount = bankAccount;
        this.amount = amount;
        this.logo = logo;
        this.checkBottom = checkBottom;
        this.attachment = attachment;
        this.billingGroupId = billingGroupId;
    }

    /**
     * Internal Getter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     * @return Returns the Internal String
     */
    @JsonGetter("description")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDescription() {
        return this.description;
    }

    /**
     * Getter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     * @return Returns the String
     */
    public String getDescription() {
        return OptionalNullable.getFrom(description);
    }

    /**
     * Setter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = OptionalNullable.of(description);
    }

    /**
     * UnSetter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     */
    public void unsetDescription() {
        description = null;
    }

    /**
     * Getter for Metadata.
     * Use metadata to store custom information for tagging and labeling back to your internal
     * systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters
     * and values must be at most 500 characters. Neither can contain the characters `"` and `\`.
     * Nested objects are not supported. See [Metadata](#section/Metadata) for more information.
     * @return Returns the Metadata
     */
    @JsonGetter("metadata")
    public Metadata getMetadata() {
        return metadata;
    }

    /**
     * Setter for Metadata.
     * Use metadata to store custom information for tagging and labeling back to your internal
     * systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters
     * and values must be at most 500 characters. Neither can contain the characters `"` and `\`.
     * Nested objects are not supported. See [Metadata](#section/Metadata) for more information.
     * @param metadata Value for Metadata
     */
    @JsonSetter("metadata")
    public void setMetadata(Metadata metadata) {
        this.metadata = metadata;
    }

    /**
     * Internal Getter for MergeVariables.
     * You can input a merge variable payload object to your template to render dynamic content. For
     * example, if you have a template like: `{{variable_name}}`, pass in `{"variable_name":
     * "Harry"}` to render `Harry`. `merge_variables` must be an object. Any type of value is
     * accepted as long as the object is valid JSON; you can use `strings`, `numbers`, `booleans`,
     * `arrays`, `objects`, or `null`. The max length of the object is 25,000 characters. If you
     * call `JSON.stringify` on your object, it can be no longer than 25,000 characters. Your
     * variable names cannot contain any whitespace or any of the following special characters: `!`,
     * `"`, `#`, `%`, `&`, `'`, `(`, `)`, `*`, `+`, `,`, `/`, `;`, `&lt;`, `=`, `&gt;`, `@`, `[`, `\`,
     * `]`, `^`, `` ` ``, `{`, `|`, `}`, `~`. More instructions can be found in [our guide to using
     * html and merge
     * variables](https://lob.com/resources/guides/general/using-html-and-merge-variables).
     * Depending on your [Merge Variable strictness](https://dashboard.lob.com/#/settings/account)
     * setting, if you define variables in your HTML but do not pass them here, you will either
     * receive an error or the variable will render as an empty string.
     * @return Returns the Internal Object
     */
    @JsonGetter("merge_variables")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Object> internalGetMergeVariables() {
        return this.mergeVariables;
    }

    /**
     * Getter for MergeVariables.
     * You can input a merge variable payload object to your template to render dynamic content. For
     * example, if you have a template like: `{{variable_name}}`, pass in `{"variable_name":
     * "Harry"}` to render `Harry`. `merge_variables` must be an object. Any type of value is
     * accepted as long as the object is valid JSON; you can use `strings`, `numbers`, `booleans`,
     * `arrays`, `objects`, or `null`. The max length of the object is 25,000 characters. If you
     * call `JSON.stringify` on your object, it can be no longer than 25,000 characters. Your
     * variable names cannot contain any whitespace or any of the following special characters: `!`,
     * `"`, `#`, `%`, `&`, `'`, `(`, `)`, `*`, `+`, `,`, `/`, `;`, `&lt;`, `=`, `&gt;`, `@`, `[`, `\`,
     * `]`, `^`, `` ` ``, `{`, `|`, `}`, `~`. More instructions can be found in [our guide to using
     * html and merge
     * variables](https://lob.com/resources/guides/general/using-html-and-merge-variables).
     * Depending on your [Merge Variable strictness](https://dashboard.lob.com/#/settings/account)
     * setting, if you define variables in your HTML but do not pass them here, you will either
     * receive an error or the variable will render as an empty string.
     * @return Returns the Object
     */
    public Object getMergeVariables() {
        return OptionalNullable.getFrom(mergeVariables);
    }

    /**
     * Setter for MergeVariables.
     * You can input a merge variable payload object to your template to render dynamic content. For
     * example, if you have a template like: `{{variable_name}}`, pass in `{"variable_name":
     * "Harry"}` to render `Harry`. `merge_variables` must be an object. Any type of value is
     * accepted as long as the object is valid JSON; you can use `strings`, `numbers`, `booleans`,
     * `arrays`, `objects`, or `null`. The max length of the object is 25,000 characters. If you
     * call `JSON.stringify` on your object, it can be no longer than 25,000 characters. Your
     * variable names cannot contain any whitespace or any of the following special characters: `!`,
     * `"`, `#`, `%`, `&`, `'`, `(`, `)`, `*`, `+`, `,`, `/`, `;`, `&lt;`, `=`, `&gt;`, `@`, `[`, `\`,
     * `]`, `^`, `` ` ``, `{`, `|`, `}`, `~`. More instructions can be found in [our guide to using
     * html and merge
     * variables](https://lob.com/resources/guides/general/using-html-and-merge-variables).
     * Depending on your [Merge Variable strictness](https://dashboard.lob.com/#/settings/account)
     * setting, if you define variables in your HTML but do not pass them here, you will either
     * receive an error or the variable will render as an empty string.
     * @param mergeVariables Value for Object
     */
    @JsonSetter("merge_variables")
    public void setMergeVariables(Object mergeVariables) {
        this.mergeVariables = OptionalNullable.of(mergeVariables);
    }

    /**
     * UnSetter for MergeVariables.
     * You can input a merge variable payload object to your template to render dynamic content. For
     * example, if you have a template like: `{{variable_name}}`, pass in `{"variable_name":
     * "Harry"}` to render `Harry`. `merge_variables` must be an object. Any type of value is
     * accepted as long as the object is valid JSON; you can use `strings`, `numbers`, `booleans`,
     * `arrays`, `objects`, or `null`. The max length of the object is 25,000 characters. If you
     * call `JSON.stringify` on your object, it can be no longer than 25,000 characters. Your
     * variable names cannot contain any whitespace or any of the following special characters: `!`,
     * `"`, `#`, `%`, `&`, `'`, `(`, `)`, `*`, `+`, `,`, `/`, `;`, `&lt;`, `=`, `&gt;`, `@`, `[`, `\`,
     * `]`, `^`, `` ` ``, `{`, `|`, `}`, `~`. More instructions can be found in [our guide to using
     * html and merge
     * variables](https://lob.com/resources/guides/general/using-html-and-merge-variables).
     * Depending on your [Merge Variable strictness](https://dashboard.lob.com/#/settings/account)
     * setting, if you define variables in your HTML but do not pass them here, you will either
     * receive an error or the variable will render as an empty string.
     */
    public void unsetMergeVariables() {
        mergeVariables = null;
    }

    /**
     * Getter for SendDate.
     * A timestamp in ISO 8601 format which specifies a date after the current time and up to 180
     * days in the future to send the letter off for production. Setting a send date overrides the
     * default [cancellation window](#section/Cancellation-Windows) applied to the mailpiece. Until
     * the `send_date` has passed, the mailpiece can be canceled. If a date in the format
     * `2017-11-01` is passed, it will evaluate to midnight UTC of that date
     * (`2017-11-01T00:00:00.000Z`). If a datetime is passed, that exact time will be used. A
     * `send_date` passed with no time zone will default to UTC, while a `send_date` passed with a
     * time zone will be converted to UTC.
     * @return Returns the Object
     */
    @JsonGetter("send_date")
    public Object getSendDate() {
        return sendDate;
    }

    /**
     * Setter for SendDate.
     * A timestamp in ISO 8601 format which specifies a date after the current time and up to 180
     * days in the future to send the letter off for production. Setting a send date overrides the
     * default [cancellation window](#section/Cancellation-Windows) applied to the mailpiece. Until
     * the `send_date` has passed, the mailpiece can be canceled. If a date in the format
     * `2017-11-01` is passed, it will evaluate to midnight UTC of that date
     * (`2017-11-01T00:00:00.000Z`). If a datetime is passed, that exact time will be used. A
     * `send_date` passed with no time zone will default to UTC, while a `send_date` passed with a
     * time zone will be converted to UTC.
     * @param sendDate Value for Object
     */
    @JsonSetter("send_date")
    public void setSendDate(Object sendDate) {
        this.sendDate = sendDate;
    }

    /**
     * Getter for MailType.
     * Checks must be sent `usps_first_class`
     * @return Returns the MailType2Enum
     */
    @JsonGetter("mail_type")
    public MailType2Enum getMailType() {
        return mailType;
    }

    /**
     * Setter for MailType.
     * Checks must be sent `usps_first_class`
     * @param mailType Value for MailType2Enum
     */
    @JsonSetter("mail_type")
    public void setMailType(MailType2Enum mailType) {
        this.mailType = mailType;
    }

    /**
     * Internal Getter for Memo.
     * Text to include on the memo line of the check.
     * @return Returns the Internal String
     */
    @JsonGetter("memo")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetMemo() {
        return this.memo;
    }

    /**
     * Getter for Memo.
     * Text to include on the memo line of the check.
     * @return Returns the String
     */
    public String getMemo() {
        return OptionalNullable.getFrom(memo);
    }

    /**
     * Setter for Memo.
     * Text to include on the memo line of the check.
     * @param memo Value for String
     */
    @JsonSetter("memo")
    public void setMemo(String memo) {
        this.memo = OptionalNullable.of(memo);
    }

    /**
     * UnSetter for Memo.
     * Text to include on the memo line of the check.
     */
    public void unsetMemo() {
        memo = null;
    }

    /**
     * Getter for CheckNumber.
     * An integer that designates the check number. If `check_number` is not provided, checks
     * created from a new `bank_account` will start at `10000` and increment with each check created
     * with the `bank_account`. A provided `check_number` overrides the defaults. Subsequent checks
     * created with the same `bank_account` will increment from the provided check number.
     * @return Returns the Integer
     */
    @JsonGetter("check_number")
    public Integer getCheckNumber() {
        return checkNumber;
    }

    /**
     * Setter for CheckNumber.
     * An integer that designates the check number. If `check_number` is not provided, checks
     * created from a new `bank_account` will start at `10000` and increment with each check created
     * with the `bank_account`. A provided `check_number` overrides the defaults. Subsequent checks
     * created with the same `bank_account` will increment from the provided check number.
     * @param checkNumber Value for Integer
     */
    @JsonSetter("check_number")
    public void setCheckNumber(Integer checkNumber) {
        this.checkNumber = checkNumber;
    }

    /**
     * Getter for Message.
     * Max of 400 characters to be included at the bottom of the check page.
     * @return Returns the String
     */
    @JsonGetter("message")
    public String getMessage() {
        return message;
    }

    /**
     * Setter for Message.
     * Max of 400 characters to be included at the bottom of the check page.
     * @param message Value for String
     */
    @JsonSetter("message")
    public void setMessage(String message) {
        this.message = message;
    }

    /**
     * Getter for To.
     * Must either be an address ID or an inline object with correct address parameters. Checks
     * cannot be sent internationally (`address_country` must be `US`). The total string of the sum
     * of `address_line1` and `address_line2` must be no longer than 50 characters combined. If an
     * object is used, an address will be created, corrected, and standardized for free whenever
     * possible using our US Address Verification engine, and returned back with an ID. Depending on
     * your [Print & Mail Edition](https://dashboard.lob.com/#/settings/editions), addresses may
     * also be run through [National Change of Address (NCOA)](https://lob.com/docs#ncoa). If an
     * address used does not meet your account’s [US Mail Strictness
     * Setting](https://dashboard.lob.com/#/settings/account), the request will fail. [More about
     * verification of mailing addresses](https://www.lob.com/guides#mailing_addresses)
     * @return Returns the Object
     */
    @JsonGetter("to")
    public Object getTo() {
        return to;
    }

    /**
     * Setter for To.
     * Must either be an address ID or an inline object with correct address parameters. Checks
     * cannot be sent internationally (`address_country` must be `US`). The total string of the sum
     * of `address_line1` and `address_line2` must be no longer than 50 characters combined. If an
     * object is used, an address will be created, corrected, and standardized for free whenever
     * possible using our US Address Verification engine, and returned back with an ID. Depending on
     * your [Print & Mail Edition](https://dashboard.lob.com/#/settings/editions), addresses may
     * also be run through [National Change of Address (NCOA)](https://lob.com/docs#ncoa). If an
     * address used does not meet your account’s [US Mail Strictness
     * Setting](https://dashboard.lob.com/#/settings/account), the request will fail. [More about
     * verification of mailing addresses](https://www.lob.com/guides#mailing_addresses)
     * @param to Value for Object
     */
    @JsonSetter("to")
    public void setTo(Object to) {
        this.to = to;
    }

    /**
     * Getter for From.
     * Must either be an address ID or an inline object with correct address parameters. Must either
     * be an address ID or an inline object with correct address parameters. All addresses will be
     * standardized into uppercase without being modified by verification.
     * @return Returns the Object
     */
    @JsonGetter("from")
    public Object getFrom() {
        return from;
    }

    /**
     * Setter for From.
     * Must either be an address ID or an inline object with correct address parameters. Must either
     * be an address ID or an inline object with correct address parameters. All addresses will be
     * standardized into uppercase without being modified by verification.
     * @param from Value for Object
     */
    @JsonSetter("from")
    public void setFrom(Object from) {
        this.from = from;
    }

    /**
     * Getter for BankAccount.
     * @return Returns the String
     */
    @JsonGetter("bank_account")
    public String getBankAccount() {
        return bankAccount;
    }

    /**
     * Setter for BankAccount.
     * @param bankAccount Value for String
     */
    @JsonSetter("bank_account")
    public void setBankAccount(String bankAccount) {
        this.bankAccount = bankAccount;
    }

    /**
     * Getter for Amount.
     * The payment amount to be sent in US dollars. Amounts will be rounded to two decimal places.
     * @return Returns the double
     */
    @JsonGetter("amount")
    public double getAmount() {
        return amount;
    }

    /**
     * Setter for Amount.
     * The payment amount to be sent in US dollars. Amounts will be rounded to two decimal places.
     * @param amount Value for double
     */
    @JsonSetter("amount")
    public void setAmount(double amount) {
        this.amount = amount;
    }

    /**
     * Getter for Logo.
     * Accepts a remote URL or local file upload to an image to print (in grayscale) in the
     * upper-left corner of your check. Image requirements: * RGB or CMYK * square * minimum size:
     * 100px x 100px * transparent backgrond * `png` or `jpg`
     * @return Returns the Object
     */
    @JsonGetter("logo")
    public Object getLogo() {
        return logo;
    }

    /**
     * Setter for Logo.
     * Accepts a remote URL or local file upload to an image to print (in grayscale) in the
     * upper-left corner of your check. Image requirements: * RGB or CMYK * square * minimum size:
     * 100px x 100px * transparent backgrond * `png` or `jpg`
     * @param logo Value for Object
     */
    @JsonSetter("logo")
    public void setLogo(Object logo) {
        this.logo = logo;
    }

    /**
     * Getter for CheckBottom.
     * The artwork to use on the bottom of the check page. Notes: - HTML merge variables should not
     * include delimiting whitespace. - PDF, PNG, and JPGs must be sized at 8.5"x11" at 300 DPI,
     * while supplied HTML will be rendered and trimmed to fit on a 8.5"x11" page. - The check
     * bottom will always be printed in black & white. - Must conform to [this
     * template](https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/check_bottom_template.pdf).
     * Need more help? Consult our [HTML examples](#section/HTML-Examples).
     * @return Returns the Object
     */
    @JsonGetter("check_bottom")
    public Object getCheckBottom() {
        return checkBottom;
    }

    /**
     * Setter for CheckBottom.
     * The artwork to use on the bottom of the check page. Notes: - HTML merge variables should not
     * include delimiting whitespace. - PDF, PNG, and JPGs must be sized at 8.5"x11" at 300 DPI,
     * while supplied HTML will be rendered and trimmed to fit on a 8.5"x11" page. - The check
     * bottom will always be printed in black & white. - Must conform to [this
     * template](https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/check_bottom_template.pdf).
     * Need more help? Consult our [HTML examples](#section/HTML-Examples).
     * @param checkBottom Value for Object
     */
    @JsonSetter("check_bottom")
    public void setCheckBottom(Object checkBottom) {
        this.checkBottom = checkBottom;
    }

    /**
     * Getter for Attachment.
     * A document to include with the check. Notes: - HTML merge variables should not include
     * delimiting whitespace. - All pages of PDF, PNG, and JPGs must be sized at 8.5"x11" at 300
     * DPI, while supplied HTML will be rendered and trimmed to as many 8.5"x11" pages as necessary.
     * - If a PDF is provided, it must be 6 pages or fewer. - The attachment will be printed
     * double-sided in black & white and will be included in the envelope after the check page. -
     * Please follow these [design
     * guidelines](https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/check_attachment_template.pdf).
     * See [pricing](https://lob.com/pricing/print-mail#compare) for extra costs incurred. Need more
     * help? Consult our [HTML examples](#section/HTML-Examples).
     * @return Returns the Object
     */
    @JsonGetter("attachment")
    public Object getAttachment() {
        return attachment;
    }

    /**
     * Setter for Attachment.
     * A document to include with the check. Notes: - HTML merge variables should not include
     * delimiting whitespace. - All pages of PDF, PNG, and JPGs must be sized at 8.5"x11" at 300
     * DPI, while supplied HTML will be rendered and trimmed to as many 8.5"x11" pages as necessary.
     * - If a PDF is provided, it must be 6 pages or fewer. - The attachment will be printed
     * double-sided in black & white and will be included in the envelope after the check page. -
     * Please follow these [design
     * guidelines](https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/check_attachment_template.pdf).
     * See [pricing](https://lob.com/pricing/print-mail#compare) for extra costs incurred. Need more
     * help? Consult our [HTML examples](#section/HTML-Examples).
     * @param attachment Value for Object
     */
    @JsonSetter("attachment")
    public void setAttachment(Object attachment) {
        this.attachment = attachment;
    }

    /**
     * Getter for BillingGroupId.
     * An optional string with the billing group ID to tag your usage with. Is used for billing
     * purposes. Requires special activation to use. See [Billing Group
     * API](https://lob.github.io/lob-openapi/#tag/Billing-Groups) for more information.
     * @return Returns the String
     */
    @JsonGetter("billing_group_id")
    public String getBillingGroupId() {
        return billingGroupId;
    }

    /**
     * Setter for BillingGroupId.
     * An optional string with the billing group ID to tag your usage with. Is used for billing
     * purposes. Requires special activation to use. See [Billing Group
     * API](https://lob.github.io/lob-openapi/#tag/Billing-Groups) for more information.
     * @param billingGroupId Value for String
     */
    @JsonSetter("billing_group_id")
    public void setBillingGroupId(String billingGroupId) {
        this.billingGroupId = billingGroupId;
    }

    /**
     * Converts this CheckEditableProps into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "CheckEditableProps [" + "to=" + to + ", from=" + from + ", bankAccount="
                + bankAccount + ", amount=" + amount + ", description=" + description
                + ", metadata=" + metadata + ", mergeVariables=" + mergeVariables + ", sendDate="
                + sendDate + ", mailType=" + mailType + ", memo=" + memo + ", checkNumber="
                + checkNumber + ", message=" + message + ", logo=" + logo + ", checkBottom="
                + checkBottom + ", attachment=" + attachment + ", billingGroupId=" + billingGroupId
                + "]";
    }

    /**
     * Builds a new {@link CheckEditableProps.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link CheckEditableProps.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(to, from, bankAccount, amount)
                .metadata(getMetadata())
                .sendDate(getSendDate())
                .mailType(getMailType())
                .checkNumber(getCheckNumber())
                .message(getMessage())
                .logo(getLogo())
                .checkBottom(getCheckBottom())
                .attachment(getAttachment())
                .billingGroupId(getBillingGroupId());
        builder.description = internalGetDescription();
        builder.mergeVariables = internalGetMergeVariables();
        builder.memo = internalGetMemo();
        return builder;
    }

    /**
     * Class to build instances of {@link CheckEditableProps}.
     */
    public static class Builder {
        private Object to;
        private Object from;
        private String bankAccount;
        private double amount;
        private OptionalNullable<String> description;
        private Metadata metadata;
        private OptionalNullable<Object> mergeVariables;
        private Object sendDate;
        private MailType2Enum mailType = MailType2Enum.USPS_FIRST_CLASS;
        private OptionalNullable<String> memo;
        private Integer checkNumber;
        private String message;
        private Object logo;
        private Object checkBottom;
        private Object attachment;
        private String billingGroupId;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  to  Object value for to.
         * @param  from  Object value for from.
         * @param  bankAccount  String value for bankAccount.
         * @param  amount  double value for amount.
         */
        public Builder(Object to, Object from, String bankAccount, double amount) {
            this.to = to;
            this.from = from;
            this.bankAccount = bankAccount;
            this.amount = amount;
        }

        /**
         * Setter for to.
         * @param  to  Object value for to.
         * @return Builder
         */
        public Builder to(Object to) {
            this.to = to;
            return this;
        }

        /**
         * Setter for from.
         * @param  from  Object value for from.
         * @return Builder
         */
        public Builder from(Object from) {
            this.from = from;
            return this;
        }

        /**
         * Setter for bankAccount.
         * @param  bankAccount  String value for bankAccount.
         * @return Builder
         */
        public Builder bankAccount(String bankAccount) {
            this.bankAccount = bankAccount;
            return this;
        }

        /**
         * Setter for amount.
         * @param  amount  double value for amount.
         * @return Builder
         */
        public Builder amount(double amount) {
            this.amount = amount;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = OptionalNullable.of(description);
            return this;
        }

        /**
         * UnSetter for description.
         * @return Builder
         */
        public Builder unsetDescription() {
            description = null;
            return this;
        }

        /**
         * Setter for metadata.
         * @param  metadata  Metadata value for metadata.
         * @return Builder
         */
        public Builder metadata(Metadata metadata) {
            this.metadata = metadata;
            return this;
        }

        /**
         * Setter for mergeVariables.
         * @param  mergeVariables  Object value for mergeVariables.
         * @return Builder
         */
        public Builder mergeVariables(Object mergeVariables) {
            this.mergeVariables = OptionalNullable.of(mergeVariables);
            return this;
        }

        /**
         * UnSetter for mergeVariables.
         * @return Builder
         */
        public Builder unsetMergeVariables() {
            mergeVariables = null;
            return this;
        }

        /**
         * Setter for sendDate.
         * @param  sendDate  Object value for sendDate.
         * @return Builder
         */
        public Builder sendDate(Object sendDate) {
            this.sendDate = sendDate;
            return this;
        }

        /**
         * Setter for mailType.
         * @param  mailType  MailType2Enum value for mailType.
         * @return Builder
         */
        public Builder mailType(MailType2Enum mailType) {
            this.mailType = mailType;
            return this;
        }

        /**
         * Setter for memo.
         * @param  memo  String value for memo.
         * @return Builder
         */
        public Builder memo(String memo) {
            this.memo = OptionalNullable.of(memo);
            return this;
        }

        /**
         * UnSetter for memo.
         * @return Builder
         */
        public Builder unsetMemo() {
            memo = null;
            return this;
        }

        /**
         * Setter for checkNumber.
         * @param  checkNumber  Integer value for checkNumber.
         * @return Builder
         */
        public Builder checkNumber(Integer checkNumber) {
            this.checkNumber = checkNumber;
            return this;
        }

        /**
         * Setter for message.
         * @param  message  String value for message.
         * @return Builder
         */
        public Builder message(String message) {
            this.message = message;
            return this;
        }

        /**
         * Setter for logo.
         * @param  logo  Object value for logo.
         * @return Builder
         */
        public Builder logo(Object logo) {
            this.logo = logo;
            return this;
        }

        /**
         * Setter for checkBottom.
         * @param  checkBottom  Object value for checkBottom.
         * @return Builder
         */
        public Builder checkBottom(Object checkBottom) {
            this.checkBottom = checkBottom;
            return this;
        }

        /**
         * Setter for attachment.
         * @param  attachment  Object value for attachment.
         * @return Builder
         */
        public Builder attachment(Object attachment) {
            this.attachment = attachment;
            return this;
        }

        /**
         * Setter for billingGroupId.
         * @param  billingGroupId  String value for billingGroupId.
         * @return Builder
         */
        public Builder billingGroupId(String billingGroupId) {
            this.billingGroupId = billingGroupId;
            return this;
        }

        /**
         * Builds a new {@link CheckEditableProps} object using the set fields.
         * @return {@link CheckEditableProps}
         */
        public CheckEditableProps build() {
            return new CheckEditableProps(to, from, bankAccount, amount, description, metadata,
                    mergeVariables, sendDate, mailType, memo, checkNumber, message, logo,
                    checkBottom, attachment, billingGroupId);
        }
    }
}
