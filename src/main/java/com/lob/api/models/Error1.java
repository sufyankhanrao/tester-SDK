/*
 * LobAPI20200211SpecificationLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for Error1 type.
 */
public class Error1 {
    private String message;
    private FailureStatusCodeEnum statusCode;
    private Object code;

    /**
     * Default constructor.
     */
    public Error1() {
    }

    /**
     * Initialization constructor.
     * @param  message  String value for message.
     * @param  statusCode  FailureStatusCodeEnum value for statusCode.
     * @param  code  Object value for code.
     */
    public Error1(
            String message,
            FailureStatusCodeEnum statusCode,
            Object code) {
        this.message = message;
        this.statusCode = statusCode;
        this.code = code;
    }

    /**
     * Getter for Message.
     * A human-readable message with more details about the error
     * @return Returns the String
     */
    @JsonGetter("message")
    public String getMessage() {
        return message;
    }

    /**
     * Setter for Message.
     * A human-readable message with more details about the error
     * @param message Value for String
     */
    @JsonSetter("message")
    public void setMessage(String message) {
        this.message = message;
    }

    /**
     * Getter for StatusCode.
     * A conventional HTTP status code: * `401` - Authorization error with your API key or account *
     * `403` - Forbidden error with your API key or account * `404` - The requested item does not
     * exist * `413` - Payload too large * `422` - The query or body parameters did not pass
     * validation * `429` - Too many requests have been sent with an API key in a given amount of
     * time * `500` - An internal server error occurred, please contact support@lob.com
     * @return Returns the FailureStatusCodeEnum
     */
    @JsonGetter("status_code")
    public FailureStatusCodeEnum getStatusCode() {
        return statusCode;
    }

    /**
     * Setter for StatusCode.
     * A conventional HTTP status code: * `401` - Authorization error with your API key or account *
     * `403` - Forbidden error with your API key or account * `404` - The requested item does not
     * exist * `413` - Payload too large * `422` - The query or body parameters did not pass
     * validation * `429` - Too many requests have been sent with an API key in a given amount of
     * time * `500` - An internal server error occurred, please contact support@lob.com
     * @param statusCode Value for FailureStatusCodeEnum
     */
    @JsonSetter("status_code")
    public void setStatusCode(FailureStatusCodeEnum statusCode) {
        this.statusCode = statusCode;
    }

    /**
     * Getter for Code.
     * @return Returns the Object
     */
    @JsonGetter("code")
    public Object getCode() {
        return code;
    }

    /**
     * Setter for Code.
     * @param code Value for Object
     */
    @JsonSetter("code")
    public void setCode(Object code) {
        this.code = code;
    }

    /**
     * Converts this Error1 into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Error1 [" + "message=" + message + ", statusCode=" + statusCode + ", code=" + code
                + "]";
    }

    /**
     * Builds a new {@link Error1.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Error1.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(message, statusCode, code);
        return builder;
    }

    /**
     * Class to build instances of {@link Error1}.
     */
    public static class Builder {
        private String message;
        private FailureStatusCodeEnum statusCode;
        private Object code;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  message  String value for message.
         * @param  statusCode  FailureStatusCodeEnum value for statusCode.
         * @param  code  Object value for code.
         */
        public Builder(String message, FailureStatusCodeEnum statusCode, Object code) {
            this.message = message;
            this.statusCode = statusCode;
            this.code = code;
        }

        /**
         * Setter for message.
         * @param  message  String value for message.
         * @return Builder
         */
        public Builder message(String message) {
            this.message = message;
            return this;
        }

        /**
         * Setter for statusCode.
         * @param  statusCode  FailureStatusCodeEnum value for statusCode.
         * @return Builder
         */
        public Builder statusCode(FailureStatusCodeEnum statusCode) {
            this.statusCode = statusCode;
            return this;
        }

        /**
         * Setter for code.
         * @param  code  Object value for code.
         * @return Builder
         */
        public Builder code(Object code) {
            this.code = code;
            return this;
        }

        /**
         * Builds a new {@link Error1} object using the set fields.
         * @return {@link Error1}
         */
        public Error1 build() {
            return new Error1(message, statusCode, code);
        }
    }
}
