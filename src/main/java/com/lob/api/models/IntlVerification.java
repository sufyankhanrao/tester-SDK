/*
 * LobAPI20200211SpecificationLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.lob.api.internal.OptionalNullable;

/**
 * This is a model class for IntlVerification type.
 */
public class IntlVerification {
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<String> recipient;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private String primaryLine;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private String secondaryLine;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private String id;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private String lastLine;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private String country;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private CoverageEnum coverage;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Deliverability1Enum deliverability;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private StatusEnum status;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private IntlComponents components;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private String object;

    /**
     * Default constructor.
     */
    public IntlVerification() {
    }

    /**
     * Initialization constructor.
     * @param  recipient  String value for recipient.
     * @param  primaryLine  String value for primaryLine.
     * @param  secondaryLine  String value for secondaryLine.
     * @param  id  String value for id.
     * @param  lastLine  String value for lastLine.
     * @param  country  String value for country.
     * @param  coverage  CoverageEnum value for coverage.
     * @param  deliverability  Deliverability1Enum value for deliverability.
     * @param  status  StatusEnum value for status.
     * @param  components  IntlComponents value for components.
     * @param  object  String value for object.
     */
    public IntlVerification(
            String recipient,
            String primaryLine,
            String secondaryLine,
            String id,
            String lastLine,
            String country,
            CoverageEnum coverage,
            Deliverability1Enum deliverability,
            StatusEnum status,
            IntlComponents components,
            String object) {
        this.recipient = OptionalNullable.of(recipient);
        this.primaryLine = primaryLine;
        this.secondaryLine = secondaryLine;
        this.id = id;
        this.lastLine = lastLine;
        this.country = country;
        this.coverage = coverage;
        this.deliverability = deliverability;
        this.status = status;
        this.components = components;
        this.object = object;
    }

    /**
     * Internal initialization constructor.
     */
    protected IntlVerification(OptionalNullable<String> recipient, String primaryLine,
            String secondaryLine, String id, String lastLine, String country, CoverageEnum coverage,
            Deliverability1Enum deliverability, StatusEnum status, IntlComponents components,
            String object) {
        this.recipient = recipient;
        this.primaryLine = primaryLine;
        this.secondaryLine = secondaryLine;
        this.id = id;
        this.lastLine = lastLine;
        this.country = country;
        this.coverage = coverage;
        this.deliverability = deliverability;
        this.status = status;
        this.components = components;
        this.object = object;
    }

    /**
     * Internal Getter for Recipient.
     * The intended recipient, typically a person's or firm's name.
     * @return Returns the Internal String
     */
    @JsonGetter("recipient")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetRecipient() {
        return this.recipient;
    }

    /**
     * Getter for Recipient.
     * The intended recipient, typically a person's or firm's name.
     * @return Returns the String
     */
    public String getRecipient() {
        return OptionalNullable.getFrom(recipient);
    }

    /**
     * Setter for Recipient.
     * The intended recipient, typically a person's or firm's name.
     * @param recipient Value for String
     */
    @JsonSetter("recipient")
    public void setRecipient(String recipient) {
        this.recipient = OptionalNullable.of(recipient);
    }

    /**
     * UnSetter for Recipient.
     * The intended recipient, typically a person's or firm's name.
     */
    public void unsetRecipient() {
        recipient = null;
    }

    /**
     * Getter for PrimaryLine.
     * The primary delivery line (usually the street address) of the address.
     * @return Returns the String
     */
    @JsonGetter("primary_line")
    public String getPrimaryLine() {
        return primaryLine;
    }

    /**
     * Setter for PrimaryLine.
     * The primary delivery line (usually the street address) of the address.
     * @param primaryLine Value for String
     */
    @JsonSetter("primary_line")
    public void setPrimaryLine(String primaryLine) {
        this.primaryLine = primaryLine;
    }

    /**
     * Getter for SecondaryLine.
     * The secondary delivery line of the address. This field is typically empty but may contain
     * information if `primary_line` is too long.
     * @return Returns the String
     */
    @JsonGetter("secondary_line")
    public String getSecondaryLine() {
        return secondaryLine;
    }

    /**
     * Setter for SecondaryLine.
     * The secondary delivery line of the address. This field is typically empty but may contain
     * information if `primary_line` is too long.
     * @param secondaryLine Value for String
     */
    @JsonSetter("secondary_line")
    public void setSecondaryLine(String secondaryLine) {
        this.secondaryLine = secondaryLine;
    }

    /**
     * Getter for Id.
     * Unique identifier prefixed with `intl_ver_`.
     * @return Returns the String
     */
    @JsonGetter("id")
    public String getId() {
        return id;
    }

    /**
     * Setter for Id.
     * Unique identifier prefixed with `intl_ver_`.
     * @param id Value for String
     */
    @JsonSetter("id")
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Getter for LastLine.
     * Combination of the following applicable `components`: * `city` * `state` * `zip_code` *
     * `zip_code_plus_4`
     * @return Returns the String
     */
    @JsonGetter("last_line")
    public String getLastLine() {
        return lastLine;
    }

    /**
     * Setter for LastLine.
     * Combination of the following applicable `components`: * `city` * `state` * `zip_code` *
     * `zip_code_plus_4`
     * @param lastLine Value for String
     */
    @JsonSetter("last_line")
    public void setLastLine(String lastLine) {
        this.lastLine = lastLine;
    }

    /**
     * Getter for Country.
     * The country of the address. Will be returned as a 2 letter country short-name code (ISO
     * 3166).
     * @return Returns the String
     */
    @JsonGetter("country")
    public String getCountry() {
        return country;
    }

    /**
     * Setter for Country.
     * The country of the address. Will be returned as a 2 letter country short-name code (ISO
     * 3166).
     * @param country Value for String
     */
    @JsonSetter("country")
    public void setCountry(String country) {
        this.country = country;
    }

    /**
     * Getter for Coverage.
     * The coverage level for the country. This represents the maximum level of accuracy an input
     * address can be verified to. * `SUBBUILDING` - Coverage down to unit numbers. For example, in
     * an apartment or a large building * `HOUSENUMBER/BUILDING` - Coverage down to house number.
     * For example, the address where a house or building may be located * `STREET` - Coverage down
     * to street. This means that we can verify that an street exists in a city, state, country *
     * `LOCALITY` - Coverage down to city, state, or village or province. This means that we can
     * verify that a city, village, province, or state exists in a country. Countries differ in how
     * they define what is a province, state, city, village, etc. This attempts to group eveyrthing
     * together. * `SPARSE` - Some addresses for this country exist in our databases
     * @return Returns the CoverageEnum
     */
    @JsonGetter("coverage")
    public CoverageEnum getCoverage() {
        return coverage;
    }

    /**
     * Setter for Coverage.
     * The coverage level for the country. This represents the maximum level of accuracy an input
     * address can be verified to. * `SUBBUILDING` - Coverage down to unit numbers. For example, in
     * an apartment or a large building * `HOUSENUMBER/BUILDING` - Coverage down to house number.
     * For example, the address where a house or building may be located * `STREET` - Coverage down
     * to street. This means that we can verify that an street exists in a city, state, country *
     * `LOCALITY` - Coverage down to city, state, or village or province. This means that we can
     * verify that a city, village, province, or state exists in a country. Countries differ in how
     * they define what is a province, state, city, village, etc. This attempts to group eveyrthing
     * together. * `SPARSE` - Some addresses for this country exist in our databases
     * @param coverage Value for CoverageEnum
     */
    @JsonSetter("coverage")
    public void setCoverage(CoverageEnum coverage) {
        this.coverage = coverage;
    }

    /**
     * Getter for Deliverability.
     * Summarizes the deliverability of the `intl_verification` object. Possible values are: *
     * `deliverable` — The address is deliverable. * `deliverable_missing_info` — The address is
     * missing some information, but is most likely deliverable. * `undeliverable` — The address is
     * most likely not deliverable. Some components of the address (such as city or postal code) may
     * have been found. * `no_match` — This address is not deliverable. No matching street could be
     * found within the city or postal code.
     * @return Returns the Deliverability1Enum
     */
    @JsonGetter("deliverability")
    public Deliverability1Enum getDeliverability() {
        return deliverability;
    }

    /**
     * Setter for Deliverability.
     * Summarizes the deliverability of the `intl_verification` object. Possible values are: *
     * `deliverable` — The address is deliverable. * `deliverable_missing_info` — The address is
     * missing some information, but is most likely deliverable. * `undeliverable` — The address is
     * most likely not deliverable. Some components of the address (such as city or postal code) may
     * have been found. * `no_match` — This address is not deliverable. No matching street could be
     * found within the city or postal code.
     * @param deliverability Value for Deliverability1Enum
     */
    @JsonSetter("deliverability")
    public void setDeliverability(Deliverability1Enum deliverability) {
        this.deliverability = deliverability;
    }

    /**
     * Getter for Status.
     * The status level for the country. This represents the maximum level of accuracy an input
     * address can be verified to. * `LV4` - Verified. The input data is correct. All input data was
     * able to match in databases. * `LV3` - Verified. The input data is correct. All input data was
     * able to match in databases &lt;em&gt;after&lt;/em&gt; some or all elements were standarized. The input
     * data may also be using outdated city, state, or country names. * `LV2` - Verified. The input
     * data is correct although some input data is unverifiable due to incomplete data. * `LV1` -
     * Verified. The input data is acceptable but in an attempt to standarize user input, errors
     * were introduced. * `LF4` - Fixed. The input data is matched and fixed. (Example: Brighon, UK
     * -&gt; Brighton, UK) * `LF3` - Fixed. The input data is matched and fixed but some elements such
     * as Subbuilding number and house number cannot be checked. * `LF2` - Fixed. The input data is
     * matched but some elements such as Street cannot be checked. * `LF1` - Fixed. The input data
     * is acceptable but in an attempt to standarize user input, errors were introduced. * `LM4` -
     * Missing Info. The input data cannot be corrected completely. * `LM3` - Missing Info. The
     * input data cannot be corrected completely and there were multiple matches found in databases.
     * * `LM2` - Missing Info. The input data cannot be corrected completely and only some elements
     * were found. * `LU1` - Unverified. The input data cannot be corrected or matched.
     * @return Returns the StatusEnum
     */
    @JsonGetter("status")
    public StatusEnum getStatus() {
        return status;
    }

    /**
     * Setter for Status.
     * The status level for the country. This represents the maximum level of accuracy an input
     * address can be verified to. * `LV4` - Verified. The input data is correct. All input data was
     * able to match in databases. * `LV3` - Verified. The input data is correct. All input data was
     * able to match in databases &lt;em&gt;after&lt;/em&gt; some or all elements were standarized. The input
     * data may also be using outdated city, state, or country names. * `LV2` - Verified. The input
     * data is correct although some input data is unverifiable due to incomplete data. * `LV1` -
     * Verified. The input data is acceptable but in an attempt to standarize user input, errors
     * were introduced. * `LF4` - Fixed. The input data is matched and fixed. (Example: Brighon, UK
     * -&gt; Brighton, UK) * `LF3` - Fixed. The input data is matched and fixed but some elements such
     * as Subbuilding number and house number cannot be checked. * `LF2` - Fixed. The input data is
     * matched but some elements such as Street cannot be checked. * `LF1` - Fixed. The input data
     * is acceptable but in an attempt to standarize user input, errors were introduced. * `LM4` -
     * Missing Info. The input data cannot be corrected completely. * `LM3` - Missing Info. The
     * input data cannot be corrected completely and there were multiple matches found in databases.
     * * `LM2` - Missing Info. The input data cannot be corrected completely and only some elements
     * were found. * `LU1` - Unverified. The input data cannot be corrected or matched.
     * @param status Value for StatusEnum
     */
    @JsonSetter("status")
    public void setStatus(StatusEnum status) {
        this.status = status;
    }

    /**
     * Getter for Components.
     * A nested object containing a breakdown of each component of an address.
     * @return Returns the IntlComponents
     */
    @JsonGetter("components")
    public IntlComponents getComponents() {
        return components;
    }

    /**
     * Setter for Components.
     * A nested object containing a breakdown of each component of an address.
     * @param components Value for IntlComponents
     */
    @JsonSetter("components")
    public void setComponents(IntlComponents components) {
        this.components = components;
    }

    /**
     * Getter for Object.
     * @return Returns the String
     */
    @JsonGetter("object")
    public String getObject() {
        return object;
    }

    /**
     * Setter for Object.
     * @param object Value for String
     */
    @JsonSetter("object")
    public void setObject(String object) {
        this.object = object;
    }

    /**
     * Converts this IntlVerification into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "IntlVerification [" + "recipient=" + recipient + ", primaryLine=" + primaryLine
                + ", secondaryLine=" + secondaryLine + ", id=" + id + ", lastLine=" + lastLine
                + ", country=" + country + ", coverage=" + coverage + ", deliverability="
                + deliverability + ", status=" + status + ", components=" + components + ", object="
                + object + "]";
    }

    /**
     * Builds a new {@link IntlVerification.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link IntlVerification.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .primaryLine(getPrimaryLine())
                .secondaryLine(getSecondaryLine())
                .id(getId())
                .lastLine(getLastLine())
                .country(getCountry())
                .coverage(getCoverage())
                .deliverability(getDeliverability())
                .status(getStatus())
                .components(getComponents())
                .object(getObject());
        builder.recipient = internalGetRecipient();
        return builder;
    }

    /**
     * Class to build instances of {@link IntlVerification}.
     */
    public static class Builder {
        private OptionalNullable<String> recipient;
        private String primaryLine;
        private String secondaryLine;
        private String id;
        private String lastLine;
        private String country;
        private CoverageEnum coverage;
        private Deliverability1Enum deliverability;
        private StatusEnum status;
        private IntlComponents components;
        private String object;



        /**
         * Setter for recipient.
         * @param  recipient  String value for recipient.
         * @return Builder
         */
        public Builder recipient(String recipient) {
            this.recipient = OptionalNullable.of(recipient);
            return this;
        }

        /**
         * UnSetter for recipient.
         * @return Builder
         */
        public Builder unsetRecipient() {
            recipient = null;
            return this;
        }

        /**
         * Setter for primaryLine.
         * @param  primaryLine  String value for primaryLine.
         * @return Builder
         */
        public Builder primaryLine(String primaryLine) {
            this.primaryLine = primaryLine;
            return this;
        }

        /**
         * Setter for secondaryLine.
         * @param  secondaryLine  String value for secondaryLine.
         * @return Builder
         */
        public Builder secondaryLine(String secondaryLine) {
            this.secondaryLine = secondaryLine;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  String value for id.
         * @return Builder
         */
        public Builder id(String id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for lastLine.
         * @param  lastLine  String value for lastLine.
         * @return Builder
         */
        public Builder lastLine(String lastLine) {
            this.lastLine = lastLine;
            return this;
        }

        /**
         * Setter for country.
         * @param  country  String value for country.
         * @return Builder
         */
        public Builder country(String country) {
            this.country = country;
            return this;
        }

        /**
         * Setter for coverage.
         * @param  coverage  CoverageEnum value for coverage.
         * @return Builder
         */
        public Builder coverage(CoverageEnum coverage) {
            this.coverage = coverage;
            return this;
        }

        /**
         * Setter for deliverability.
         * @param  deliverability  Deliverability1Enum value for deliverability.
         * @return Builder
         */
        public Builder deliverability(Deliverability1Enum deliverability) {
            this.deliverability = deliverability;
            return this;
        }

        /**
         * Setter for status.
         * @param  status  StatusEnum value for status.
         * @return Builder
         */
        public Builder status(StatusEnum status) {
            this.status = status;
            return this;
        }

        /**
         * Setter for components.
         * @param  components  IntlComponents value for components.
         * @return Builder
         */
        public Builder components(IntlComponents components) {
            this.components = components;
            return this;
        }

        /**
         * Setter for object.
         * @param  object  String value for object.
         * @return Builder
         */
        public Builder object(String object) {
            this.object = object;
            return this;
        }

        /**
         * Builds a new {@link IntlVerification} object using the set fields.
         * @return {@link IntlVerification}
         */
        public IntlVerification build() {
            return new IntlVerification(recipient, primaryLine, secondaryLine, id, lastLine,
                    country, coverage, deliverability, status, components, object);
        }
    }
}
