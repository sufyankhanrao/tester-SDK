/*
 * LobAPI20200211SpecificationLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.lob.api.internal.OptionalNullable;

/**
 * This is a model class for LetterEditable type.
 */
public class LetterEditable {
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<String> description;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Metadata metadata;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<Object> mergeVariables;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Object sendDate;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private MailTypeEnum mailType;
    private boolean color;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Boolean doubleSided;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private AddressPlacementEnum addressPlacement;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Object returnEnvelope;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<Integer> perforatedPage;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<CustomEnvelope> customEnvelope;
    private Object to;
    private Object from;
    private Object file;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<ExtraService1Enum> extraService;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private String billingGroupId;

    /**
     * Default constructor.
     */
    public LetterEditable() {
        mailType = MailTypeEnum.USPS_FIRST_CLASS;
        doubleSided = true;
        addressPlacement = AddressPlacementEnum.TOP_FIRST_PAGE;
    }

    /**
     * Initialization constructor.
     * @param  color  boolean value for color.
     * @param  to  Object value for to.
     * @param  from  Object value for from.
     * @param  file  Object value for file.
     * @param  description  String value for description.
     * @param  metadata  Metadata value for metadata.
     * @param  mergeVariables  Object value for mergeVariables.
     * @param  sendDate  Object value for sendDate.
     * @param  mailType  MailTypeEnum value for mailType.
     * @param  doubleSided  Boolean value for doubleSided.
     * @param  addressPlacement  AddressPlacementEnum value for addressPlacement.
     * @param  returnEnvelope  Object value for returnEnvelope.
     * @param  perforatedPage  Integer value for perforatedPage.
     * @param  customEnvelope  CustomEnvelope value for customEnvelope.
     * @param  extraService  ExtraService1Enum value for extraService.
     * @param  billingGroupId  String value for billingGroupId.
     */
    public LetterEditable(
            boolean color,
            Object to,
            Object from,
            Object file,
            String description,
            Metadata metadata,
            Object mergeVariables,
            Object sendDate,
            MailTypeEnum mailType,
            Boolean doubleSided,
            AddressPlacementEnum addressPlacement,
            Object returnEnvelope,
            Integer perforatedPage,
            CustomEnvelope customEnvelope,
            ExtraService1Enum extraService,
            String billingGroupId) {
        this.description = OptionalNullable.of(description);
        this.metadata = metadata;
        this.mergeVariables = OptionalNullable.of(mergeVariables);
        this.sendDate = sendDate;
        this.mailType = mailType;
        this.color = color;
        this.doubleSided = doubleSided;
        this.addressPlacement = addressPlacement;
        this.returnEnvelope = returnEnvelope;
        this.perforatedPage = OptionalNullable.of(perforatedPage);
        this.customEnvelope = OptionalNullable.of(customEnvelope);
        this.to = to;
        this.from = from;
        this.file = file;
        this.extraService = OptionalNullable.of(extraService);
        this.billingGroupId = billingGroupId;
    }

    /**
     * Internal initialization constructor.
     */
    protected LetterEditable(boolean color, Object to, Object from, Object file,
            OptionalNullable<String> description, Metadata metadata,
            OptionalNullable<Object> mergeVariables, Object sendDate, MailTypeEnum mailType,
            Boolean doubleSided, AddressPlacementEnum addressPlacement, Object returnEnvelope,
            OptionalNullable<Integer> perforatedPage,
            OptionalNullable<CustomEnvelope> customEnvelope,
            OptionalNullable<ExtraService1Enum> extraService, String billingGroupId) {
        this.description = description;
        this.metadata = metadata;
        this.mergeVariables = mergeVariables;
        this.sendDate = sendDate;
        this.mailType = mailType;
        this.color = color;
        this.doubleSided = doubleSided;
        this.addressPlacement = addressPlacement;
        this.returnEnvelope = returnEnvelope;
        this.perforatedPage = perforatedPage;
        this.customEnvelope = customEnvelope;
        this.to = to;
        this.from = from;
        this.file = file;
        this.extraService = extraService;
        this.billingGroupId = billingGroupId;
    }

    /**
     * Internal Getter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     * @return Returns the Internal String
     */
    @JsonGetter("description")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDescription() {
        return this.description;
    }

    /**
     * Getter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     * @return Returns the String
     */
    public String getDescription() {
        return OptionalNullable.getFrom(description);
    }

    /**
     * Setter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = OptionalNullable.of(description);
    }

    /**
     * UnSetter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     */
    public void unsetDescription() {
        description = null;
    }

    /**
     * Getter for Metadata.
     * Use metadata to store custom information for tagging and labeling back to your internal
     * systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters
     * and values must be at most 500 characters. Neither can contain the characters `"` and `\`.
     * Nested objects are not supported. See [Metadata](#section/Metadata) for more information.
     * @return Returns the Metadata
     */
    @JsonGetter("metadata")
    public Metadata getMetadata() {
        return metadata;
    }

    /**
     * Setter for Metadata.
     * Use metadata to store custom information for tagging and labeling back to your internal
     * systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters
     * and values must be at most 500 characters. Neither can contain the characters `"` and `\`.
     * Nested objects are not supported. See [Metadata](#section/Metadata) for more information.
     * @param metadata Value for Metadata
     */
    @JsonSetter("metadata")
    public void setMetadata(Metadata metadata) {
        this.metadata = metadata;
    }

    /**
     * Internal Getter for MergeVariables.
     * You can input a merge variable payload object to your template to render dynamic content. For
     * example, if you have a template like: `{{variable_name}}`, pass in `{"variable_name":
     * "Harry"}` to render `Harry`. `merge_variables` must be an object. Any type of value is
     * accepted as long as the object is valid JSON; you can use `strings`, `numbers`, `booleans`,
     * `arrays`, `objects`, or `null`. The max length of the object is 25,000 characters. If you
     * call `JSON.stringify` on your object, it can be no longer than 25,000 characters. Your
     * variable names cannot contain any whitespace or any of the following special characters: `!`,
     * `"`, `#`, `%`, `&`, `'`, `(`, `)`, `*`, `+`, `,`, `/`, `;`, `&lt;`, `=`, `&gt;`, `@`, `[`, `\`,
     * `]`, `^`, `` ` ``, `{`, `|`, `}`, `~`. More instructions can be found in [our guide to using
     * html and merge
     * variables](https://lob.com/resources/guides/general/using-html-and-merge-variables).
     * Depending on your [Merge Variable strictness](https://dashboard.lob.com/#/settings/account)
     * setting, if you define variables in your HTML but do not pass them here, you will either
     * receive an error or the variable will render as an empty string.
     * @return Returns the Internal Object
     */
    @JsonGetter("merge_variables")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Object> internalGetMergeVariables() {
        return this.mergeVariables;
    }

    /**
     * Getter for MergeVariables.
     * You can input a merge variable payload object to your template to render dynamic content. For
     * example, if you have a template like: `{{variable_name}}`, pass in `{"variable_name":
     * "Harry"}` to render `Harry`. `merge_variables` must be an object. Any type of value is
     * accepted as long as the object is valid JSON; you can use `strings`, `numbers`, `booleans`,
     * `arrays`, `objects`, or `null`. The max length of the object is 25,000 characters. If you
     * call `JSON.stringify` on your object, it can be no longer than 25,000 characters. Your
     * variable names cannot contain any whitespace or any of the following special characters: `!`,
     * `"`, `#`, `%`, `&`, `'`, `(`, `)`, `*`, `+`, `,`, `/`, `;`, `&lt;`, `=`, `&gt;`, `@`, `[`, `\`,
     * `]`, `^`, `` ` ``, `{`, `|`, `}`, `~`. More instructions can be found in [our guide to using
     * html and merge
     * variables](https://lob.com/resources/guides/general/using-html-and-merge-variables).
     * Depending on your [Merge Variable strictness](https://dashboard.lob.com/#/settings/account)
     * setting, if you define variables in your HTML but do not pass them here, you will either
     * receive an error or the variable will render as an empty string.
     * @return Returns the Object
     */
    public Object getMergeVariables() {
        return OptionalNullable.getFrom(mergeVariables);
    }

    /**
     * Setter for MergeVariables.
     * You can input a merge variable payload object to your template to render dynamic content. For
     * example, if you have a template like: `{{variable_name}}`, pass in `{"variable_name":
     * "Harry"}` to render `Harry`. `merge_variables` must be an object. Any type of value is
     * accepted as long as the object is valid JSON; you can use `strings`, `numbers`, `booleans`,
     * `arrays`, `objects`, or `null`. The max length of the object is 25,000 characters. If you
     * call `JSON.stringify` on your object, it can be no longer than 25,000 characters. Your
     * variable names cannot contain any whitespace or any of the following special characters: `!`,
     * `"`, `#`, `%`, `&`, `'`, `(`, `)`, `*`, `+`, `,`, `/`, `;`, `&lt;`, `=`, `&gt;`, `@`, `[`, `\`,
     * `]`, `^`, `` ` ``, `{`, `|`, `}`, `~`. More instructions can be found in [our guide to using
     * html and merge
     * variables](https://lob.com/resources/guides/general/using-html-and-merge-variables).
     * Depending on your [Merge Variable strictness](https://dashboard.lob.com/#/settings/account)
     * setting, if you define variables in your HTML but do not pass them here, you will either
     * receive an error or the variable will render as an empty string.
     * @param mergeVariables Value for Object
     */
    @JsonSetter("merge_variables")
    public void setMergeVariables(Object mergeVariables) {
        this.mergeVariables = OptionalNullable.of(mergeVariables);
    }

    /**
     * UnSetter for MergeVariables.
     * You can input a merge variable payload object to your template to render dynamic content. For
     * example, if you have a template like: `{{variable_name}}`, pass in `{"variable_name":
     * "Harry"}` to render `Harry`. `merge_variables` must be an object. Any type of value is
     * accepted as long as the object is valid JSON; you can use `strings`, `numbers`, `booleans`,
     * `arrays`, `objects`, or `null`. The max length of the object is 25,000 characters. If you
     * call `JSON.stringify` on your object, it can be no longer than 25,000 characters. Your
     * variable names cannot contain any whitespace or any of the following special characters: `!`,
     * `"`, `#`, `%`, `&`, `'`, `(`, `)`, `*`, `+`, `,`, `/`, `;`, `&lt;`, `=`, `&gt;`, `@`, `[`, `\`,
     * `]`, `^`, `` ` ``, `{`, `|`, `}`, `~`. More instructions can be found in [our guide to using
     * html and merge
     * variables](https://lob.com/resources/guides/general/using-html-and-merge-variables).
     * Depending on your [Merge Variable strictness](https://dashboard.lob.com/#/settings/account)
     * setting, if you define variables in your HTML but do not pass them here, you will either
     * receive an error or the variable will render as an empty string.
     */
    public void unsetMergeVariables() {
        mergeVariables = null;
    }

    /**
     * Getter for SendDate.
     * A timestamp in ISO 8601 format which specifies a date after the current time and up to 180
     * days in the future to send the letter off for production. Setting a send date overrides the
     * default [cancellation window](#section/Cancellation-Windows) applied to the mailpiece. Until
     * the `send_date` has passed, the mailpiece can be canceled. If a date in the format
     * `2017-11-01` is passed, it will evaluate to midnight UTC of that date
     * (`2017-11-01T00:00:00.000Z`). If a datetime is passed, that exact time will be used. A
     * `send_date` passed with no time zone will default to UTC, while a `send_date` passed with a
     * time zone will be converted to UTC.
     * @return Returns the Object
     */
    @JsonGetter("send_date")
    public Object getSendDate() {
        return sendDate;
    }

    /**
     * Setter for SendDate.
     * A timestamp in ISO 8601 format which specifies a date after the current time and up to 180
     * days in the future to send the letter off for production. Setting a send date overrides the
     * default [cancellation window](#section/Cancellation-Windows) applied to the mailpiece. Until
     * the `send_date` has passed, the mailpiece can be canceled. If a date in the format
     * `2017-11-01` is passed, it will evaluate to midnight UTC of that date
     * (`2017-11-01T00:00:00.000Z`). If a datetime is passed, that exact time will be used. A
     * `send_date` passed with no time zone will default to UTC, while a `send_date` passed with a
     * time zone will be converted to UTC.
     * @param sendDate Value for Object
     */
    @JsonSetter("send_date")
    public void setSendDate(Object sendDate) {
        this.sendDate = sendDate;
    }

    /**
     * Getter for MailType.
     * A string designating the mail postage type: * `usps_first_class` - (default) *
     * `usps_standard` - a [cheaper option](https://lob.com/pricing/print-mail#compare) which is
     * less predictable and takes longer to deliver. `usps_standard` cannot be used with `4x6`
     * postcards or for any postcards sent outside of the United States.
     * @return Returns the MailTypeEnum
     */
    @JsonGetter("mail_type")
    public MailTypeEnum getMailType() {
        return mailType;
    }

    /**
     * Setter for MailType.
     * A string designating the mail postage type: * `usps_first_class` - (default) *
     * `usps_standard` - a [cheaper option](https://lob.com/pricing/print-mail#compare) which is
     * less predictable and takes longer to deliver. `usps_standard` cannot be used with `4x6`
     * postcards or for any postcards sent outside of the United States.
     * @param mailType Value for MailTypeEnum
     */
    @JsonSetter("mail_type")
    public void setMailType(MailTypeEnum mailType) {
        this.mailType = mailType;
    }

    /**
     * Getter for Color.
     * Set this key to `true` if you would like to print in color. Set to `false` if you would like
     * to print in black and white.
     * @return Returns the boolean
     */
    @JsonGetter("color")
    public boolean getColor() {
        return color;
    }

    /**
     * Setter for Color.
     * Set this key to `true` if you would like to print in color. Set to `false` if you would like
     * to print in black and white.
     * @param color Value for boolean
     */
    @JsonSetter("color")
    public void setColor(boolean color) {
        this.color = color;
    }

    /**
     * Getter for DoubleSided.
     * Set this attribute to `true` for double sided printing, or `false` for for single sided
     * printing. Defaults to `true`.
     * @return Returns the Boolean
     */
    @JsonGetter("double_sided")
    public Boolean getDoubleSided() {
        return doubleSided;
    }

    /**
     * Setter for DoubleSided.
     * Set this attribute to `true` for double sided printing, or `false` for for single sided
     * printing. Defaults to `true`.
     * @param doubleSided Value for Boolean
     */
    @JsonSetter("double_sided")
    public void setDoubleSided(Boolean doubleSided) {
        this.doubleSided = doubleSided;
    }

    /**
     * Getter for AddressPlacement.
     * Specifies the location of the address information that will show through the double-window
     * envelope. To see how this will impact your letter design, view our letter template. *
     * `top_first_page` - (default) print address information at the top of your provided first page
     * * `insert_blank_page` - insert a blank address page at the beginning of your file (you will
     * be charged for the extra page) * `bottom_first_page_center` - **(deprecation planned within a
     * few months)** print address information at the bottom center of your provided first page *
     * `bottom_first_page` - print address information at the bottom of your provided first page
     * @return Returns the AddressPlacementEnum
     */
    @JsonGetter("address_placement")
    public AddressPlacementEnum getAddressPlacement() {
        return addressPlacement;
    }

    /**
     * Setter for AddressPlacement.
     * Specifies the location of the address information that will show through the double-window
     * envelope. To see how this will impact your letter design, view our letter template. *
     * `top_first_page` - (default) print address information at the top of your provided first page
     * * `insert_blank_page` - insert a blank address page at the beginning of your file (you will
     * be charged for the extra page) * `bottom_first_page_center` - **(deprecation planned within a
     * few months)** print address information at the bottom center of your provided first page *
     * `bottom_first_page` - print address information at the bottom of your provided first page
     * @param addressPlacement Value for AddressPlacementEnum
     */
    @JsonSetter("address_placement")
    public void setAddressPlacement(AddressPlacementEnum addressPlacement) {
        this.addressPlacement = addressPlacement;
    }

    /**
     * Getter for ReturnEnvelope.
     * Indicates if a return envelope is requested for the letter. The value corresponding to this
     * field is by default a boolean. But if the account is signed up for custom return envelopes,
     * the value is of type string and is `no_9_single_window` for a standard return envelope and a
     * custom `return_envelope_id` for non-standard return envelopes. To include a return envelope
     * with your letter, set to `true` and specify the `perforated_page`. See
     * [pricing](https://www.lob.com/pricing/print-mail#compare) for extra costs incurred.
     * @return Returns the Object
     */
    @JsonGetter("return_envelope")
    public Object getReturnEnvelope() {
        return returnEnvelope;
    }

    /**
     * Setter for ReturnEnvelope.
     * Indicates if a return envelope is requested for the letter. The value corresponding to this
     * field is by default a boolean. But if the account is signed up for custom return envelopes,
     * the value is of type string and is `no_9_single_window` for a standard return envelope and a
     * custom `return_envelope_id` for non-standard return envelopes. To include a return envelope
     * with your letter, set to `true` and specify the `perforated_page`. See
     * [pricing](https://www.lob.com/pricing/print-mail#compare) for extra costs incurred.
     * @param returnEnvelope Value for Object
     */
    @JsonSetter("return_envelope")
    public void setReturnEnvelope(Object returnEnvelope) {
        this.returnEnvelope = returnEnvelope;
    }

    /**
     * Internal Getter for PerforatedPage.
     * Required if `return_envelope` is `true`. The number of the page that should be perforated for
     * use with the return envelope. Must be greater than or equal to `1`. The blank page added by
     * `address_placement=insert_blank_page` will be ignored when considering the perforated page
     * number. To see how perforation will impact your letter design, view our [perforation
     * guide](https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_perf_template.pdf).
     * @return Returns the Internal Integer
     */
    @JsonGetter("perforated_page")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetPerforatedPage() {
        return this.perforatedPage;
    }

    /**
     * Getter for PerforatedPage.
     * Required if `return_envelope` is `true`. The number of the page that should be perforated for
     * use with the return envelope. Must be greater than or equal to `1`. The blank page added by
     * `address_placement=insert_blank_page` will be ignored when considering the perforated page
     * number. To see how perforation will impact your letter design, view our [perforation
     * guide](https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_perf_template.pdf).
     * @return Returns the Integer
     */
    public Integer getPerforatedPage() {
        return OptionalNullable.getFrom(perforatedPage);
    }

    /**
     * Setter for PerforatedPage.
     * Required if `return_envelope` is `true`. The number of the page that should be perforated for
     * use with the return envelope. Must be greater than or equal to `1`. The blank page added by
     * `address_placement=insert_blank_page` will be ignored when considering the perforated page
     * number. To see how perforation will impact your letter design, view our [perforation
     * guide](https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_perf_template.pdf).
     * @param perforatedPage Value for Integer
     */
    @JsonSetter("perforated_page")
    public void setPerforatedPage(Integer perforatedPage) {
        this.perforatedPage = OptionalNullable.of(perforatedPage);
    }

    /**
     * UnSetter for PerforatedPage.
     * Required if `return_envelope` is `true`. The number of the page that should be perforated for
     * use with the return envelope. Must be greater than or equal to `1`. The blank page added by
     * `address_placement=insert_blank_page` will be ignored when considering the perforated page
     * number. To see how perforation will impact your letter design, view our [perforation
     * guide](https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_perf_template.pdf).
     */
    public void unsetPerforatedPage() {
        perforatedPage = null;
    }

    /**
     * Internal Getter for CustomEnvelope.
     * A nested custom envelope object containing more information about the custom envelope used or
     * `null` if a custom envelope was not used. Accepts an envelope ID for any customized envelope
     * with available inventory. If no inventory is available for the specified ID, the letter will
     * not be sent, and an error will be returned. If the letter has more than 6 sheets, it will be
     * sent in a blank flat envelope. Custom envelopes may be created and ordered from the
     * dashboard. This feature is exclusive to certain customers. Upgrade to the appropriate [Print
     * & Mail Edition](https://dashboard.lob.com/#/settings/editions) to gain access.
     * @return Returns the Internal CustomEnvelope
     */
    @JsonGetter("custom_envelope")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<CustomEnvelope> internalGetCustomEnvelope() {
        return this.customEnvelope;
    }

    /**
     * Getter for CustomEnvelope.
     * A nested custom envelope object containing more information about the custom envelope used or
     * `null` if a custom envelope was not used. Accepts an envelope ID for any customized envelope
     * with available inventory. If no inventory is available for the specified ID, the letter will
     * not be sent, and an error will be returned. If the letter has more than 6 sheets, it will be
     * sent in a blank flat envelope. Custom envelopes may be created and ordered from the
     * dashboard. This feature is exclusive to certain customers. Upgrade to the appropriate [Print
     * & Mail Edition](https://dashboard.lob.com/#/settings/editions) to gain access.
     * @return Returns the CustomEnvelope
     */
    public CustomEnvelope getCustomEnvelope() {
        return OptionalNullable.getFrom(customEnvelope);
    }

    /**
     * Setter for CustomEnvelope.
     * A nested custom envelope object containing more information about the custom envelope used or
     * `null` if a custom envelope was not used. Accepts an envelope ID for any customized envelope
     * with available inventory. If no inventory is available for the specified ID, the letter will
     * not be sent, and an error will be returned. If the letter has more than 6 sheets, it will be
     * sent in a blank flat envelope. Custom envelopes may be created and ordered from the
     * dashboard. This feature is exclusive to certain customers. Upgrade to the appropriate [Print
     * & Mail Edition](https://dashboard.lob.com/#/settings/editions) to gain access.
     * @param customEnvelope Value for CustomEnvelope
     */
    @JsonSetter("custom_envelope")
    public void setCustomEnvelope(CustomEnvelope customEnvelope) {
        this.customEnvelope = OptionalNullable.of(customEnvelope);
    }

    /**
     * UnSetter for CustomEnvelope.
     * A nested custom envelope object containing more information about the custom envelope used or
     * `null` if a custom envelope was not used. Accepts an envelope ID for any customized envelope
     * with available inventory. If no inventory is available for the specified ID, the letter will
     * not be sent, and an error will be returned. If the letter has more than 6 sheets, it will be
     * sent in a blank flat envelope. Custom envelopes may be created and ordered from the
     * dashboard. This feature is exclusive to certain customers. Upgrade to the appropriate [Print
     * & Mail Edition](https://dashboard.lob.com/#/settings/editions) to gain access.
     */
    public void unsetCustomEnvelope() {
        customEnvelope = null;
    }

    /**
     * Getter for To.
     * Must either be an address ID or an inline object with correct address parameters. If an
     * object is used, an address will be created, corrected, and standardized for free whenever
     * possible using our US Address Verification engine (if it is a US address), and returned back
     * with an ID. Depending on your [Print & Mail
     * Edition](https://dashboard.lob.com/#/settings/editions), US addresses may also be run through
     * [National Change of Address (NCOA)](https://lob.com/docs#ncoa). Non-US addresses will be
     * standardized into uppercase only. If a US address used does not meet your account’s [US Mail
     * strictness setting](https://dashboard.lob.com/#/settings/account), the request will fail.
     * [Lob Guide: Verification of Mailing Addresses](https://www.lob.com/guides#mailing_addresses)
     * @return Returns the Object
     */
    @JsonGetter("to")
    public Object getTo() {
        return to;
    }

    /**
     * Setter for To.
     * Must either be an address ID or an inline object with correct address parameters. If an
     * object is used, an address will be created, corrected, and standardized for free whenever
     * possible using our US Address Verification engine (if it is a US address), and returned back
     * with an ID. Depending on your [Print & Mail
     * Edition](https://dashboard.lob.com/#/settings/editions), US addresses may also be run through
     * [National Change of Address (NCOA)](https://lob.com/docs#ncoa). Non-US addresses will be
     * standardized into uppercase only. If a US address used does not meet your account’s [US Mail
     * strictness setting](https://dashboard.lob.com/#/settings/account), the request will fail.
     * [Lob Guide: Verification of Mailing Addresses](https://www.lob.com/guides#mailing_addresses)
     * @param to Value for Object
     */
    @JsonSetter("to")
    public void setTo(Object to) {
        this.to = to;
    }

    /**
     * Getter for From.
     * Must either be an address ID or an inline object with correct address parameters. Must be a
     * US address unless using a `custom_envelope`. All addresses will be standardized into
     * uppercase without being modified by verification.
     * @return Returns the Object
     */
    @JsonGetter("from")
    public Object getFrom() {
        return from;
    }

    /**
     * Setter for From.
     * Must either be an address ID or an inline object with correct address parameters. Must be a
     * US address unless using a `custom_envelope`. All addresses will be standardized into
     * uppercase without being modified by verification.
     * @param from Value for Object
     */
    @JsonSetter("from")
    public void setFrom(Object from) {
        this.from = from;
    }

    /**
     * Getter for File.
     * Notes: - HTML merge variables should not include delimiting whitespace. - All pages of a
     * supplied PDF file must be sized at 8.5"x11", while supplied HTML will be rendered and trimmed
     * to as many 8.5"x11" pages as necessary. - For design specifications, please see our
     * [PDF](https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_template.pdf)
     * and [HTML](#section/HTML-Examples) templates. - If a `custom_envelope` is used, follow [this
     * template](https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_custom_envelope.pdf).
     * - For domestic destinations, the file limit is 60 pages single-sided or 120 pages
     * double-sided. For international destinations, the file limit is 6 pages single-sided or 12
     * pages double-sided. PDFs that surpass the file limit will error, while HTML that renders more
     * pages than the file limit will be trimmed. - Any letters over 6 pages single-sided or 12
     * pages double-sided will be placed in a [flat
     * envelope](https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_flat_template.pdf)
     * instead of the standard double window envelope. See
     * [pricing](https://lob.com/pricing/print-mail#compare) for extra costs incurred.
     * @return Returns the Object
     */
    @JsonGetter("file")
    public Object getFile() {
        return file;
    }

    /**
     * Setter for File.
     * Notes: - HTML merge variables should not include delimiting whitespace. - All pages of a
     * supplied PDF file must be sized at 8.5"x11", while supplied HTML will be rendered and trimmed
     * to as many 8.5"x11" pages as necessary. - For design specifications, please see our
     * [PDF](https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_template.pdf)
     * and [HTML](#section/HTML-Examples) templates. - If a `custom_envelope` is used, follow [this
     * template](https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_custom_envelope.pdf).
     * - For domestic destinations, the file limit is 60 pages single-sided or 120 pages
     * double-sided. For international destinations, the file limit is 6 pages single-sided or 12
     * pages double-sided. PDFs that surpass the file limit will error, while HTML that renders more
     * pages than the file limit will be trimmed. - Any letters over 6 pages single-sided or 12
     * pages double-sided will be placed in a [flat
     * envelope](https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_flat_template.pdf)
     * instead of the standard double window envelope. See
     * [pricing](https://lob.com/pricing/print-mail#compare) for extra costs incurred.
     * @param file Value for Object
     */
    @JsonSetter("file")
    public void setFile(Object file) {
        this.file = file;
    }

    /**
     * Internal Getter for ExtraService.
     * Add an extra service to your letter. See
     * [pricing](https://www.lob.com/pricing/print-mail#compare) for extra costs incurred. *
     * `certified` - track and confirm delivery for domestic destinations. An extra sheet (1 PDF
     * page single-sided or 2 PDF pages double-sided) is added to the beginning of your letter for
     * address and barcode information. See here for templates: [#10
     * envelope](https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_certified_template.pdf)
     * and [flat
     * envelope](https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_certified_flat_template.pdf)
     * (used for letters over 6 pages single-sided or 12 pages double-sided). You will not be
     * charged for this extra sheet. * `certified_return_receipt` - request an electronic copy of
     * the recipient's signature to prove delivery of your certified letter * `registered` -
     * provides tracking and confirmation for international addresses
     * @return Returns the Internal ExtraService1Enum
     */
    @JsonGetter("extra_service")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<ExtraService1Enum> internalGetExtraService() {
        return this.extraService;
    }

    /**
     * Getter for ExtraService.
     * Add an extra service to your letter. See
     * [pricing](https://www.lob.com/pricing/print-mail#compare) for extra costs incurred. *
     * `certified` - track and confirm delivery for domestic destinations. An extra sheet (1 PDF
     * page single-sided or 2 PDF pages double-sided) is added to the beginning of your letter for
     * address and barcode information. See here for templates: [#10
     * envelope](https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_certified_template.pdf)
     * and [flat
     * envelope](https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_certified_flat_template.pdf)
     * (used for letters over 6 pages single-sided or 12 pages double-sided). You will not be
     * charged for this extra sheet. * `certified_return_receipt` - request an electronic copy of
     * the recipient's signature to prove delivery of your certified letter * `registered` -
     * provides tracking and confirmation for international addresses
     * @return Returns the ExtraService1Enum
     */
    public ExtraService1Enum getExtraService() {
        return OptionalNullable.getFrom(extraService);
    }

    /**
     * Setter for ExtraService.
     * Add an extra service to your letter. See
     * [pricing](https://www.lob.com/pricing/print-mail#compare) for extra costs incurred. *
     * `certified` - track and confirm delivery for domestic destinations. An extra sheet (1 PDF
     * page single-sided or 2 PDF pages double-sided) is added to the beginning of your letter for
     * address and barcode information. See here for templates: [#10
     * envelope](https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_certified_template.pdf)
     * and [flat
     * envelope](https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_certified_flat_template.pdf)
     * (used for letters over 6 pages single-sided or 12 pages double-sided). You will not be
     * charged for this extra sheet. * `certified_return_receipt` - request an electronic copy of
     * the recipient's signature to prove delivery of your certified letter * `registered` -
     * provides tracking and confirmation for international addresses
     * @param extraService Value for ExtraService1Enum
     */
    @JsonSetter("extra_service")
    public void setExtraService(ExtraService1Enum extraService) {
        this.extraService = OptionalNullable.of(extraService);
    }

    /**
     * UnSetter for ExtraService.
     * Add an extra service to your letter. See
     * [pricing](https://www.lob.com/pricing/print-mail#compare) for extra costs incurred. *
     * `certified` - track and confirm delivery for domestic destinations. An extra sheet (1 PDF
     * page single-sided or 2 PDF pages double-sided) is added to the beginning of your letter for
     * address and barcode information. See here for templates: [#10
     * envelope](https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_certified_template.pdf)
     * and [flat
     * envelope](https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_certified_flat_template.pdf)
     * (used for letters over 6 pages single-sided or 12 pages double-sided). You will not be
     * charged for this extra sheet. * `certified_return_receipt` - request an electronic copy of
     * the recipient's signature to prove delivery of your certified letter * `registered` -
     * provides tracking and confirmation for international addresses
     */
    public void unsetExtraService() {
        extraService = null;
    }

    /**
     * Getter for BillingGroupId.
     * An optional string with the billing group ID to tag your usage with. Is used for billing
     * purposes. Requires special activation to use. See [Billing Group
     * API](https://lob.github.io/lob-openapi/#tag/Billing-Groups) for more information.
     * @return Returns the String
     */
    @JsonGetter("billing_group_id")
    public String getBillingGroupId() {
        return billingGroupId;
    }

    /**
     * Setter for BillingGroupId.
     * An optional string with the billing group ID to tag your usage with. Is used for billing
     * purposes. Requires special activation to use. See [Billing Group
     * API](https://lob.github.io/lob-openapi/#tag/Billing-Groups) for more information.
     * @param billingGroupId Value for String
     */
    @JsonSetter("billing_group_id")
    public void setBillingGroupId(String billingGroupId) {
        this.billingGroupId = billingGroupId;
    }

    /**
     * Converts this LetterEditable into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "LetterEditable [" + "color=" + color + ", to=" + to + ", from=" + from + ", file="
                + file + ", description=" + description + ", metadata=" + metadata
                + ", mergeVariables=" + mergeVariables + ", sendDate=" + sendDate + ", mailType="
                + mailType + ", doubleSided=" + doubleSided + ", addressPlacement="
                + addressPlacement + ", returnEnvelope=" + returnEnvelope + ", perforatedPage="
                + perforatedPage + ", customEnvelope=" + customEnvelope + ", extraService="
                + extraService + ", billingGroupId=" + billingGroupId + "]";
    }

    /**
     * Builds a new {@link LetterEditable.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link LetterEditable.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(color, to, from, file)
                .metadata(getMetadata())
                .sendDate(getSendDate())
                .mailType(getMailType())
                .doubleSided(getDoubleSided())
                .addressPlacement(getAddressPlacement())
                .returnEnvelope(getReturnEnvelope())
                .billingGroupId(getBillingGroupId());
        builder.description = internalGetDescription();
        builder.mergeVariables = internalGetMergeVariables();
        builder.perforatedPage = internalGetPerforatedPage();
        builder.customEnvelope = internalGetCustomEnvelope();
        builder.extraService = internalGetExtraService();
        return builder;
    }

    /**
     * Class to build instances of {@link LetterEditable}.
     */
    public static class Builder {
        private boolean color;
        private Object to;
        private Object from;
        private Object file;
        private OptionalNullable<String> description;
        private Metadata metadata;
        private OptionalNullable<Object> mergeVariables;
        private Object sendDate;
        private MailTypeEnum mailType = MailTypeEnum.USPS_FIRST_CLASS;
        private Boolean doubleSided = true;
        private AddressPlacementEnum addressPlacement = AddressPlacementEnum.TOP_FIRST_PAGE;
        private Object returnEnvelope;
        private OptionalNullable<Integer> perforatedPage;
        private OptionalNullable<CustomEnvelope> customEnvelope;
        private OptionalNullable<ExtraService1Enum> extraService;
        private String billingGroupId;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  color  boolean value for color.
         * @param  to  Object value for to.
         * @param  from  Object value for from.
         * @param  file  Object value for file.
         */
        public Builder(boolean color, Object to, Object from, Object file) {
            this.color = color;
            this.to = to;
            this.from = from;
            this.file = file;
        }

        /**
         * Setter for color.
         * @param  color  boolean value for color.
         * @return Builder
         */
        public Builder color(boolean color) {
            this.color = color;
            return this;
        }

        /**
         * Setter for to.
         * @param  to  Object value for to.
         * @return Builder
         */
        public Builder to(Object to) {
            this.to = to;
            return this;
        }

        /**
         * Setter for from.
         * @param  from  Object value for from.
         * @return Builder
         */
        public Builder from(Object from) {
            this.from = from;
            return this;
        }

        /**
         * Setter for file.
         * @param  file  Object value for file.
         * @return Builder
         */
        public Builder file(Object file) {
            this.file = file;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = OptionalNullable.of(description);
            return this;
        }

        /**
         * UnSetter for description.
         * @return Builder
         */
        public Builder unsetDescription() {
            description = null;
            return this;
        }

        /**
         * Setter for metadata.
         * @param  metadata  Metadata value for metadata.
         * @return Builder
         */
        public Builder metadata(Metadata metadata) {
            this.metadata = metadata;
            return this;
        }

        /**
         * Setter for mergeVariables.
         * @param  mergeVariables  Object value for mergeVariables.
         * @return Builder
         */
        public Builder mergeVariables(Object mergeVariables) {
            this.mergeVariables = OptionalNullable.of(mergeVariables);
            return this;
        }

        /**
         * UnSetter for mergeVariables.
         * @return Builder
         */
        public Builder unsetMergeVariables() {
            mergeVariables = null;
            return this;
        }

        /**
         * Setter for sendDate.
         * @param  sendDate  Object value for sendDate.
         * @return Builder
         */
        public Builder sendDate(Object sendDate) {
            this.sendDate = sendDate;
            return this;
        }

        /**
         * Setter for mailType.
         * @param  mailType  MailTypeEnum value for mailType.
         * @return Builder
         */
        public Builder mailType(MailTypeEnum mailType) {
            this.mailType = mailType;
            return this;
        }

        /**
         * Setter for doubleSided.
         * @param  doubleSided  Boolean value for doubleSided.
         * @return Builder
         */
        public Builder doubleSided(Boolean doubleSided) {
            this.doubleSided = doubleSided;
            return this;
        }

        /**
         * Setter for addressPlacement.
         * @param  addressPlacement  AddressPlacementEnum value for addressPlacement.
         * @return Builder
         */
        public Builder addressPlacement(AddressPlacementEnum addressPlacement) {
            this.addressPlacement = addressPlacement;
            return this;
        }

        /**
         * Setter for returnEnvelope.
         * @param  returnEnvelope  Object value for returnEnvelope.
         * @return Builder
         */
        public Builder returnEnvelope(Object returnEnvelope) {
            this.returnEnvelope = returnEnvelope;
            return this;
        }

        /**
         * Setter for perforatedPage.
         * @param  perforatedPage  Integer value for perforatedPage.
         * @return Builder
         */
        public Builder perforatedPage(Integer perforatedPage) {
            this.perforatedPage = OptionalNullable.of(perforatedPage);
            return this;
        }

        /**
         * UnSetter for perforatedPage.
         * @return Builder
         */
        public Builder unsetPerforatedPage() {
            perforatedPage = null;
            return this;
        }

        /**
         * Setter for customEnvelope.
         * @param  customEnvelope  CustomEnvelope value for customEnvelope.
         * @return Builder
         */
        public Builder customEnvelope(CustomEnvelope customEnvelope) {
            this.customEnvelope = OptionalNullable.of(customEnvelope);
            return this;
        }

        /**
         * UnSetter for customEnvelope.
         * @return Builder
         */
        public Builder unsetCustomEnvelope() {
            customEnvelope = null;
            return this;
        }

        /**
         * Setter for extraService.
         * @param  extraService  ExtraService1Enum value for extraService.
         * @return Builder
         */
        public Builder extraService(ExtraService1Enum extraService) {
            this.extraService = OptionalNullable.of(extraService);
            return this;
        }

        /**
         * UnSetter for extraService.
         * @return Builder
         */
        public Builder unsetExtraService() {
            extraService = null;
            return this;
        }

        /**
         * Setter for billingGroupId.
         * @param  billingGroupId  String value for billingGroupId.
         * @return Builder
         */
        public Builder billingGroupId(String billingGroupId) {
            this.billingGroupId = billingGroupId;
            return this;
        }

        /**
         * Builds a new {@link LetterEditable} object using the set fields.
         * @return {@link LetterEditable}
         */
        public LetterEditable build() {
            return new LetterEditable(color, to, from, file, description, metadata, mergeVariables,
                    sendDate, mailType, doubleSided, addressPlacement, returnEnvelope,
                    perforatedPage, customEnvelope, extraService, billingGroupId);
        }
    }
}
