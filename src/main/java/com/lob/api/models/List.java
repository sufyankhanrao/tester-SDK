/*
 * LobAPI20200211SpecificationLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.lob.api.internal.OptionalNullable;

/**
 * This is a model class for List type.
 */
public class List {
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private String object;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<String> nextUrl;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<String> previousUrl;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Integer count;

    /**
     * Default constructor.
     */
    public List() {
    }

    /**
     * Initialization constructor.
     * @param  object  String value for object.
     * @param  nextUrl  String value for nextUrl.
     * @param  previousUrl  String value for previousUrl.
     * @param  count  Integer value for count.
     */
    public List(
            String object,
            String nextUrl,
            String previousUrl,
            Integer count) {
        this.object = object;
        this.nextUrl = OptionalNullable.of(nextUrl);
        this.previousUrl = OptionalNullable.of(previousUrl);
        this.count = count;
    }

    /**
     * Internal initialization constructor.
     */
    protected List(String object, OptionalNullable<String> nextUrl,
            OptionalNullable<String> previousUrl, Integer count) {
        this.object = object;
        this.nextUrl = nextUrl;
        this.previousUrl = previousUrl;
        this.count = count;
    }

    /**
     * Getter for Object.
     * Value is type of resource.
     * @return Returns the String
     */
    @JsonGetter("object")
    public String getObject() {
        return object;
    }

    /**
     * Setter for Object.
     * Value is type of resource.
     * @param object Value for String
     */
    @JsonSetter("object")
    public void setObject(String object) {
        this.object = object;
    }

    /**
     * Internal Getter for NextUrl.
     * Url of next page of items in list.
     * @return Returns the Internal String
     */
    @JsonGetter("next_url")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetNextUrl() {
        return this.nextUrl;
    }

    /**
     * Getter for NextUrl.
     * Url of next page of items in list.
     * @return Returns the String
     */
    public String getNextUrl() {
        return OptionalNullable.getFrom(nextUrl);
    }

    /**
     * Setter for NextUrl.
     * Url of next page of items in list.
     * @param nextUrl Value for String
     */
    @JsonSetter("next_url")
    public void setNextUrl(String nextUrl) {
        this.nextUrl = OptionalNullable.of(nextUrl);
    }

    /**
     * UnSetter for NextUrl.
     * Url of next page of items in list.
     */
    public void unsetNextUrl() {
        nextUrl = null;
    }

    /**
     * Internal Getter for PreviousUrl.
     * Url of previous page of items in list.
     * @return Returns the Internal String
     */
    @JsonGetter("previous_url")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPreviousUrl() {
        return this.previousUrl;
    }

    /**
     * Getter for PreviousUrl.
     * Url of previous page of items in list.
     * @return Returns the String
     */
    public String getPreviousUrl() {
        return OptionalNullable.getFrom(previousUrl);
    }

    /**
     * Setter for PreviousUrl.
     * Url of previous page of items in list.
     * @param previousUrl Value for String
     */
    @JsonSetter("previous_url")
    public void setPreviousUrl(String previousUrl) {
        this.previousUrl = OptionalNullable.of(previousUrl);
    }

    /**
     * UnSetter for PreviousUrl.
     * Url of previous page of items in list.
     */
    public void unsetPreviousUrl() {
        previousUrl = null;
    }

    /**
     * Getter for Count.
     * number of resources in a set
     * @return Returns the Integer
     */
    @JsonGetter("count")
    public Integer getCount() {
        return count;
    }

    /**
     * Setter for Count.
     * number of resources in a set
     * @param count Value for Integer
     */
    @JsonSetter("count")
    public void setCount(Integer count) {
        this.count = count;
    }

    /**
     * Converts this List into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "List [" + "object=" + object + ", nextUrl=" + nextUrl + ", previousUrl="
                + previousUrl + ", count=" + count + "]";
    }

    /**
     * Builds a new {@link List.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link List.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .object(getObject())
                .count(getCount());
        builder.nextUrl = internalGetNextUrl();
        builder.previousUrl = internalGetPreviousUrl();
        return builder;
    }

    /**
     * Class to build instances of {@link List}.
     */
    public static class Builder {
        private String object;
        private OptionalNullable<String> nextUrl;
        private OptionalNullable<String> previousUrl;
        private Integer count;



        /**
         * Setter for object.
         * @param  object  String value for object.
         * @return Builder
         */
        public Builder object(String object) {
            this.object = object;
            return this;
        }

        /**
         * Setter for nextUrl.
         * @param  nextUrl  String value for nextUrl.
         * @return Builder
         */
        public Builder nextUrl(String nextUrl) {
            this.nextUrl = OptionalNullable.of(nextUrl);
            return this;
        }

        /**
         * UnSetter for nextUrl.
         * @return Builder
         */
        public Builder unsetNextUrl() {
            nextUrl = null;
            return this;
        }

        /**
         * Setter for previousUrl.
         * @param  previousUrl  String value for previousUrl.
         * @return Builder
         */
        public Builder previousUrl(String previousUrl) {
            this.previousUrl = OptionalNullable.of(previousUrl);
            return this;
        }

        /**
         * UnSetter for previousUrl.
         * @return Builder
         */
        public Builder unsetPreviousUrl() {
            previousUrl = null;
            return this;
        }

        /**
         * Setter for count.
         * @param  count  Integer value for count.
         * @return Builder
         */
        public Builder count(Integer count) {
            this.count = count;
            return this;
        }

        /**
         * Builds a new {@link List} object using the set fields.
         * @return {@link List}
         */
        public List build() {
            return new List(object, nextUrl, previousUrl, count);
        }
    }
}
