/*
 * LobAPI20200211SpecificationLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.lob.api.DateTimeHelper;
import com.lob.api.internal.OptionalNullable;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;

/**
 * This is a model class for Postcard type.
 */
public class Postcard {
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<String> description;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Metadata metadata;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private MailTypeEnum mailType;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<Object> mergeVariables;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Object sendDate;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private PostcardSizeEnum size;
    private Object to;
    private String carrier;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private List<Thumbnail> thumbnails;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private LocalDate expectedDeliveryDate;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private LocalDateTime dateCreated;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private LocalDateTime dateModified;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Boolean deleted;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private AddressUs from;
    private String id;
    private Object frontTemplateId;
    private Object backTemplateId;
    private Object frontTemplateVersionId;
    private Object backTemplateVersionId;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<List<TrackingEventNormal>> trackingEvents;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private String object;
    private Object url;

    /**
     * Default constructor.
     */
    public Postcard() {
        carrier = "USPS";
        mailType = MailTypeEnum.USPS_FIRST_CLASS;
        size = PostcardSizeEnum.ENUM_4X6;
    }

    /**
     * Initialization constructor.
     * @param  to  Object value for to.
     * @param  carrier  String value for carrier.
     * @param  id  String value for id.
     * @param  frontTemplateId  Object value for frontTemplateId.
     * @param  backTemplateId  Object value for backTemplateId.
     * @param  frontTemplateVersionId  Object value for frontTemplateVersionId.
     * @param  backTemplateVersionId  Object value for backTemplateVersionId.
     * @param  url  Object value for url.
     * @param  description  String value for description.
     * @param  metadata  Metadata value for metadata.
     * @param  mailType  MailTypeEnum value for mailType.
     * @param  mergeVariables  Object value for mergeVariables.
     * @param  sendDate  Object value for sendDate.
     * @param  size  PostcardSizeEnum value for size.
     * @param  thumbnails  List of Thumbnail value for thumbnails.
     * @param  expectedDeliveryDate  LocalDate value for expectedDeliveryDate.
     * @param  dateCreated  LocalDateTime value for dateCreated.
     * @param  dateModified  LocalDateTime value for dateModified.
     * @param  deleted  Boolean value for deleted.
     * @param  from  AddressUs value for from.
     * @param  trackingEvents  List of TrackingEventNormal value for trackingEvents.
     * @param  object  String value for object.
     */
    public Postcard(
            Object to,
            String carrier,
            String id,
            Object frontTemplateId,
            Object backTemplateId,
            Object frontTemplateVersionId,
            Object backTemplateVersionId,
            Object url,
            String description,
            Metadata metadata,
            MailTypeEnum mailType,
            Object mergeVariables,
            Object sendDate,
            PostcardSizeEnum size,
            List<Thumbnail> thumbnails,
            LocalDate expectedDeliveryDate,
            LocalDateTime dateCreated,
            LocalDateTime dateModified,
            Boolean deleted,
            AddressUs from,
            List<TrackingEventNormal> trackingEvents,
            String object) {
        this.description = OptionalNullable.of(description);
        this.metadata = metadata;
        this.mailType = mailType;
        this.mergeVariables = OptionalNullable.of(mergeVariables);
        this.sendDate = sendDate;
        this.size = size;
        this.to = to;
        this.carrier = carrier;
        this.thumbnails = thumbnails;
        this.expectedDeliveryDate = expectedDeliveryDate;
        this.dateCreated = dateCreated;
        this.dateModified = dateModified;
        this.deleted = deleted;
        this.from = from;
        this.id = id;
        this.frontTemplateId = frontTemplateId;
        this.backTemplateId = backTemplateId;
        this.frontTemplateVersionId = frontTemplateVersionId;
        this.backTemplateVersionId = backTemplateVersionId;
        this.trackingEvents = OptionalNullable.of(trackingEvents);
        this.object = object;
        this.url = url;
    }

    /**
     * Internal initialization constructor.
     */
    protected Postcard(Object to, String carrier, String id, Object frontTemplateId,
            Object backTemplateId, Object frontTemplateVersionId, Object backTemplateVersionId,
            Object url, OptionalNullable<String> description, Metadata metadata,
            MailTypeEnum mailType, OptionalNullable<Object> mergeVariables, Object sendDate,
            PostcardSizeEnum size, List<Thumbnail> thumbnails, LocalDate expectedDeliveryDate,
            LocalDateTime dateCreated, LocalDateTime dateModified, Boolean deleted, AddressUs from,
            OptionalNullable<List<TrackingEventNormal>> trackingEvents, String object) {
        this.description = description;
        this.metadata = metadata;
        this.mailType = mailType;
        this.mergeVariables = mergeVariables;
        this.sendDate = sendDate;
        this.size = size;
        this.to = to;
        this.carrier = carrier;
        this.thumbnails = thumbnails;
        this.expectedDeliveryDate = expectedDeliveryDate;
        this.dateCreated = dateCreated;
        this.dateModified = dateModified;
        this.deleted = deleted;
        this.from = from;
        this.id = id;
        this.frontTemplateId = frontTemplateId;
        this.backTemplateId = backTemplateId;
        this.frontTemplateVersionId = frontTemplateVersionId;
        this.backTemplateVersionId = backTemplateVersionId;
        this.trackingEvents = trackingEvents;
        this.object = object;
        this.url = url;
    }

    /**
     * Internal Getter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     * @return Returns the Internal String
     */
    @JsonGetter("description")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDescription() {
        return this.description;
    }

    /**
     * Getter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     * @return Returns the String
     */
    public String getDescription() {
        return OptionalNullable.getFrom(description);
    }

    /**
     * Setter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = OptionalNullable.of(description);
    }

    /**
     * UnSetter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     */
    public void unsetDescription() {
        description = null;
    }

    /**
     * Getter for Metadata.
     * Use metadata to store custom information for tagging and labeling back to your internal
     * systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters
     * and values must be at most 500 characters. Neither can contain the characters `"` and `\`.
     * Nested objects are not supported. See [Metadata](#section/Metadata) for more information.
     * @return Returns the Metadata
     */
    @JsonGetter("metadata")
    public Metadata getMetadata() {
        return metadata;
    }

    /**
     * Setter for Metadata.
     * Use metadata to store custom information for tagging and labeling back to your internal
     * systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters
     * and values must be at most 500 characters. Neither can contain the characters `"` and `\`.
     * Nested objects are not supported. See [Metadata](#section/Metadata) for more information.
     * @param metadata Value for Metadata
     */
    @JsonSetter("metadata")
    public void setMetadata(Metadata metadata) {
        this.metadata = metadata;
    }

    /**
     * Getter for MailType.
     * A string designating the mail postage type: * `usps_first_class` - (default) *
     * `usps_standard` - a [cheaper option](https://lob.com/pricing/print-mail#compare) which is
     * less predictable and takes longer to deliver. `usps_standard` cannot be used with `4x6`
     * postcards or for any postcards sent outside of the United States.
     * @return Returns the MailTypeEnum
     */
    @JsonGetter("mail_type")
    public MailTypeEnum getMailType() {
        return mailType;
    }

    /**
     * Setter for MailType.
     * A string designating the mail postage type: * `usps_first_class` - (default) *
     * `usps_standard` - a [cheaper option](https://lob.com/pricing/print-mail#compare) which is
     * less predictable and takes longer to deliver. `usps_standard` cannot be used with `4x6`
     * postcards or for any postcards sent outside of the United States.
     * @param mailType Value for MailTypeEnum
     */
    @JsonSetter("mail_type")
    public void setMailType(MailTypeEnum mailType) {
        this.mailType = mailType;
    }

    /**
     * Internal Getter for MergeVariables.
     * You can input a merge variable payload object to your template to render dynamic content. For
     * example, if you have a template like: `{{variable_name}}`, pass in `{"variable_name":
     * "Harry"}` to render `Harry`. `merge_variables` must be an object. Any type of value is
     * accepted as long as the object is valid JSON; you can use `strings`, `numbers`, `booleans`,
     * `arrays`, `objects`, or `null`. The max length of the object is 25,000 characters. If you
     * call `JSON.stringify` on your object, it can be no longer than 25,000 characters. Your
     * variable names cannot contain any whitespace or any of the following special characters: `!`,
     * `"`, `#`, `%`, `&`, `'`, `(`, `)`, `*`, `+`, `,`, `/`, `;`, `&lt;`, `=`, `&gt;`, `@`, `[`, `\`,
     * `]`, `^`, `` ` ``, `{`, `|`, `}`, `~`. More instructions can be found in [our guide to using
     * html and merge
     * variables](https://lob.com/resources/guides/general/using-html-and-merge-variables).
     * Depending on your [Merge Variable strictness](https://dashboard.lob.com/#/settings/account)
     * setting, if you define variables in your HTML but do not pass them here, you will either
     * receive an error or the variable will render as an empty string.
     * @return Returns the Internal Object
     */
    @JsonGetter("merge_variables")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Object> internalGetMergeVariables() {
        return this.mergeVariables;
    }

    /**
     * Getter for MergeVariables.
     * You can input a merge variable payload object to your template to render dynamic content. For
     * example, if you have a template like: `{{variable_name}}`, pass in `{"variable_name":
     * "Harry"}` to render `Harry`. `merge_variables` must be an object. Any type of value is
     * accepted as long as the object is valid JSON; you can use `strings`, `numbers`, `booleans`,
     * `arrays`, `objects`, or `null`. The max length of the object is 25,000 characters. If you
     * call `JSON.stringify` on your object, it can be no longer than 25,000 characters. Your
     * variable names cannot contain any whitespace or any of the following special characters: `!`,
     * `"`, `#`, `%`, `&`, `'`, `(`, `)`, `*`, `+`, `,`, `/`, `;`, `&lt;`, `=`, `&gt;`, `@`, `[`, `\`,
     * `]`, `^`, `` ` ``, `{`, `|`, `}`, `~`. More instructions can be found in [our guide to using
     * html and merge
     * variables](https://lob.com/resources/guides/general/using-html-and-merge-variables).
     * Depending on your [Merge Variable strictness](https://dashboard.lob.com/#/settings/account)
     * setting, if you define variables in your HTML but do not pass them here, you will either
     * receive an error or the variable will render as an empty string.
     * @return Returns the Object
     */
    public Object getMergeVariables() {
        return OptionalNullable.getFrom(mergeVariables);
    }

    /**
     * Setter for MergeVariables.
     * You can input a merge variable payload object to your template to render dynamic content. For
     * example, if you have a template like: `{{variable_name}}`, pass in `{"variable_name":
     * "Harry"}` to render `Harry`. `merge_variables` must be an object. Any type of value is
     * accepted as long as the object is valid JSON; you can use `strings`, `numbers`, `booleans`,
     * `arrays`, `objects`, or `null`. The max length of the object is 25,000 characters. If you
     * call `JSON.stringify` on your object, it can be no longer than 25,000 characters. Your
     * variable names cannot contain any whitespace or any of the following special characters: `!`,
     * `"`, `#`, `%`, `&`, `'`, `(`, `)`, `*`, `+`, `,`, `/`, `;`, `&lt;`, `=`, `&gt;`, `@`, `[`, `\`,
     * `]`, `^`, `` ` ``, `{`, `|`, `}`, `~`. More instructions can be found in [our guide to using
     * html and merge
     * variables](https://lob.com/resources/guides/general/using-html-and-merge-variables).
     * Depending on your [Merge Variable strictness](https://dashboard.lob.com/#/settings/account)
     * setting, if you define variables in your HTML but do not pass them here, you will either
     * receive an error or the variable will render as an empty string.
     * @param mergeVariables Value for Object
     */
    @JsonSetter("merge_variables")
    public void setMergeVariables(Object mergeVariables) {
        this.mergeVariables = OptionalNullable.of(mergeVariables);
    }

    /**
     * UnSetter for MergeVariables.
     * You can input a merge variable payload object to your template to render dynamic content. For
     * example, if you have a template like: `{{variable_name}}`, pass in `{"variable_name":
     * "Harry"}` to render `Harry`. `merge_variables` must be an object. Any type of value is
     * accepted as long as the object is valid JSON; you can use `strings`, `numbers`, `booleans`,
     * `arrays`, `objects`, or `null`. The max length of the object is 25,000 characters. If you
     * call `JSON.stringify` on your object, it can be no longer than 25,000 characters. Your
     * variable names cannot contain any whitespace or any of the following special characters: `!`,
     * `"`, `#`, `%`, `&`, `'`, `(`, `)`, `*`, `+`, `,`, `/`, `;`, `&lt;`, `=`, `&gt;`, `@`, `[`, `\`,
     * `]`, `^`, `` ` ``, `{`, `|`, `}`, `~`. More instructions can be found in [our guide to using
     * html and merge
     * variables](https://lob.com/resources/guides/general/using-html-and-merge-variables).
     * Depending on your [Merge Variable strictness](https://dashboard.lob.com/#/settings/account)
     * setting, if you define variables in your HTML but do not pass them here, you will either
     * receive an error or the variable will render as an empty string.
     */
    public void unsetMergeVariables() {
        mergeVariables = null;
    }

    /**
     * Getter for SendDate.
     * A timestamp in ISO 8601 format which specifies a date after the current time and up to 180
     * days in the future to send the letter off for production. Setting a send date overrides the
     * default [cancellation window](#section/Cancellation-Windows) applied to the mailpiece. Until
     * the `send_date` has passed, the mailpiece can be canceled. If a date in the format
     * `2017-11-01` is passed, it will evaluate to midnight UTC of that date
     * (`2017-11-01T00:00:00.000Z`). If a datetime is passed, that exact time will be used. A
     * `send_date` passed with no time zone will default to UTC, while a `send_date` passed with a
     * time zone will be converted to UTC.
     * @return Returns the Object
     */
    @JsonGetter("send_date")
    public Object getSendDate() {
        return sendDate;
    }

    /**
     * Setter for SendDate.
     * A timestamp in ISO 8601 format which specifies a date after the current time and up to 180
     * days in the future to send the letter off for production. Setting a send date overrides the
     * default [cancellation window](#section/Cancellation-Windows) applied to the mailpiece. Until
     * the `send_date` has passed, the mailpiece can be canceled. If a date in the format
     * `2017-11-01` is passed, it will evaluate to midnight UTC of that date
     * (`2017-11-01T00:00:00.000Z`). If a datetime is passed, that exact time will be used. A
     * `send_date` passed with no time zone will default to UTC, while a `send_date` passed with a
     * time zone will be converted to UTC.
     * @param sendDate Value for Object
     */
    @JsonSetter("send_date")
    public void setSendDate(Object sendDate) {
        this.sendDate = sendDate;
    }

    /**
     * Getter for Size.
     * Specifies the size of the postcard. Only `4x6` postcards can be sent to international
     * destinations.
     * @return Returns the PostcardSizeEnum
     */
    @JsonGetter("size")
    public PostcardSizeEnum getSize() {
        return size;
    }

    /**
     * Setter for Size.
     * Specifies the size of the postcard. Only `4x6` postcards can be sent to international
     * destinations.
     * @param size Value for PostcardSizeEnum
     */
    @JsonSetter("size")
    public void setSize(PostcardSizeEnum size) {
        this.size = size;
    }

    /**
     * Getter for To.
     * @return Returns the Object
     */
    @JsonGetter("to")
    public Object getTo() {
        return to;
    }

    /**
     * Setter for To.
     * @param to Value for Object
     */
    @JsonSetter("to")
    public void setTo(Object to) {
        this.to = to;
    }

    /**
     * Getter for Carrier.
     * @return Returns the String
     */
    @JsonGetter("carrier")
    public String getCarrier() {
        return carrier;
    }

    /**
     * Setter for Carrier.
     * @param carrier Value for String
     */
    @JsonSetter("carrier")
    private void setCarrier(String carrier) {
        this.carrier = carrier;
    }

    /**
     * Getter for Thumbnails.
     * @return Returns the List of Thumbnail
     */
    @JsonGetter("thumbnails")
    public List<Thumbnail> getThumbnails() {
        return thumbnails;
    }

    /**
     * Setter for Thumbnails.
     * @param thumbnails Value for List of Thumbnail
     */
    @JsonSetter("thumbnails")
    public void setThumbnails(List<Thumbnail> thumbnails) {
        this.thumbnails = thumbnails;
    }

    /**
     * Getter for ExpectedDeliveryDate.
     * A date in YYYY-MM-DD format of the mailpiece's expected delivery date based on its
     * `send_date`.
     * @return Returns the LocalDate
     */
    @JsonGetter("expected_delivery_date")
    @JsonSerialize(using = DateTimeHelper.SimpleDateSerializer.class)
    public LocalDate getExpectedDeliveryDate() {
        return expectedDeliveryDate;
    }

    /**
     * Setter for ExpectedDeliveryDate.
     * A date in YYYY-MM-DD format of the mailpiece's expected delivery date based on its
     * `send_date`.
     * @param expectedDeliveryDate Value for LocalDate
     */
    @JsonSetter("expected_delivery_date")
    @JsonDeserialize(using = DateTimeHelper.SimpleDateDeserializer.class)
    public void setExpectedDeliveryDate(LocalDate expectedDeliveryDate) {
        this.expectedDeliveryDate = expectedDeliveryDate;
    }

    /**
     * Getter for DateCreated.
     * A timestamp in ISO 8601 format of the date the resource was created.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("date_created")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getDateCreated() {
        return dateCreated;
    }

    /**
     * Setter for DateCreated.
     * A timestamp in ISO 8601 format of the date the resource was created.
     * @param dateCreated Value for LocalDateTime
     */
    @JsonSetter("date_created")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setDateCreated(LocalDateTime dateCreated) {
        this.dateCreated = dateCreated;
    }

    /**
     * Getter for DateModified.
     * A timestamp in ISO 8601 format of the date the resource was last modified.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("date_modified")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getDateModified() {
        return dateModified;
    }

    /**
     * Setter for DateModified.
     * A timestamp in ISO 8601 format of the date the resource was last modified.
     * @param dateModified Value for LocalDateTime
     */
    @JsonSetter("date_modified")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setDateModified(LocalDateTime dateModified) {
        this.dateModified = dateModified;
    }

    /**
     * Getter for Deleted.
     * Only returned if the resource has been successfully deleted.
     * @return Returns the Boolean
     */
    @JsonGetter("deleted")
    public Boolean getDeleted() {
        return deleted;
    }

    /**
     * Setter for Deleted.
     * Only returned if the resource has been successfully deleted.
     * @param deleted Value for Boolean
     */
    @JsonSetter("deleted")
    public void setDeleted(Boolean deleted) {
        this.deleted = deleted;
    }

    /**
     * Getter for From.
     * @return Returns the AddressUs
     */
    @JsonGetter("from")
    public AddressUs getFrom() {
        return from;
    }

    /**
     * Setter for From.
     * @param from Value for AddressUs
     */
    @JsonSetter("from")
    public void setFrom(AddressUs from) {
        this.from = from;
    }

    /**
     * Getter for Id.
     * Unique identifier prefixed with `psc_`.
     * @return Returns the String
     */
    @JsonGetter("id")
    public String getId() {
        return id;
    }

    /**
     * Setter for Id.
     * Unique identifier prefixed with `psc_`.
     * @param id Value for String
     */
    @JsonSetter("id")
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Getter for FrontTemplateId.
     * @return Returns the Object
     */
    @JsonGetter("front_template_id")
    public Object getFrontTemplateId() {
        return frontTemplateId;
    }

    /**
     * Setter for FrontTemplateId.
     * @param frontTemplateId Value for Object
     */
    @JsonSetter("front_template_id")
    public void setFrontTemplateId(Object frontTemplateId) {
        this.frontTemplateId = frontTemplateId;
    }

    /**
     * Getter for BackTemplateId.
     * @return Returns the Object
     */
    @JsonGetter("back_template_id")
    public Object getBackTemplateId() {
        return backTemplateId;
    }

    /**
     * Setter for BackTemplateId.
     * @param backTemplateId Value for Object
     */
    @JsonSetter("back_template_id")
    public void setBackTemplateId(Object backTemplateId) {
        this.backTemplateId = backTemplateId;
    }

    /**
     * Getter for FrontTemplateVersionId.
     * @return Returns the Object
     */
    @JsonGetter("front_template_version_id")
    public Object getFrontTemplateVersionId() {
        return frontTemplateVersionId;
    }

    /**
     * Setter for FrontTemplateVersionId.
     * @param frontTemplateVersionId Value for Object
     */
    @JsonSetter("front_template_version_id")
    public void setFrontTemplateVersionId(Object frontTemplateVersionId) {
        this.frontTemplateVersionId = frontTemplateVersionId;
    }

    /**
     * Getter for BackTemplateVersionId.
     * @return Returns the Object
     */
    @JsonGetter("back_template_version_id")
    public Object getBackTemplateVersionId() {
        return backTemplateVersionId;
    }

    /**
     * Setter for BackTemplateVersionId.
     * @param backTemplateVersionId Value for Object
     */
    @JsonSetter("back_template_version_id")
    public void setBackTemplateVersionId(Object backTemplateVersionId) {
        this.backTemplateVersionId = backTemplateVersionId;
    }

    /**
     * Internal Getter for TrackingEvents.
     * An array of tracking_event objects ordered by ascending `time`. Will not be populated for
     * postcards created in test mode.
     * @return Returns the Internal List of TrackingEventNormal
     */
    @JsonGetter("tracking_events")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<List<TrackingEventNormal>> internalGetTrackingEvents() {
        return this.trackingEvents;
    }

    /**
     * Getter for TrackingEvents.
     * An array of tracking_event objects ordered by ascending `time`. Will not be populated for
     * postcards created in test mode.
     * @return Returns the List of TrackingEventNormal
     */
    public List<TrackingEventNormal> getTrackingEvents() {
        return OptionalNullable.getFrom(trackingEvents);
    }

    /**
     * Setter for TrackingEvents.
     * An array of tracking_event objects ordered by ascending `time`. Will not be populated for
     * postcards created in test mode.
     * @param trackingEvents Value for List of TrackingEventNormal
     */
    @JsonSetter("tracking_events")
    public void setTrackingEvents(List<TrackingEventNormal> trackingEvents) {
        this.trackingEvents = OptionalNullable.of(trackingEvents);
    }

    /**
     * UnSetter for TrackingEvents.
     * An array of tracking_event objects ordered by ascending `time`. Will not be populated for
     * postcards created in test mode.
     */
    public void unsetTrackingEvents() {
        trackingEvents = null;
    }

    /**
     * Getter for Object.
     * @return Returns the String
     */
    @JsonGetter("object")
    public String getObject() {
        return object;
    }

    /**
     * Setter for Object.
     * @param object Value for String
     */
    @JsonSetter("object")
    public void setObject(String object) {
        this.object = object;
    }

    /**
     * Getter for Url.
     * @return Returns the Object
     */
    @JsonGetter("url")
    public Object getUrl() {
        return url;
    }

    /**
     * Setter for Url.
     * @param url Value for Object
     */
    @JsonSetter("url")
    public void setUrl(Object url) {
        this.url = url;
    }

    /**
     * Converts this Postcard into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Postcard [" + "to=" + to + ", carrier=" + carrier + ", id=" + id
                + ", frontTemplateId=" + frontTemplateId + ", backTemplateId=" + backTemplateId
                + ", frontTemplateVersionId=" + frontTemplateVersionId + ", backTemplateVersionId="
                + backTemplateVersionId + ", url=" + url + ", description=" + description
                + ", metadata=" + metadata + ", mailType=" + mailType + ", mergeVariables="
                + mergeVariables + ", sendDate=" + sendDate + ", size=" + size + ", thumbnails="
                + thumbnails + ", expectedDeliveryDate=" + expectedDeliveryDate + ", dateCreated="
                + dateCreated + ", dateModified=" + dateModified + ", deleted=" + deleted
                + ", from=" + from + ", trackingEvents=" + trackingEvents + ", object=" + object
                + "]";
    }

    /**
     * Builds a new {@link Postcard.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Postcard.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(to, carrier, id, frontTemplateId, backTemplateId,
                frontTemplateVersionId, backTemplateVersionId, url)
                .metadata(getMetadata())
                .mailType(getMailType())
                .sendDate(getSendDate())
                .size(getSize())
                .thumbnails(getThumbnails())
                .expectedDeliveryDate(getExpectedDeliveryDate())
                .dateCreated(getDateCreated())
                .dateModified(getDateModified())
                .deleted(getDeleted())
                .from(getFrom())
                .object(getObject());
        builder.description = internalGetDescription();
        builder.mergeVariables = internalGetMergeVariables();
        builder.trackingEvents = internalGetTrackingEvents();
        return builder;
    }

    /**
     * Class to build instances of {@link Postcard}.
     */
    public static class Builder {
        private Object to;
        private String carrier = "USPS";
        private String id;
        private Object frontTemplateId;
        private Object backTemplateId;
        private Object frontTemplateVersionId;
        private Object backTemplateVersionId;
        private Object url;
        private OptionalNullable<String> description;
        private Metadata metadata;
        private MailTypeEnum mailType = MailTypeEnum.USPS_FIRST_CLASS;
        private OptionalNullable<Object> mergeVariables;
        private Object sendDate;
        private PostcardSizeEnum size = PostcardSizeEnum.ENUM_4X6;
        private List<Thumbnail> thumbnails;
        private LocalDate expectedDeliveryDate;
        private LocalDateTime dateCreated;
        private LocalDateTime dateModified;
        private Boolean deleted;
        private AddressUs from;
        private OptionalNullable<List<TrackingEventNormal>> trackingEvents;
        private String object;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  to  Object value for to.
         * @param  carrier  String value for carrier.
         * @param  id  String value for id.
         * @param  frontTemplateId  Object value for frontTemplateId.
         * @param  backTemplateId  Object value for backTemplateId.
         * @param  frontTemplateVersionId  Object value for frontTemplateVersionId.
         * @param  backTemplateVersionId  Object value for backTemplateVersionId.
         * @param  url  Object value for url.
         */
        public Builder(Object to, String carrier, String id, Object frontTemplateId,
                Object backTemplateId, Object frontTemplateVersionId, Object backTemplateVersionId,
                Object url) {
            this.to = to;
            this.carrier = carrier;
            this.id = id;
            this.frontTemplateId = frontTemplateId;
            this.backTemplateId = backTemplateId;
            this.frontTemplateVersionId = frontTemplateVersionId;
            this.backTemplateVersionId = backTemplateVersionId;
            this.url = url;
        }

        /**
         * Setter for to.
         * @param  to  Object value for to.
         * @return Builder
         */
        public Builder to(Object to) {
            this.to = to;
            return this;
        }

        /**
         * Setter for carrier.
         * @param  carrier  String value for carrier.
         * @return Builder
         */
        public Builder carrier(String carrier) {
            this.carrier = carrier;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  String value for id.
         * @return Builder
         */
        public Builder id(String id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for frontTemplateId.
         * @param  frontTemplateId  Object value for frontTemplateId.
         * @return Builder
         */
        public Builder frontTemplateId(Object frontTemplateId) {
            this.frontTemplateId = frontTemplateId;
            return this;
        }

        /**
         * Setter for backTemplateId.
         * @param  backTemplateId  Object value for backTemplateId.
         * @return Builder
         */
        public Builder backTemplateId(Object backTemplateId) {
            this.backTemplateId = backTemplateId;
            return this;
        }

        /**
         * Setter for frontTemplateVersionId.
         * @param  frontTemplateVersionId  Object value for frontTemplateVersionId.
         * @return Builder
         */
        public Builder frontTemplateVersionId(Object frontTemplateVersionId) {
            this.frontTemplateVersionId = frontTemplateVersionId;
            return this;
        }

        /**
         * Setter for backTemplateVersionId.
         * @param  backTemplateVersionId  Object value for backTemplateVersionId.
         * @return Builder
         */
        public Builder backTemplateVersionId(Object backTemplateVersionId) {
            this.backTemplateVersionId = backTemplateVersionId;
            return this;
        }

        /**
         * Setter for url.
         * @param  url  Object value for url.
         * @return Builder
         */
        public Builder url(Object url) {
            this.url = url;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = OptionalNullable.of(description);
            return this;
        }

        /**
         * UnSetter for description.
         * @return Builder
         */
        public Builder unsetDescription() {
            description = null;
            return this;
        }

        /**
         * Setter for metadata.
         * @param  metadata  Metadata value for metadata.
         * @return Builder
         */
        public Builder metadata(Metadata metadata) {
            this.metadata = metadata;
            return this;
        }

        /**
         * Setter for mailType.
         * @param  mailType  MailTypeEnum value for mailType.
         * @return Builder
         */
        public Builder mailType(MailTypeEnum mailType) {
            this.mailType = mailType;
            return this;
        }

        /**
         * Setter for mergeVariables.
         * @param  mergeVariables  Object value for mergeVariables.
         * @return Builder
         */
        public Builder mergeVariables(Object mergeVariables) {
            this.mergeVariables = OptionalNullable.of(mergeVariables);
            return this;
        }

        /**
         * UnSetter for mergeVariables.
         * @return Builder
         */
        public Builder unsetMergeVariables() {
            mergeVariables = null;
            return this;
        }

        /**
         * Setter for sendDate.
         * @param  sendDate  Object value for sendDate.
         * @return Builder
         */
        public Builder sendDate(Object sendDate) {
            this.sendDate = sendDate;
            return this;
        }

        /**
         * Setter for size.
         * @param  size  PostcardSizeEnum value for size.
         * @return Builder
         */
        public Builder size(PostcardSizeEnum size) {
            this.size = size;
            return this;
        }

        /**
         * Setter for thumbnails.
         * @param  thumbnails  List of Thumbnail value for thumbnails.
         * @return Builder
         */
        public Builder thumbnails(List<Thumbnail> thumbnails) {
            this.thumbnails = thumbnails;
            return this;
        }

        /**
         * Setter for expectedDeliveryDate.
         * @param  expectedDeliveryDate  LocalDate value for expectedDeliveryDate.
         * @return Builder
         */
        public Builder expectedDeliveryDate(LocalDate expectedDeliveryDate) {
            this.expectedDeliveryDate = expectedDeliveryDate;
            return this;
        }

        /**
         * Setter for dateCreated.
         * @param  dateCreated  LocalDateTime value for dateCreated.
         * @return Builder
         */
        public Builder dateCreated(LocalDateTime dateCreated) {
            this.dateCreated = dateCreated;
            return this;
        }

        /**
         * Setter for dateModified.
         * @param  dateModified  LocalDateTime value for dateModified.
         * @return Builder
         */
        public Builder dateModified(LocalDateTime dateModified) {
            this.dateModified = dateModified;
            return this;
        }

        /**
         * Setter for deleted.
         * @param  deleted  Boolean value for deleted.
         * @return Builder
         */
        public Builder deleted(Boolean deleted) {
            this.deleted = deleted;
            return this;
        }

        /**
         * Setter for from.
         * @param  from  AddressUs value for from.
         * @return Builder
         */
        public Builder from(AddressUs from) {
            this.from = from;
            return this;
        }

        /**
         * Setter for trackingEvents.
         * @param  trackingEvents  List of TrackingEventNormal value for trackingEvents.
         * @return Builder
         */
        public Builder trackingEvents(List<TrackingEventNormal> trackingEvents) {
            this.trackingEvents = OptionalNullable.of(trackingEvents);
            return this;
        }

        /**
         * UnSetter for trackingEvents.
         * @return Builder
         */
        public Builder unsetTrackingEvents() {
            trackingEvents = null;
            return this;
        }

        /**
         * Setter for object.
         * @param  object  String value for object.
         * @return Builder
         */
        public Builder object(String object) {
            this.object = object;
            return this;
        }

        /**
         * Builds a new {@link Postcard} object using the set fields.
         * @return {@link Postcard}
         */
        public Postcard build() {
            return new Postcard(to, carrier, id, frontTemplateId, backTemplateId,
                    frontTemplateVersionId, backTemplateVersionId, url, description, metadata,
                    mailType, mergeVariables, sendDate, size, thumbnails, expectedDeliveryDate,
                    dateCreated, dateModified, deleted, from, trackingEvents, object);
        }
    }
}
