/*
 * LobAPI20200211SpecificationLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.lob.api.internal.OptionalNullable;

/**
 * This is a model class for PostcardEditable type.
 */
public class PostcardEditable {
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<String> description;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Metadata metadata;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private MailTypeEnum mailType;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<Object> mergeVariables;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Object sendDate;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private PostcardSizeEnum size;
    private Object to;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Object from;
    private Object front;
    private Object back;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private String billingGroupId;

    /**
     * Default constructor.
     */
    public PostcardEditable() {
        mailType = MailTypeEnum.USPS_FIRST_CLASS;
        size = PostcardSizeEnum.ENUM_4X6;
    }

    /**
     * Initialization constructor.
     * @param  to  Object value for to.
     * @param  front  Object value for front.
     * @param  back  Object value for back.
     * @param  description  String value for description.
     * @param  metadata  Metadata value for metadata.
     * @param  mailType  MailTypeEnum value for mailType.
     * @param  mergeVariables  Object value for mergeVariables.
     * @param  sendDate  Object value for sendDate.
     * @param  size  PostcardSizeEnum value for size.
     * @param  from  Object value for from.
     * @param  billingGroupId  String value for billingGroupId.
     */
    public PostcardEditable(
            Object to,
            Object front,
            Object back,
            String description,
            Metadata metadata,
            MailTypeEnum mailType,
            Object mergeVariables,
            Object sendDate,
            PostcardSizeEnum size,
            Object from,
            String billingGroupId) {
        this.description = OptionalNullable.of(description);
        this.metadata = metadata;
        this.mailType = mailType;
        this.mergeVariables = OptionalNullable.of(mergeVariables);
        this.sendDate = sendDate;
        this.size = size;
        this.to = to;
        this.from = from;
        this.front = front;
        this.back = back;
        this.billingGroupId = billingGroupId;
    }

    /**
     * Internal initialization constructor.
     */
    protected PostcardEditable(Object to, Object front, Object back,
            OptionalNullable<String> description, Metadata metadata, MailTypeEnum mailType,
            OptionalNullable<Object> mergeVariables, Object sendDate, PostcardSizeEnum size,
            Object from, String billingGroupId) {
        this.description = description;
        this.metadata = metadata;
        this.mailType = mailType;
        this.mergeVariables = mergeVariables;
        this.sendDate = sendDate;
        this.size = size;
        this.to = to;
        this.from = from;
        this.front = front;
        this.back = back;
        this.billingGroupId = billingGroupId;
    }

    /**
     * Internal Getter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     * @return Returns the Internal String
     */
    @JsonGetter("description")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDescription() {
        return this.description;
    }

    /**
     * Getter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     * @return Returns the String
     */
    public String getDescription() {
        return OptionalNullable.getFrom(description);
    }

    /**
     * Setter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = OptionalNullable.of(description);
    }

    /**
     * UnSetter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     */
    public void unsetDescription() {
        description = null;
    }

    /**
     * Getter for Metadata.
     * Use metadata to store custom information for tagging and labeling back to your internal
     * systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters
     * and values must be at most 500 characters. Neither can contain the characters `"` and `\`.
     * Nested objects are not supported. See [Metadata](#section/Metadata) for more information.
     * @return Returns the Metadata
     */
    @JsonGetter("metadata")
    public Metadata getMetadata() {
        return metadata;
    }

    /**
     * Setter for Metadata.
     * Use metadata to store custom information for tagging and labeling back to your internal
     * systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters
     * and values must be at most 500 characters. Neither can contain the characters `"` and `\`.
     * Nested objects are not supported. See [Metadata](#section/Metadata) for more information.
     * @param metadata Value for Metadata
     */
    @JsonSetter("metadata")
    public void setMetadata(Metadata metadata) {
        this.metadata = metadata;
    }

    /**
     * Getter for MailType.
     * A string designating the mail postage type: * `usps_first_class` - (default) *
     * `usps_standard` - a [cheaper option](https://lob.com/pricing/print-mail#compare) which is
     * less predictable and takes longer to deliver. `usps_standard` cannot be used with `4x6`
     * postcards or for any postcards sent outside of the United States.
     * @return Returns the MailTypeEnum
     */
    @JsonGetter("mail_type")
    public MailTypeEnum getMailType() {
        return mailType;
    }

    /**
     * Setter for MailType.
     * A string designating the mail postage type: * `usps_first_class` - (default) *
     * `usps_standard` - a [cheaper option](https://lob.com/pricing/print-mail#compare) which is
     * less predictable and takes longer to deliver. `usps_standard` cannot be used with `4x6`
     * postcards or for any postcards sent outside of the United States.
     * @param mailType Value for MailTypeEnum
     */
    @JsonSetter("mail_type")
    public void setMailType(MailTypeEnum mailType) {
        this.mailType = mailType;
    }

    /**
     * Internal Getter for MergeVariables.
     * You can input a merge variable payload object to your template to render dynamic content. For
     * example, if you have a template like: `{{variable_name}}`, pass in `{"variable_name":
     * "Harry"}` to render `Harry`. `merge_variables` must be an object. Any type of value is
     * accepted as long as the object is valid JSON; you can use `strings`, `numbers`, `booleans`,
     * `arrays`, `objects`, or `null`. The max length of the object is 25,000 characters. If you
     * call `JSON.stringify` on your object, it can be no longer than 25,000 characters. Your
     * variable names cannot contain any whitespace or any of the following special characters: `!`,
     * `"`, `#`, `%`, `&`, `'`, `(`, `)`, `*`, `+`, `,`, `/`, `;`, `&lt;`, `=`, `&gt;`, `@`, `[`, `\`,
     * `]`, `^`, `` ` ``, `{`, `|`, `}`, `~`. More instructions can be found in [our guide to using
     * html and merge
     * variables](https://lob.com/resources/guides/general/using-html-and-merge-variables).
     * Depending on your [Merge Variable strictness](https://dashboard.lob.com/#/settings/account)
     * setting, if you define variables in your HTML but do not pass them here, you will either
     * receive an error or the variable will render as an empty string.
     * @return Returns the Internal Object
     */
    @JsonGetter("merge_variables")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Object> internalGetMergeVariables() {
        return this.mergeVariables;
    }

    /**
     * Getter for MergeVariables.
     * You can input a merge variable payload object to your template to render dynamic content. For
     * example, if you have a template like: `{{variable_name}}`, pass in `{"variable_name":
     * "Harry"}` to render `Harry`. `merge_variables` must be an object. Any type of value is
     * accepted as long as the object is valid JSON; you can use `strings`, `numbers`, `booleans`,
     * `arrays`, `objects`, or `null`. The max length of the object is 25,000 characters. If you
     * call `JSON.stringify` on your object, it can be no longer than 25,000 characters. Your
     * variable names cannot contain any whitespace or any of the following special characters: `!`,
     * `"`, `#`, `%`, `&`, `'`, `(`, `)`, `*`, `+`, `,`, `/`, `;`, `&lt;`, `=`, `&gt;`, `@`, `[`, `\`,
     * `]`, `^`, `` ` ``, `{`, `|`, `}`, `~`. More instructions can be found in [our guide to using
     * html and merge
     * variables](https://lob.com/resources/guides/general/using-html-and-merge-variables).
     * Depending on your [Merge Variable strictness](https://dashboard.lob.com/#/settings/account)
     * setting, if you define variables in your HTML but do not pass them here, you will either
     * receive an error or the variable will render as an empty string.
     * @return Returns the Object
     */
    public Object getMergeVariables() {
        return OptionalNullable.getFrom(mergeVariables);
    }

    /**
     * Setter for MergeVariables.
     * You can input a merge variable payload object to your template to render dynamic content. For
     * example, if you have a template like: `{{variable_name}}`, pass in `{"variable_name":
     * "Harry"}` to render `Harry`. `merge_variables` must be an object. Any type of value is
     * accepted as long as the object is valid JSON; you can use `strings`, `numbers`, `booleans`,
     * `arrays`, `objects`, or `null`. The max length of the object is 25,000 characters. If you
     * call `JSON.stringify` on your object, it can be no longer than 25,000 characters. Your
     * variable names cannot contain any whitespace or any of the following special characters: `!`,
     * `"`, `#`, `%`, `&`, `'`, `(`, `)`, `*`, `+`, `,`, `/`, `;`, `&lt;`, `=`, `&gt;`, `@`, `[`, `\`,
     * `]`, `^`, `` ` ``, `{`, `|`, `}`, `~`. More instructions can be found in [our guide to using
     * html and merge
     * variables](https://lob.com/resources/guides/general/using-html-and-merge-variables).
     * Depending on your [Merge Variable strictness](https://dashboard.lob.com/#/settings/account)
     * setting, if you define variables in your HTML but do not pass them here, you will either
     * receive an error or the variable will render as an empty string.
     * @param mergeVariables Value for Object
     */
    @JsonSetter("merge_variables")
    public void setMergeVariables(Object mergeVariables) {
        this.mergeVariables = OptionalNullable.of(mergeVariables);
    }

    /**
     * UnSetter for MergeVariables.
     * You can input a merge variable payload object to your template to render dynamic content. For
     * example, if you have a template like: `{{variable_name}}`, pass in `{"variable_name":
     * "Harry"}` to render `Harry`. `merge_variables` must be an object. Any type of value is
     * accepted as long as the object is valid JSON; you can use `strings`, `numbers`, `booleans`,
     * `arrays`, `objects`, or `null`. The max length of the object is 25,000 characters. If you
     * call `JSON.stringify` on your object, it can be no longer than 25,000 characters. Your
     * variable names cannot contain any whitespace or any of the following special characters: `!`,
     * `"`, `#`, `%`, `&`, `'`, `(`, `)`, `*`, `+`, `,`, `/`, `;`, `&lt;`, `=`, `&gt;`, `@`, `[`, `\`,
     * `]`, `^`, `` ` ``, `{`, `|`, `}`, `~`. More instructions can be found in [our guide to using
     * html and merge
     * variables](https://lob.com/resources/guides/general/using-html-and-merge-variables).
     * Depending on your [Merge Variable strictness](https://dashboard.lob.com/#/settings/account)
     * setting, if you define variables in your HTML but do not pass them here, you will either
     * receive an error or the variable will render as an empty string.
     */
    public void unsetMergeVariables() {
        mergeVariables = null;
    }

    /**
     * Getter for SendDate.
     * A timestamp in ISO 8601 format which specifies a date after the current time and up to 180
     * days in the future to send the letter off for production. Setting a send date overrides the
     * default [cancellation window](#section/Cancellation-Windows) applied to the mailpiece. Until
     * the `send_date` has passed, the mailpiece can be canceled. If a date in the format
     * `2017-11-01` is passed, it will evaluate to midnight UTC of that date
     * (`2017-11-01T00:00:00.000Z`). If a datetime is passed, that exact time will be used. A
     * `send_date` passed with no time zone will default to UTC, while a `send_date` passed with a
     * time zone will be converted to UTC.
     * @return Returns the Object
     */
    @JsonGetter("send_date")
    public Object getSendDate() {
        return sendDate;
    }

    /**
     * Setter for SendDate.
     * A timestamp in ISO 8601 format which specifies a date after the current time and up to 180
     * days in the future to send the letter off for production. Setting a send date overrides the
     * default [cancellation window](#section/Cancellation-Windows) applied to the mailpiece. Until
     * the `send_date` has passed, the mailpiece can be canceled. If a date in the format
     * `2017-11-01` is passed, it will evaluate to midnight UTC of that date
     * (`2017-11-01T00:00:00.000Z`). If a datetime is passed, that exact time will be used. A
     * `send_date` passed with no time zone will default to UTC, while a `send_date` passed with a
     * time zone will be converted to UTC.
     * @param sendDate Value for Object
     */
    @JsonSetter("send_date")
    public void setSendDate(Object sendDate) {
        this.sendDate = sendDate;
    }

    /**
     * Getter for Size.
     * Specifies the size of the postcard. Only `4x6` postcards can be sent to international
     * destinations.
     * @return Returns the PostcardSizeEnum
     */
    @JsonGetter("size")
    public PostcardSizeEnum getSize() {
        return size;
    }

    /**
     * Setter for Size.
     * Specifies the size of the postcard. Only `4x6` postcards can be sent to international
     * destinations.
     * @param size Value for PostcardSizeEnum
     */
    @JsonSetter("size")
    public void setSize(PostcardSizeEnum size) {
        this.size = size;
    }

    /**
     * Getter for To.
     * Must either be an address ID or an inline object with correct address parameters. If an
     * object is used, an address will be created, corrected, and standardized for free whenever
     * possible using our US Address Verification engine (if it is a US address), and returned back
     * with an ID. Depending on your [Print & Mail
     * Edition](https://dashboard.lob.com/#/settings/editions), US addresses may also be run through
     * [National Change of Address (NCOA)](https://lob.com/docs#ncoa). Non-US addresses will be
     * standardized into uppercase only. If a US address used does not meet your account’s [US Mail
     * strictness setting](https://dashboard.lob.com/#/settings/account), the request will fail.
     * [Lob Guide: Verification of Mailing Addresses](https://www.lob.com/guides#mailing_addresses)
     * @return Returns the Object
     */
    @JsonGetter("to")
    public Object getTo() {
        return to;
    }

    /**
     * Setter for To.
     * Must either be an address ID or an inline object with correct address parameters. If an
     * object is used, an address will be created, corrected, and standardized for free whenever
     * possible using our US Address Verification engine (if it is a US address), and returned back
     * with an ID. Depending on your [Print & Mail
     * Edition](https://dashboard.lob.com/#/settings/editions), US addresses may also be run through
     * [National Change of Address (NCOA)](https://lob.com/docs#ncoa). Non-US addresses will be
     * standardized into uppercase only. If a US address used does not meet your account’s [US Mail
     * strictness setting](https://dashboard.lob.com/#/settings/account), the request will fail.
     * [Lob Guide: Verification of Mailing Addresses](https://www.lob.com/guides#mailing_addresses)
     * @param to Value for Object
     */
    @JsonSetter("to")
    public void setTo(Object to) {
        this.to = to;
    }

    /**
     * Getter for From.
     * *Required* if `to` address is international. Must either be an address ID or an inline object
     * with correct address parameters. Must either be an address ID or an inline object with
     * correct address parameters. All addresses will be standardized into uppercase without being
     * modified by verification.
     * @return Returns the Object
     */
    @JsonGetter("from")
    public Object getFrom() {
        return from;
    }

    /**
     * Setter for From.
     * *Required* if `to` address is international. Must either be an address ID or an inline object
     * with correct address parameters. Must either be an address ID or an inline object with
     * correct address parameters. All addresses will be standardized into uppercase without being
     * modified by verification.
     * @param from Value for Object
     */
    @JsonSetter("from")
    public void setFrom(Object from) {
        this.from = from;
    }

    /**
     * Getter for Front.
     * The artwork to use as the front of your postcard. Notes: - HTML merge variables should not
     * include delimiting whitespace. - PDF, PNG, and JPGs must be sized at 4.25"x6.25",
     * 6.25"x9.25", or 6.25"x11.25" at 300 DPI, while supplied HTML will be rendered to the
     * specified `size`. See [here](#section/HTML-Examples) for HTML examples.
     * @return Returns the Object
     */
    @JsonGetter("front")
    public Object getFront() {
        return front;
    }

    /**
     * Setter for Front.
     * The artwork to use as the front of your postcard. Notes: - HTML merge variables should not
     * include delimiting whitespace. - PDF, PNG, and JPGs must be sized at 4.25"x6.25",
     * 6.25"x9.25", or 6.25"x11.25" at 300 DPI, while supplied HTML will be rendered to the
     * specified `size`. See [here](#section/HTML-Examples) for HTML examples.
     * @param front Value for Object
     */
    @JsonSetter("front")
    public void setFront(Object front) {
        this.front = front;
    }

    /**
     * Getter for Back.
     * The artwork to use as the back of your postcard. Notes: - HTML merge variables should not
     * include delimiting whitespace. - PDF, PNG, and JPGs must be sized at 4.25"x6.25",
     * 6.25"x9.25", or 6.25"x11.25" at 300 DPI, while supplied HTML will be rendered to the
     * specified `size`. - Be sure to leave room for address and postage information by following
     * the templates provided here: - [4x6
     * template](https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/postcards/4x6_postcard.pdf)
     * - [6x9
     * template](https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/postcards/6x9_postcard.pdf)
     * - [6x11
     * template](https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/postcards/6x11_postcard.pdf)
     * See [here](#section/HTML-Examples) for HTML examples.
     * @return Returns the Object
     */
    @JsonGetter("back")
    public Object getBack() {
        return back;
    }

    /**
     * Setter for Back.
     * The artwork to use as the back of your postcard. Notes: - HTML merge variables should not
     * include delimiting whitespace. - PDF, PNG, and JPGs must be sized at 4.25"x6.25",
     * 6.25"x9.25", or 6.25"x11.25" at 300 DPI, while supplied HTML will be rendered to the
     * specified `size`. - Be sure to leave room for address and postage information by following
     * the templates provided here: - [4x6
     * template](https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/postcards/4x6_postcard.pdf)
     * - [6x9
     * template](https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/postcards/6x9_postcard.pdf)
     * - [6x11
     * template](https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/postcards/6x11_postcard.pdf)
     * See [here](#section/HTML-Examples) for HTML examples.
     * @param back Value for Object
     */
    @JsonSetter("back")
    public void setBack(Object back) {
        this.back = back;
    }

    /**
     * Getter for BillingGroupId.
     * An optional string with the billing group ID to tag your usage with. Is used for billing
     * purposes. Requires special activation to use. See [Billing Group
     * API](https://lob.github.io/lob-openapi/#tag/Billing-Groups) for more information.
     * @return Returns the String
     */
    @JsonGetter("billing_group_id")
    public String getBillingGroupId() {
        return billingGroupId;
    }

    /**
     * Setter for BillingGroupId.
     * An optional string with the billing group ID to tag your usage with. Is used for billing
     * purposes. Requires special activation to use. See [Billing Group
     * API](https://lob.github.io/lob-openapi/#tag/Billing-Groups) for more information.
     * @param billingGroupId Value for String
     */
    @JsonSetter("billing_group_id")
    public void setBillingGroupId(String billingGroupId) {
        this.billingGroupId = billingGroupId;
    }

    /**
     * Converts this PostcardEditable into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "PostcardEditable [" + "to=" + to + ", front=" + front + ", back=" + back
                + ", description=" + description + ", metadata=" + metadata + ", mailType="
                + mailType + ", mergeVariables=" + mergeVariables + ", sendDate=" + sendDate
                + ", size=" + size + ", from=" + from + ", billingGroupId=" + billingGroupId + "]";
    }

    /**
     * Builds a new {@link PostcardEditable.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link PostcardEditable.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(to, front, back)
                .metadata(getMetadata())
                .mailType(getMailType())
                .sendDate(getSendDate())
                .size(getSize())
                .from(getFrom())
                .billingGroupId(getBillingGroupId());
        builder.description = internalGetDescription();
        builder.mergeVariables = internalGetMergeVariables();
        return builder;
    }

    /**
     * Class to build instances of {@link PostcardEditable}.
     */
    public static class Builder {
        private Object to;
        private Object front;
        private Object back;
        private OptionalNullable<String> description;
        private Metadata metadata;
        private MailTypeEnum mailType = MailTypeEnum.USPS_FIRST_CLASS;
        private OptionalNullable<Object> mergeVariables;
        private Object sendDate;
        private PostcardSizeEnum size = PostcardSizeEnum.ENUM_4X6;
        private Object from;
        private String billingGroupId;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  to  Object value for to.
         * @param  front  Object value for front.
         * @param  back  Object value for back.
         */
        public Builder(Object to, Object front, Object back) {
            this.to = to;
            this.front = front;
            this.back = back;
        }

        /**
         * Setter for to.
         * @param  to  Object value for to.
         * @return Builder
         */
        public Builder to(Object to) {
            this.to = to;
            return this;
        }

        /**
         * Setter for front.
         * @param  front  Object value for front.
         * @return Builder
         */
        public Builder front(Object front) {
            this.front = front;
            return this;
        }

        /**
         * Setter for back.
         * @param  back  Object value for back.
         * @return Builder
         */
        public Builder back(Object back) {
            this.back = back;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = OptionalNullable.of(description);
            return this;
        }

        /**
         * UnSetter for description.
         * @return Builder
         */
        public Builder unsetDescription() {
            description = null;
            return this;
        }

        /**
         * Setter for metadata.
         * @param  metadata  Metadata value for metadata.
         * @return Builder
         */
        public Builder metadata(Metadata metadata) {
            this.metadata = metadata;
            return this;
        }

        /**
         * Setter for mailType.
         * @param  mailType  MailTypeEnum value for mailType.
         * @return Builder
         */
        public Builder mailType(MailTypeEnum mailType) {
            this.mailType = mailType;
            return this;
        }

        /**
         * Setter for mergeVariables.
         * @param  mergeVariables  Object value for mergeVariables.
         * @return Builder
         */
        public Builder mergeVariables(Object mergeVariables) {
            this.mergeVariables = OptionalNullable.of(mergeVariables);
            return this;
        }

        /**
         * UnSetter for mergeVariables.
         * @return Builder
         */
        public Builder unsetMergeVariables() {
            mergeVariables = null;
            return this;
        }

        /**
         * Setter for sendDate.
         * @param  sendDate  Object value for sendDate.
         * @return Builder
         */
        public Builder sendDate(Object sendDate) {
            this.sendDate = sendDate;
            return this;
        }

        /**
         * Setter for size.
         * @param  size  PostcardSizeEnum value for size.
         * @return Builder
         */
        public Builder size(PostcardSizeEnum size) {
            this.size = size;
            return this;
        }

        /**
         * Setter for from.
         * @param  from  Object value for from.
         * @return Builder
         */
        public Builder from(Object from) {
            this.from = from;
            return this;
        }

        /**
         * Setter for billingGroupId.
         * @param  billingGroupId  String value for billingGroupId.
         * @return Builder
         */
        public Builder billingGroupId(String billingGroupId) {
            this.billingGroupId = billingGroupId;
            return this;
        }

        /**
         * Builds a new {@link PostcardEditable} object using the set fields.
         * @return {@link PostcardEditable}
         */
        public PostcardEditable build() {
            return new PostcardEditable(to, front, back, description, metadata, mailType,
                    mergeVariables, sendDate, size, from, billingGroupId);
        }
    }
}
