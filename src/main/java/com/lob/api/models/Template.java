/*
 * LobAPI20200211SpecificationLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.lob.api.DateTimeHelper;
import com.lob.api.internal.OptionalNullable;
import java.time.LocalDateTime;
import java.util.List;

/**
 * This is a model class for Template type.
 */
public class Template {
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<String> description;
    private String id;
    private List<TemplateVersion> versions;
    private Object publishedVersion;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private String object;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Metadata metadata;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private LocalDateTime dateCreated;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private LocalDateTime dateModified;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Boolean deleted;

    /**
     * Default constructor.
     */
    public Template() {
    }

    /**
     * Initialization constructor.
     * @param  id  String value for id.
     * @param  versions  List of TemplateVersion value for versions.
     * @param  publishedVersion  Object value for publishedVersion.
     * @param  description  String value for description.
     * @param  object  String value for object.
     * @param  metadata  Metadata value for metadata.
     * @param  dateCreated  LocalDateTime value for dateCreated.
     * @param  dateModified  LocalDateTime value for dateModified.
     * @param  deleted  Boolean value for deleted.
     */
    public Template(
            String id,
            List<TemplateVersion> versions,
            Object publishedVersion,
            String description,
            String object,
            Metadata metadata,
            LocalDateTime dateCreated,
            LocalDateTime dateModified,
            Boolean deleted) {
        this.description = OptionalNullable.of(description);
        this.id = id;
        this.versions = versions;
        this.publishedVersion = publishedVersion;
        this.object = object;
        this.metadata = metadata;
        this.dateCreated = dateCreated;
        this.dateModified = dateModified;
        this.deleted = deleted;
    }

    /**
     * Internal initialization constructor.
     */
    protected Template(String id, List<TemplateVersion> versions, Object publishedVersion,
            OptionalNullable<String> description, String object, Metadata metadata,
            LocalDateTime dateCreated, LocalDateTime dateModified, Boolean deleted) {
        this.description = description;
        this.id = id;
        this.versions = versions;
        this.publishedVersion = publishedVersion;
        this.object = object;
        this.metadata = metadata;
        this.dateCreated = dateCreated;
        this.dateModified = dateModified;
        this.deleted = deleted;
    }

    /**
     * Internal Getter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     * @return Returns the Internal String
     */
    @JsonGetter("description")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDescription() {
        return this.description;
    }

    /**
     * Getter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     * @return Returns the String
     */
    public String getDescription() {
        return OptionalNullable.getFrom(description);
    }

    /**
     * Setter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = OptionalNullable.of(description);
    }

    /**
     * UnSetter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     */
    public void unsetDescription() {
        description = null;
    }

    /**
     * Getter for Id.
     * Unique identifier prefixed with `tmpl_`. ID of a saved [HTML
     * template](#section/HTML-Templates).
     * @return Returns the String
     */
    @JsonGetter("id")
    public String getId() {
        return id;
    }

    /**
     * Setter for Id.
     * Unique identifier prefixed with `tmpl_`. ID of a saved [HTML
     * template](#section/HTML-Templates).
     * @param id Value for String
     */
    @JsonSetter("id")
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Getter for Versions.
     * An array of all non-deleted [version objects](#tag/Template-Versions) associated with the
     * template.
     * @return Returns the List of TemplateVersion
     */
    @JsonGetter("versions")
    public List<TemplateVersion> getVersions() {
        return versions;
    }

    /**
     * Setter for Versions.
     * An array of all non-deleted [version objects](#tag/Template-Versions) associated with the
     * template.
     * @param versions Value for List of TemplateVersion
     */
    @JsonSetter("versions")
    public void setVersions(List<TemplateVersion> versions) {
        this.versions = versions;
    }

    /**
     * Getter for PublishedVersion.
     * @return Returns the Object
     */
    @JsonGetter("published_version")
    public Object getPublishedVersion() {
        return publishedVersion;
    }

    /**
     * Setter for PublishedVersion.
     * @param publishedVersion Value for Object
     */
    @JsonSetter("published_version")
    public void setPublishedVersion(Object publishedVersion) {
        this.publishedVersion = publishedVersion;
    }

    /**
     * Getter for Object.
     * @return Returns the String
     */
    @JsonGetter("object")
    public String getObject() {
        return object;
    }

    /**
     * Setter for Object.
     * @param object Value for String
     */
    @JsonSetter("object")
    public void setObject(String object) {
        this.object = object;
    }

    /**
     * Getter for Metadata.
     * Use metadata to store custom information for tagging and labeling back to your internal
     * systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters
     * and values must be at most 500 characters. Neither can contain the characters `"` and `\`.
     * Nested objects are not supported. See [Metadata](#section/Metadata) for more information.
     * @return Returns the Metadata
     */
    @JsonGetter("metadata")
    public Metadata getMetadata() {
        return metadata;
    }

    /**
     * Setter for Metadata.
     * Use metadata to store custom information for tagging and labeling back to your internal
     * systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters
     * and values must be at most 500 characters. Neither can contain the characters `"` and `\`.
     * Nested objects are not supported. See [Metadata](#section/Metadata) for more information.
     * @param metadata Value for Metadata
     */
    @JsonSetter("metadata")
    public void setMetadata(Metadata metadata) {
        this.metadata = metadata;
    }

    /**
     * Getter for DateCreated.
     * A timestamp in ISO 8601 format of the date the resource was created.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("date_created")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getDateCreated() {
        return dateCreated;
    }

    /**
     * Setter for DateCreated.
     * A timestamp in ISO 8601 format of the date the resource was created.
     * @param dateCreated Value for LocalDateTime
     */
    @JsonSetter("date_created")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setDateCreated(LocalDateTime dateCreated) {
        this.dateCreated = dateCreated;
    }

    /**
     * Getter for DateModified.
     * A timestamp in ISO 8601 format of the date the resource was last modified.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("date_modified")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getDateModified() {
        return dateModified;
    }

    /**
     * Setter for DateModified.
     * A timestamp in ISO 8601 format of the date the resource was last modified.
     * @param dateModified Value for LocalDateTime
     */
    @JsonSetter("date_modified")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setDateModified(LocalDateTime dateModified) {
        this.dateModified = dateModified;
    }

    /**
     * Getter for Deleted.
     * Only returned if the resource has been successfully deleted.
     * @return Returns the Boolean
     */
    @JsonGetter("deleted")
    public Boolean getDeleted() {
        return deleted;
    }

    /**
     * Setter for Deleted.
     * Only returned if the resource has been successfully deleted.
     * @param deleted Value for Boolean
     */
    @JsonSetter("deleted")
    public void setDeleted(Boolean deleted) {
        this.deleted = deleted;
    }

    /**
     * Converts this Template into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Template [" + "id=" + id + ", versions=" + versions + ", publishedVersion="
                + publishedVersion + ", description=" + description + ", object=" + object
                + ", metadata=" + metadata + ", dateCreated=" + dateCreated + ", dateModified="
                + dateModified + ", deleted=" + deleted + "]";
    }

    /**
     * Builds a new {@link Template.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Template.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(id, versions, publishedVersion)
                .object(getObject())
                .metadata(getMetadata())
                .dateCreated(getDateCreated())
                .dateModified(getDateModified())
                .deleted(getDeleted());
        builder.description = internalGetDescription();
        return builder;
    }

    /**
     * Class to build instances of {@link Template}.
     */
    public static class Builder {
        private String id;
        private List<TemplateVersion> versions;
        private Object publishedVersion;
        private OptionalNullable<String> description;
        private String object;
        private Metadata metadata;
        private LocalDateTime dateCreated;
        private LocalDateTime dateModified;
        private Boolean deleted;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  id  String value for id.
         * @param  versions  List of TemplateVersion value for versions.
         * @param  publishedVersion  Object value for publishedVersion.
         */
        public Builder(String id, List<TemplateVersion> versions, Object publishedVersion) {
            this.id = id;
            this.versions = versions;
            this.publishedVersion = publishedVersion;
        }

        /**
         * Setter for id.
         * @param  id  String value for id.
         * @return Builder
         */
        public Builder id(String id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for versions.
         * @param  versions  List of TemplateVersion value for versions.
         * @return Builder
         */
        public Builder versions(List<TemplateVersion> versions) {
            this.versions = versions;
            return this;
        }

        /**
         * Setter for publishedVersion.
         * @param  publishedVersion  Object value for publishedVersion.
         * @return Builder
         */
        public Builder publishedVersion(Object publishedVersion) {
            this.publishedVersion = publishedVersion;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = OptionalNullable.of(description);
            return this;
        }

        /**
         * UnSetter for description.
         * @return Builder
         */
        public Builder unsetDescription() {
            description = null;
            return this;
        }

        /**
         * Setter for object.
         * @param  object  String value for object.
         * @return Builder
         */
        public Builder object(String object) {
            this.object = object;
            return this;
        }

        /**
         * Setter for metadata.
         * @param  metadata  Metadata value for metadata.
         * @return Builder
         */
        public Builder metadata(Metadata metadata) {
            this.metadata = metadata;
            return this;
        }

        /**
         * Setter for dateCreated.
         * @param  dateCreated  LocalDateTime value for dateCreated.
         * @return Builder
         */
        public Builder dateCreated(LocalDateTime dateCreated) {
            this.dateCreated = dateCreated;
            return this;
        }

        /**
         * Setter for dateModified.
         * @param  dateModified  LocalDateTime value for dateModified.
         * @return Builder
         */
        public Builder dateModified(LocalDateTime dateModified) {
            this.dateModified = dateModified;
            return this;
        }

        /**
         * Setter for deleted.
         * @param  deleted  Boolean value for deleted.
         * @return Builder
         */
        public Builder deleted(Boolean deleted) {
            this.deleted = deleted;
            return this;
        }

        /**
         * Builds a new {@link Template} object using the set fields.
         * @return {@link Template}
         */
        public Template build() {
            return new Template(id, versions, publishedVersion, description, object, metadata,
                    dateCreated, dateModified, deleted);
        }
    }
}
