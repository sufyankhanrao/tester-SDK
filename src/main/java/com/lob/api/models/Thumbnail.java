/*
 * LobAPI20200211SpecificationLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for Thumbnail type.
 */
public class Thumbnail {
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private String small;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private String medium;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private String large;

    /**
     * Default constructor.
     */
    public Thumbnail() {
    }

    /**
     * Initialization constructor.
     * @param  small  String value for small.
     * @param  medium  String value for medium.
     * @param  large  String value for large.
     */
    public Thumbnail(
            String small,
            String medium,
            String large) {
        this.small = small;
        this.medium = medium;
        this.large = large;
    }

    /**
     * Getter for Small.
     * A [signed link](#section/Asset-URLs) served over HTTPS. The link returned will expire in 30
     * days to prevent mis-sharing. Each time a GET request is initiated, a new signed URL will be
     * generated.
     * @return Returns the String
     */
    @JsonGetter("small")
    public String getSmall() {
        return small;
    }

    /**
     * Setter for Small.
     * A [signed link](#section/Asset-URLs) served over HTTPS. The link returned will expire in 30
     * days to prevent mis-sharing. Each time a GET request is initiated, a new signed URL will be
     * generated.
     * @param small Value for String
     */
    @JsonSetter("small")
    public void setSmall(String small) {
        this.small = small;
    }

    /**
     * Getter for Medium.
     * A [signed link](#section/Asset-URLs) served over HTTPS. The link returned will expire in 30
     * days to prevent mis-sharing. Each time a GET request is initiated, a new signed URL will be
     * generated.
     * @return Returns the String
     */
    @JsonGetter("medium")
    public String getMedium() {
        return medium;
    }

    /**
     * Setter for Medium.
     * A [signed link](#section/Asset-URLs) served over HTTPS. The link returned will expire in 30
     * days to prevent mis-sharing. Each time a GET request is initiated, a new signed URL will be
     * generated.
     * @param medium Value for String
     */
    @JsonSetter("medium")
    public void setMedium(String medium) {
        this.medium = medium;
    }

    /**
     * Getter for Large.
     * A [signed link](#section/Asset-URLs) served over HTTPS. The link returned will expire in 30
     * days to prevent mis-sharing. Each time a GET request is initiated, a new signed URL will be
     * generated.
     * @return Returns the String
     */
    @JsonGetter("large")
    public String getLarge() {
        return large;
    }

    /**
     * Setter for Large.
     * A [signed link](#section/Asset-URLs) served over HTTPS. The link returned will expire in 30
     * days to prevent mis-sharing. Each time a GET request is initiated, a new signed URL will be
     * generated.
     * @param large Value for String
     */
    @JsonSetter("large")
    public void setLarge(String large) {
        this.large = large;
    }

    /**
     * Converts this Thumbnail into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Thumbnail [" + "small=" + small + ", medium=" + medium + ", large=" + large + "]";
    }

    /**
     * Builds a new {@link Thumbnail.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Thumbnail.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .small(getSmall())
                .medium(getMedium())
                .large(getLarge());
        return builder;
    }

    /**
     * Class to build instances of {@link Thumbnail}.
     */
    public static class Builder {
        private String small;
        private String medium;
        private String large;



        /**
         * Setter for small.
         * @param  small  String value for small.
         * @return Builder
         */
        public Builder small(String small) {
            this.small = small;
            return this;
        }

        /**
         * Setter for medium.
         * @param  medium  String value for medium.
         * @return Builder
         */
        public Builder medium(String medium) {
            this.medium = medium;
            return this;
        }

        /**
         * Setter for large.
         * @param  large  String value for large.
         * @return Builder
         */
        public Builder large(String large) {
            this.large = large;
            return this;
        }

        /**
         * Builds a new {@link Thumbnail} object using the set fields.
         * @return {@link Thumbnail}
         */
        public Thumbnail build() {
            return new Thumbnail(small, medium, large);
        }
    }
}
