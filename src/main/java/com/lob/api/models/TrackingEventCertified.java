/*
 * LobAPI20200211SpecificationLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.lob.api.DateTimeHelper;
import com.lob.api.internal.OptionalNullable;
import java.time.LocalDateTime;

/**
 * This is a model class for TrackingEventCertified type.
 */
public class TrackingEventCertified {
    private String id;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private LocalDateTime time;
    private LocalDateTime dateCreated;
    private LocalDateTime dateModified;
    private String object;
    private String type;
    private Name1Enum name;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private TrackingEventDetails details;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<String> location;

    /**
     * Default constructor.
     */
    public TrackingEventCertified() {
        type = "certified";
    }

    /**
     * Initialization constructor.
     * @param  id  String value for id.
     * @param  dateCreated  LocalDateTime value for dateCreated.
     * @param  dateModified  LocalDateTime value for dateModified.
     * @param  object  String value for object.
     * @param  type  String value for type.
     * @param  name  Name1Enum value for name.
     * @param  time  LocalDateTime value for time.
     * @param  details  TrackingEventDetails value for details.
     * @param  location  String value for location.
     */
    public TrackingEventCertified(
            String id,
            LocalDateTime dateCreated,
            LocalDateTime dateModified,
            String object,
            String type,
            Name1Enum name,
            LocalDateTime time,
            TrackingEventDetails details,
            String location) {
        this.id = id;
        this.time = time;
        this.dateCreated = dateCreated;
        this.dateModified = dateModified;
        this.object = object;
        this.type = type;
        this.name = name;
        this.details = details;
        this.location = OptionalNullable.of(location);
    }

    /**
     * Internal initialization constructor.
     */
    protected TrackingEventCertified(String id, LocalDateTime dateCreated,
            LocalDateTime dateModified, String object, String type, Name1Enum name,
            LocalDateTime time, TrackingEventDetails details, OptionalNullable<String> location) {
        this.id = id;
        this.time = time;
        this.dateCreated = dateCreated;
        this.dateModified = dateModified;
        this.object = object;
        this.type = type;
        this.name = name;
        this.details = details;
        this.location = location;
    }

    /**
     * Getter for Id.
     * Unique identifier prefixed with `evnt_`.
     * @return Returns the String
     */
    @JsonGetter("id")
    public String getId() {
        return id;
    }

    /**
     * Setter for Id.
     * Unique identifier prefixed with `evnt_`.
     * @param id Value for String
     */
    @JsonSetter("id")
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Getter for Time.
     * A timestamp in ISO 8601 format of the date USPS registered the event.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("time")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getTime() {
        return time;
    }

    /**
     * Setter for Time.
     * A timestamp in ISO 8601 format of the date USPS registered the event.
     * @param time Value for LocalDateTime
     */
    @JsonSetter("time")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setTime(LocalDateTime time) {
        this.time = time;
    }

    /**
     * Getter for DateCreated.
     * A timestamp in ISO 8601 format of the date the resource was created.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("date_created")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getDateCreated() {
        return dateCreated;
    }

    /**
     * Setter for DateCreated.
     * A timestamp in ISO 8601 format of the date the resource was created.
     * @param dateCreated Value for LocalDateTime
     */
    @JsonSetter("date_created")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setDateCreated(LocalDateTime dateCreated) {
        this.dateCreated = dateCreated;
    }

    /**
     * Getter for DateModified.
     * A timestamp in ISO 8601 format of the date the resource was last modified.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("date_modified")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getDateModified() {
        return dateModified;
    }

    /**
     * Setter for DateModified.
     * A timestamp in ISO 8601 format of the date the resource was last modified.
     * @param dateModified Value for LocalDateTime
     */
    @JsonSetter("date_modified")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setDateModified(LocalDateTime dateModified) {
        this.dateModified = dateModified;
    }

    /**
     * Getter for Object.
     * @return Returns the String
     */
    @JsonGetter("object")
    public String getObject() {
        return object;
    }

    /**
     * Setter for Object.
     * @param object Value for String
     */
    @JsonSetter("object")
    public void setObject(String object) {
        this.object = object;
    }

    /**
     * Getter for Type.
     * a Certified letter tracking event
     * @return Returns the String
     */
    @JsonGetter("type")
    public String getType() {
        return type;
    }

    /**
     * Setter for Type.
     * a Certified letter tracking event
     * @param type Value for String
     */
    @JsonSetter("type")
    private void setType(String type) {
        this.type = type;
    }

    /**
     * Getter for Name.
     * Name of tracking event for Certified letters. Letters sent with USPS Certified Mail are fully
     * tracked by USPS, therefore their tracking events have an additional details object with more
     * detailed information about the tracking event. Some certified tracking event names have
     * multiple meanings, noted in the list here. See the description of the details object for the
     * full set of combined certified tracking event name meanings. * `Mailed` - Package has been
     * accepted into the carrier network for delivery. * `In Transit` - Maps to four distinct stages
     * of transit. * `In Local Area` - Package is at a location near the end destination. *
     * `Processed for Delivery` - Maps to two distinct stages of delivery. * `Pickup Available` -
     * Package is available for pickup at carrier location. * `Delivered` - Package has been
     * delivered. * `Re-Routed` - Package has been forwarded. * `Returned to Sender` - Package is to
     * be returned to sender. * `Issue` - Maps to (at least) 15 possible issues, some of which are
     * actionable.
     * @return Returns the Name1Enum
     */
    @JsonGetter("name")
    public Name1Enum getName() {
        return name;
    }

    /**
     * Setter for Name.
     * Name of tracking event for Certified letters. Letters sent with USPS Certified Mail are fully
     * tracked by USPS, therefore their tracking events have an additional details object with more
     * detailed information about the tracking event. Some certified tracking event names have
     * multiple meanings, noted in the list here. See the description of the details object for the
     * full set of combined certified tracking event name meanings. * `Mailed` - Package has been
     * accepted into the carrier network for delivery. * `In Transit` - Maps to four distinct stages
     * of transit. * `In Local Area` - Package is at a location near the end destination. *
     * `Processed for Delivery` - Maps to two distinct stages of delivery. * `Pickup Available` -
     * Package is available for pickup at carrier location. * `Delivered` - Package has been
     * delivered. * `Re-Routed` - Package has been forwarded. * `Returned to Sender` - Package is to
     * be returned to sender. * `Issue` - Maps to (at least) 15 possible issues, some of which are
     * actionable.
     * @param name Value for Name1Enum
     */
    @JsonSetter("name")
    public void setName(Name1Enum name) {
        this.name = name;
    }

    /**
     * Getter for Details.
     * @return Returns the TrackingEventDetails
     */
    @JsonGetter("details")
    public TrackingEventDetails getDetails() {
        return details;
    }

    /**
     * Setter for Details.
     * @param details Value for TrackingEventDetails
     */
    @JsonSetter("details")
    public void setDetails(TrackingEventDetails details) {
        this.details = details;
    }

    /**
     * Internal Getter for Location.
     * The zip code in which the event occurred if it exists, otherwise will be the name of a
     * Regional Distribution Center if it exists, otherwise will be null.
     * @return Returns the Internal String
     */
    @JsonGetter("location")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetLocation() {
        return this.location;
    }

    /**
     * Getter for Location.
     * The zip code in which the event occurred if it exists, otherwise will be the name of a
     * Regional Distribution Center if it exists, otherwise will be null.
     * @return Returns the String
     */
    public String getLocation() {
        return OptionalNullable.getFrom(location);
    }

    /**
     * Setter for Location.
     * The zip code in which the event occurred if it exists, otherwise will be the name of a
     * Regional Distribution Center if it exists, otherwise will be null.
     * @param location Value for String
     */
    @JsonSetter("location")
    public void setLocation(String location) {
        this.location = OptionalNullable.of(location);
    }

    /**
     * UnSetter for Location.
     * The zip code in which the event occurred if it exists, otherwise will be the name of a
     * Regional Distribution Center if it exists, otherwise will be null.
     */
    public void unsetLocation() {
        location = null;
    }

    /**
     * Converts this TrackingEventCertified into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "TrackingEventCertified [" + "id=" + id + ", dateCreated=" + dateCreated
                + ", dateModified=" + dateModified + ", object=" + object + ", type=" + type
                + ", name=" + name + ", time=" + time + ", details=" + details + ", location="
                + location + "]";
    }

    /**
     * Builds a new {@link TrackingEventCertified.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link TrackingEventCertified.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(id, dateCreated, dateModified, object, type, name)
                .time(getTime())
                .details(getDetails());
        builder.location = internalGetLocation();
        return builder;
    }

    /**
     * Class to build instances of {@link TrackingEventCertified}.
     */
    public static class Builder {
        private String id;
        private LocalDateTime dateCreated;
        private LocalDateTime dateModified;
        private String object;
        private String type = "certified";
        private Name1Enum name;
        private LocalDateTime time;
        private TrackingEventDetails details;
        private OptionalNullable<String> location;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  id  String value for id.
         * @param  dateCreated  LocalDateTime value for dateCreated.
         * @param  dateModified  LocalDateTime value for dateModified.
         * @param  object  String value for object.
         * @param  type  String value for type.
         * @param  name  Name1Enum value for name.
         */
        public Builder(String id, LocalDateTime dateCreated, LocalDateTime dateModified,
                String object, String type, Name1Enum name) {
            this.id = id;
            this.dateCreated = dateCreated;
            this.dateModified = dateModified;
            this.object = object;
            this.type = type;
            this.name = name;
        }

        /**
         * Setter for id.
         * @param  id  String value for id.
         * @return Builder
         */
        public Builder id(String id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for dateCreated.
         * @param  dateCreated  LocalDateTime value for dateCreated.
         * @return Builder
         */
        public Builder dateCreated(LocalDateTime dateCreated) {
            this.dateCreated = dateCreated;
            return this;
        }

        /**
         * Setter for dateModified.
         * @param  dateModified  LocalDateTime value for dateModified.
         * @return Builder
         */
        public Builder dateModified(LocalDateTime dateModified) {
            this.dateModified = dateModified;
            return this;
        }

        /**
         * Setter for object.
         * @param  object  String value for object.
         * @return Builder
         */
        public Builder object(String object) {
            this.object = object;
            return this;
        }

        /**
         * Setter for type.
         * @param  type  String value for type.
         * @return Builder
         */
        public Builder type(String type) {
            this.type = type;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  Name1Enum value for name.
         * @return Builder
         */
        public Builder name(Name1Enum name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for time.
         * @param  time  LocalDateTime value for time.
         * @return Builder
         */
        public Builder time(LocalDateTime time) {
            this.time = time;
            return this;
        }

        /**
         * Setter for details.
         * @param  details  TrackingEventDetails value for details.
         * @return Builder
         */
        public Builder details(TrackingEventDetails details) {
            this.details = details;
            return this;
        }

        /**
         * Setter for location.
         * @param  location  String value for location.
         * @return Builder
         */
        public Builder location(String location) {
            this.location = OptionalNullable.of(location);
            return this;
        }

        /**
         * UnSetter for location.
         * @return Builder
         */
        public Builder unsetLocation() {
            location = null;
            return this;
        }

        /**
         * Builds a new {@link TrackingEventCertified} object using the set fields.
         * @return {@link TrackingEventCertified}
         */
        public TrackingEventCertified build() {
            return new TrackingEventCertified(id, dateCreated, dateModified, object, type, name,
                    time, details, location);
        }
    }
}
