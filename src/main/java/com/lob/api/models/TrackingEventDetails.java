/*
 * LobAPI20200211SpecificationLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for TrackingEventDetails type.
 */
public class TrackingEventDetails {
    private EventEnum event;
    private String description;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private String notes;
    private boolean actionRequired;

    /**
     * Default constructor.
     */
    public TrackingEventDetails() {
    }

    /**
     * Initialization constructor.
     * @param  event  EventEnum value for event.
     * @param  description  String value for description.
     * @param  actionRequired  boolean value for actionRequired.
     * @param  notes  String value for notes.
     */
    public TrackingEventDetails(
            EventEnum event,
            String description,
            boolean actionRequired,
            String notes) {
        this.event = event;
        this.description = description;
        this.notes = notes;
        this.actionRequired = actionRequired;
    }

    /**
     * Getter for Event.
     * Find the full table [here](#tag/Tracking-Events). A detailed substatus about the event: *
     * `package_accepted` - Package has been accepted into the carrier network for delivery. *
     * `package_arrived` - Package has arrived at an intermediate location in the carrier network. *
     * `package_departed` - Package has departed from an intermediate location in the carrier
     * network. * `package_processing` - Package is processing at an intermediate location in the
     * carrier network. * `package_processed` - Package has been processed at an intermediate
     * location. * `package_in_local_area` - Package is at a location near the end destination. *
     * `delivery_scheduled` - Package is scheduled for delivery. * `out_for_delivery` - Package is
     * out for delivery. * `pickup_available` - Package is available for pickup at carrier location.
     * * `delivered` - Package has been delivered. * `package_forwarded` - Package has been
     * forwarded. * `returned_to_sender` - Package is to be returned to sender. * `address_issue` -
     * Address information is incorrect. Contact carrier to ensure delivery. * `contact_carrier` -
     * Contact the carrier for more information. * `delayed` - Delivery of package is delayed. *
     * `delivery_attempted` - Delivery of package has been attempted. Contact carrier to ensure
     * delivery. * `delivery_rescheduled` - Delivery of package has been rescheduled. *
     * `location_inaccessible` - Delivery location inaccessible to carrier. Contact carrier to
     * ensure delivery. * `notice_left` - Carrier left notice during attempted delivery. Follow
     * carrier instructions on notice. * `package_damaged` - Package has been damaged. Contact
     * carrier for more details. * `package_disposed` - Package has been disposed. * `package_held`
     * - Package held at carrier location. Contact carrier for more details. * `package_lost` -
     * Package has been lost. Contact carrier for more details. * `package_unclaimed` - Package is
     * unclaimed. * `package_undeliverable` - Package is not able to be delivered. *
     * `reschedule_delivery` - Contact carrier to reschedule delivery. * `other` - Unrecognized
     * carrier status.
     * @return Returns the EventEnum
     */
    @JsonGetter("event")
    public EventEnum getEvent() {
        return event;
    }

    /**
     * Setter for Event.
     * Find the full table [here](#tag/Tracking-Events). A detailed substatus about the event: *
     * `package_accepted` - Package has been accepted into the carrier network for delivery. *
     * `package_arrived` - Package has arrived at an intermediate location in the carrier network. *
     * `package_departed` - Package has departed from an intermediate location in the carrier
     * network. * `package_processing` - Package is processing at an intermediate location in the
     * carrier network. * `package_processed` - Package has been processed at an intermediate
     * location. * `package_in_local_area` - Package is at a location near the end destination. *
     * `delivery_scheduled` - Package is scheduled for delivery. * `out_for_delivery` - Package is
     * out for delivery. * `pickup_available` - Package is available for pickup at carrier location.
     * * `delivered` - Package has been delivered. * `package_forwarded` - Package has been
     * forwarded. * `returned_to_sender` - Package is to be returned to sender. * `address_issue` -
     * Address information is incorrect. Contact carrier to ensure delivery. * `contact_carrier` -
     * Contact the carrier for more information. * `delayed` - Delivery of package is delayed. *
     * `delivery_attempted` - Delivery of package has been attempted. Contact carrier to ensure
     * delivery. * `delivery_rescheduled` - Delivery of package has been rescheduled. *
     * `location_inaccessible` - Delivery location inaccessible to carrier. Contact carrier to
     * ensure delivery. * `notice_left` - Carrier left notice during attempted delivery. Follow
     * carrier instructions on notice. * `package_damaged` - Package has been damaged. Contact
     * carrier for more details. * `package_disposed` - Package has been disposed. * `package_held`
     * - Package held at carrier location. Contact carrier for more details. * `package_lost` -
     * Package has been lost. Contact carrier for more details. * `package_unclaimed` - Package is
     * unclaimed. * `package_undeliverable` - Package is not able to be delivered. *
     * `reschedule_delivery` - Contact carrier to reschedule delivery. * `other` - Unrecognized
     * carrier status.
     * @param event Value for EventEnum
     */
    @JsonSetter("event")
    public void setEvent(EventEnum event) {
        this.event = event;
    }

    /**
     * Getter for Description.
     * The description as listed in the description for event.
     * @return Returns the String
     */
    @JsonGetter("description")
    public String getDescription() {
        return description;
    }

    /**
     * Setter for Description.
     * The description as listed in the description for event.
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Getter for Notes.
     * Event-specific notes from USPS about the tracking event.
     * @return Returns the String
     */
    @JsonGetter("notes")
    public String getNotes() {
        return notes;
    }

    /**
     * Setter for Notes.
     * Event-specific notes from USPS about the tracking event.
     * @param notes Value for String
     */
    @JsonSetter("notes")
    public void setNotes(String notes) {
        this.notes = notes;
    }

    /**
     * Getter for ActionRequired.
     * `true` if action is required by the end recipient, `false` otherwise.
     * @return Returns the boolean
     */
    @JsonGetter("action_required")
    public boolean getActionRequired() {
        return actionRequired;
    }

    /**
     * Setter for ActionRequired.
     * `true` if action is required by the end recipient, `false` otherwise.
     * @param actionRequired Value for boolean
     */
    @JsonSetter("action_required")
    public void setActionRequired(boolean actionRequired) {
        this.actionRequired = actionRequired;
    }

    /**
     * Converts this TrackingEventDetails into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "TrackingEventDetails [" + "event=" + event + ", description=" + description
                + ", actionRequired=" + actionRequired + ", notes=" + notes + "]";
    }

    /**
     * Builds a new {@link TrackingEventDetails.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link TrackingEventDetails.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(event, description, actionRequired)
                .notes(getNotes());
        return builder;
    }

    /**
     * Class to build instances of {@link TrackingEventDetails}.
     */
    public static class Builder {
        private EventEnum event;
        private String description;
        private boolean actionRequired;
        private String notes;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  event  EventEnum value for event.
         * @param  description  String value for description.
         * @param  actionRequired  boolean value for actionRequired.
         */
        public Builder(EventEnum event, String description, boolean actionRequired) {
            this.event = event;
            this.description = description;
            this.actionRequired = actionRequired;
        }

        /**
         * Setter for event.
         * @param  event  EventEnum value for event.
         * @return Builder
         */
        public Builder event(EventEnum event) {
            this.event = event;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = description;
            return this;
        }

        /**
         * Setter for actionRequired.
         * @param  actionRequired  boolean value for actionRequired.
         * @return Builder
         */
        public Builder actionRequired(boolean actionRequired) {
            this.actionRequired = actionRequired;
            return this;
        }

        /**
         * Setter for notes.
         * @param  notes  String value for notes.
         * @return Builder
         */
        public Builder notes(String notes) {
            this.notes = notes;
            return this;
        }

        /**
         * Builds a new {@link TrackingEventDetails} object using the set fields.
         * @return {@link TrackingEventDetails}
         */
        public TrackingEventDetails build() {
            return new TrackingEventDetails(event, description, actionRequired, notes);
        }
    }
}
