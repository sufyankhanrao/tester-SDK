/*
 * LobAPI20200211SpecificationLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.lob.api.internal.OptionalNullable;

/**
 * This is a model class for UsComponents type.
 */
public class UsComponents {
    private String primaryNumber;
    private StreetPredirectionEnum streetPredirection;
    private String streetName;
    private String streetSuffix;
    private StreetPostdirectionEnum streetPostdirection;
    private String secondaryDesignator;
    private String secondaryNumber;
    private String pmbDesignator;
    private String pmbNumber;
    private String extraSecondaryDesignator;
    private String extraSecondaryNumber;
    private String city;
    private String state;
    private String zipCode;
    private Object zipCodePlus4;
    private ZipCodeTypeEnum zipCodeType;
    private String deliveryPointBarcode;
    private AddressTypeEnum addressType;
    private RecordTypeEnum recordType;
    private boolean defaultBuildingAddress;
    private String county;
    private String countyFips;
    private String carrierRoute;
    private CarrierRouteTypeEnum carrierRouteType;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<Double> latitude;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private OptionalNullable<Double> longitude;

    /**
     * Default constructor.
     */
    public UsComponents() {
    }

    /**
     * Initialization constructor.
     * @param  primaryNumber  String value for primaryNumber.
     * @param  streetPredirection  StreetPredirectionEnum value for streetPredirection.
     * @param  streetName  String value for streetName.
     * @param  streetSuffix  String value for streetSuffix.
     * @param  streetPostdirection  StreetPostdirectionEnum value for streetPostdirection.
     * @param  secondaryDesignator  String value for secondaryDesignator.
     * @param  secondaryNumber  String value for secondaryNumber.
     * @param  pmbDesignator  String value for pmbDesignator.
     * @param  pmbNumber  String value for pmbNumber.
     * @param  extraSecondaryDesignator  String value for extraSecondaryDesignator.
     * @param  extraSecondaryNumber  String value for extraSecondaryNumber.
     * @param  city  String value for city.
     * @param  state  String value for state.
     * @param  zipCode  String value for zipCode.
     * @param  zipCodePlus4  Object value for zipCodePlus4.
     * @param  zipCodeType  ZipCodeTypeEnum value for zipCodeType.
     * @param  deliveryPointBarcode  String value for deliveryPointBarcode.
     * @param  addressType  AddressTypeEnum value for addressType.
     * @param  recordType  RecordTypeEnum value for recordType.
     * @param  defaultBuildingAddress  boolean value for defaultBuildingAddress.
     * @param  county  String value for county.
     * @param  countyFips  String value for countyFips.
     * @param  carrierRoute  String value for carrierRoute.
     * @param  carrierRouteType  CarrierRouteTypeEnum value for carrierRouteType.
     * @param  latitude  Double value for latitude.
     * @param  longitude  Double value for longitude.
     */
    public UsComponents(
            String primaryNumber,
            StreetPredirectionEnum streetPredirection,
            String streetName,
            String streetSuffix,
            StreetPostdirectionEnum streetPostdirection,
            String secondaryDesignator,
            String secondaryNumber,
            String pmbDesignator,
            String pmbNumber,
            String extraSecondaryDesignator,
            String extraSecondaryNumber,
            String city,
            String state,
            String zipCode,
            Object zipCodePlus4,
            ZipCodeTypeEnum zipCodeType,
            String deliveryPointBarcode,
            AddressTypeEnum addressType,
            RecordTypeEnum recordType,
            boolean defaultBuildingAddress,
            String county,
            String countyFips,
            String carrierRoute,
            CarrierRouteTypeEnum carrierRouteType,
            Double latitude,
            Double longitude) {
        this.primaryNumber = primaryNumber;
        this.streetPredirection = streetPredirection;
        this.streetName = streetName;
        this.streetSuffix = streetSuffix;
        this.streetPostdirection = streetPostdirection;
        this.secondaryDesignator = secondaryDesignator;
        this.secondaryNumber = secondaryNumber;
        this.pmbDesignator = pmbDesignator;
        this.pmbNumber = pmbNumber;
        this.extraSecondaryDesignator = extraSecondaryDesignator;
        this.extraSecondaryNumber = extraSecondaryNumber;
        this.city = city;
        this.state = state;
        this.zipCode = zipCode;
        this.zipCodePlus4 = zipCodePlus4;
        this.zipCodeType = zipCodeType;
        this.deliveryPointBarcode = deliveryPointBarcode;
        this.addressType = addressType;
        this.recordType = recordType;
        this.defaultBuildingAddress = defaultBuildingAddress;
        this.county = county;
        this.countyFips = countyFips;
        this.carrierRoute = carrierRoute;
        this.carrierRouteType = carrierRouteType;
        this.latitude = OptionalNullable.of(latitude);
        this.longitude = OptionalNullable.of(longitude);
    }

    /**
     * Internal initialization constructor.
     */
    protected UsComponents(String primaryNumber, StreetPredirectionEnum streetPredirection,
            String streetName, String streetSuffix, StreetPostdirectionEnum streetPostdirection,
            String secondaryDesignator, String secondaryNumber, String pmbDesignator,
            String pmbNumber, String extraSecondaryDesignator, String extraSecondaryNumber,
            String city, String state, String zipCode, Object zipCodePlus4,
            ZipCodeTypeEnum zipCodeType, String deliveryPointBarcode, AddressTypeEnum addressType,
            RecordTypeEnum recordType, boolean defaultBuildingAddress, String county,
            String countyFips, String carrierRoute, CarrierRouteTypeEnum carrierRouteType,
            OptionalNullable<Double> latitude, OptionalNullable<Double> longitude) {
        this.primaryNumber = primaryNumber;
        this.streetPredirection = streetPredirection;
        this.streetName = streetName;
        this.streetSuffix = streetSuffix;
        this.streetPostdirection = streetPostdirection;
        this.secondaryDesignator = secondaryDesignator;
        this.secondaryNumber = secondaryNumber;
        this.pmbDesignator = pmbDesignator;
        this.pmbNumber = pmbNumber;
        this.extraSecondaryDesignator = extraSecondaryDesignator;
        this.extraSecondaryNumber = extraSecondaryNumber;
        this.city = city;
        this.state = state;
        this.zipCode = zipCode;
        this.zipCodePlus4 = zipCodePlus4;
        this.zipCodeType = zipCodeType;
        this.deliveryPointBarcode = deliveryPointBarcode;
        this.addressType = addressType;
        this.recordType = recordType;
        this.defaultBuildingAddress = defaultBuildingAddress;
        this.county = county;
        this.countyFips = countyFips;
        this.carrierRoute = carrierRoute;
        this.carrierRouteType = carrierRouteType;
        this.latitude = latitude;
        this.longitude = longitude;
    }

    /**
     * Getter for PrimaryNumber.
     * The numeric or alphanumeric part of an address preceding the street name. Often the house,
     * building, or PO Box number.
     * @return Returns the String
     */
    @JsonGetter("primary_number")
    public String getPrimaryNumber() {
        return primaryNumber;
    }

    /**
     * Setter for PrimaryNumber.
     * The numeric or alphanumeric part of an address preceding the street name. Often the house,
     * building, or PO Box number.
     * @param primaryNumber Value for String
     */
    @JsonSetter("primary_number")
    public void setPrimaryNumber(String primaryNumber) {
        this.primaryNumber = primaryNumber;
    }

    /**
     * Getter for StreetPredirection.
     * Geographic direction preceding a street name (`N`, `S`, `E`, `W`, `NE`, `SW`, `SE`, `NW`).
     * @return Returns the StreetPredirectionEnum
     */
    @JsonGetter("street_predirection")
    public StreetPredirectionEnum getStreetPredirection() {
        return streetPredirection;
    }

    /**
     * Setter for StreetPredirection.
     * Geographic direction preceding a street name (`N`, `S`, `E`, `W`, `NE`, `SW`, `SE`, `NW`).
     * @param streetPredirection Value for StreetPredirectionEnum
     */
    @JsonSetter("street_predirection")
    public void setStreetPredirection(StreetPredirectionEnum streetPredirection) {
        this.streetPredirection = streetPredirection;
    }

    /**
     * Getter for StreetName.
     * The name of the street.
     * @return Returns the String
     */
    @JsonGetter("street_name")
    public String getStreetName() {
        return streetName;
    }

    /**
     * Setter for StreetName.
     * The name of the street.
     * @param streetName Value for String
     */
    @JsonSetter("street_name")
    public void setStreetName(String streetName) {
        this.streetName = streetName;
    }

    /**
     * Getter for StreetSuffix.
     * The standard USPS abbreviation for the street suffix (`ST`, `AVE`, `BLVD`, etc).
     * @return Returns the String
     */
    @JsonGetter("street_suffix")
    public String getStreetSuffix() {
        return streetSuffix;
    }

    /**
     * Setter for StreetSuffix.
     * The standard USPS abbreviation for the street suffix (`ST`, `AVE`, `BLVD`, etc).
     * @param streetSuffix Value for String
     */
    @JsonSetter("street_suffix")
    public void setStreetSuffix(String streetSuffix) {
        this.streetSuffix = streetSuffix;
    }

    /**
     * Getter for StreetPostdirection.
     * Geographic direction following a street name (`N`, `S`, `E`, `W`, `NE`, `SW`, `SE`, `NW`).
     * @return Returns the StreetPostdirectionEnum
     */
    @JsonGetter("street_postdirection")
    public StreetPostdirectionEnum getStreetPostdirection() {
        return streetPostdirection;
    }

    /**
     * Setter for StreetPostdirection.
     * Geographic direction following a street name (`N`, `S`, `E`, `W`, `NE`, `SW`, `SE`, `NW`).
     * @param streetPostdirection Value for StreetPostdirectionEnum
     */
    @JsonSetter("street_postdirection")
    public void setStreetPostdirection(StreetPostdirectionEnum streetPostdirection) {
        this.streetPostdirection = streetPostdirection;
    }

    /**
     * Getter for SecondaryDesignator.
     * The standard USPS abbreviation describing the `components[secondary_number]` (`STE`, `APT`,
     * `BLDG`, etc).
     * @return Returns the String
     */
    @JsonGetter("secondary_designator")
    public String getSecondaryDesignator() {
        return secondaryDesignator;
    }

    /**
     * Setter for SecondaryDesignator.
     * The standard USPS abbreviation describing the `components[secondary_number]` (`STE`, `APT`,
     * `BLDG`, etc).
     * @param secondaryDesignator Value for String
     */
    @JsonSetter("secondary_designator")
    public void setSecondaryDesignator(String secondaryDesignator) {
        this.secondaryDesignator = secondaryDesignator;
    }

    /**
     * Getter for SecondaryNumber.
     * Number of the apartment/unit/etc.
     * @return Returns the String
     */
    @JsonGetter("secondary_number")
    public String getSecondaryNumber() {
        return secondaryNumber;
    }

    /**
     * Setter for SecondaryNumber.
     * Number of the apartment/unit/etc.
     * @param secondaryNumber Value for String
     */
    @JsonSetter("secondary_number")
    public void setSecondaryNumber(String secondaryNumber) {
        this.secondaryNumber = secondaryNumber;
    }

    /**
     * Getter for PmbDesignator.
     * Designator of a
     * [CMRA-authorized](https://en.wikipedia.org/wiki/Commercial_mail_receiving_agency) private
     * mailbox.
     * @return Returns the String
     */
    @JsonGetter("pmb_designator")
    public String getPmbDesignator() {
        return pmbDesignator;
    }

    /**
     * Setter for PmbDesignator.
     * Designator of a
     * [CMRA-authorized](https://en.wikipedia.org/wiki/Commercial_mail_receiving_agency) private
     * mailbox.
     * @param pmbDesignator Value for String
     */
    @JsonSetter("pmb_designator")
    public void setPmbDesignator(String pmbDesignator) {
        this.pmbDesignator = pmbDesignator;
    }

    /**
     * Getter for PmbNumber.
     * Number of a [CMRA-authorized](https://en.wikipedia.org/wiki/Commercial_mail_receiving_agency)
     * private mailbox.
     * @return Returns the String
     */
    @JsonGetter("pmb_number")
    public String getPmbNumber() {
        return pmbNumber;
    }

    /**
     * Setter for PmbNumber.
     * Number of a [CMRA-authorized](https://en.wikipedia.org/wiki/Commercial_mail_receiving_agency)
     * private mailbox.
     * @param pmbNumber Value for String
     */
    @JsonSetter("pmb_number")
    public void setPmbNumber(String pmbNumber) {
        this.pmbNumber = pmbNumber;
    }

    /**
     * Getter for ExtraSecondaryDesignator.
     * An extra (often unnecessary) secondary designator provided with the input address.
     * @return Returns the String
     */
    @JsonGetter("extra_secondary_designator")
    public String getExtraSecondaryDesignator() {
        return extraSecondaryDesignator;
    }

    /**
     * Setter for ExtraSecondaryDesignator.
     * An extra (often unnecessary) secondary designator provided with the input address.
     * @param extraSecondaryDesignator Value for String
     */
    @JsonSetter("extra_secondary_designator")
    public void setExtraSecondaryDesignator(String extraSecondaryDesignator) {
        this.extraSecondaryDesignator = extraSecondaryDesignator;
    }

    /**
     * Getter for ExtraSecondaryNumber.
     * An extra (often unnecessary) secondary number provided with the input address.
     * @return Returns the String
     */
    @JsonGetter("extra_secondary_number")
    public String getExtraSecondaryNumber() {
        return extraSecondaryNumber;
    }

    /**
     * Setter for ExtraSecondaryNumber.
     * An extra (often unnecessary) secondary number provided with the input address.
     * @param extraSecondaryNumber Value for String
     */
    @JsonSetter("extra_secondary_number")
    public void setExtraSecondaryNumber(String extraSecondaryNumber) {
        this.extraSecondaryNumber = extraSecondaryNumber;
    }

    /**
     * Getter for City.
     * @return Returns the String
     */
    @JsonGetter("city")
    public String getCity() {
        return city;
    }

    /**
     * Setter for City.
     * @param city Value for String
     */
    @JsonSetter("city")
    public void setCity(String city) {
        this.city = city;
    }

    /**
     * Getter for State.
     * The [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) two letter code for the state.
     * @return Returns the String
     */
    @JsonGetter("state")
    public String getState() {
        return state;
    }

    /**
     * Setter for State.
     * The [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) two letter code for the state.
     * @param state Value for String
     */
    @JsonSetter("state")
    public void setState(String state) {
        this.state = state;
    }

    /**
     * Getter for ZipCode.
     * The 5-digit ZIP code
     * @return Returns the String
     */
    @JsonGetter("zip_code")
    public String getZipCode() {
        return zipCode;
    }

    /**
     * Setter for ZipCode.
     * The 5-digit ZIP code
     * @param zipCode Value for String
     */
    @JsonSetter("zip_code")
    public void setZipCode(String zipCode) {
        this.zipCode = zipCode;
    }

    /**
     * Getter for ZipCodePlus4.
     * @return Returns the Object
     */
    @JsonGetter("zip_code_plus_4")
    public Object getZipCodePlus4() {
        return zipCodePlus4;
    }

    /**
     * Setter for ZipCodePlus4.
     * @param zipCodePlus4 Value for Object
     */
    @JsonSetter("zip_code_plus_4")
    public void setZipCodePlus4(Object zipCodePlus4) {
        this.zipCodePlus4 = zipCodePlus4;
    }

    /**
     * Getter for ZipCodeType.
     * A description of the ZIP code type. For more detailed information about each ZIP code type,
     * see [US Verification Details](#tag/US-Verification-Types).
     * @return Returns the ZipCodeTypeEnum
     */
    @JsonGetter("zip_code_type")
    public ZipCodeTypeEnum getZipCodeType() {
        return zipCodeType;
    }

    /**
     * Setter for ZipCodeType.
     * A description of the ZIP code type. For more detailed information about each ZIP code type,
     * see [US Verification Details](#tag/US-Verification-Types).
     * @param zipCodeType Value for ZipCodeTypeEnum
     */
    @JsonSetter("zip_code_type")
    public void setZipCodeType(ZipCodeTypeEnum zipCodeType) {
        this.zipCodeType = zipCodeType;
    }

    /**
     * Getter for DeliveryPointBarcode.
     * A 12-digit identifier that uniquely identifies a delivery point (location where mail can be
     * sent and received). It consists of the 5-digit ZIP code (`zip_code`), 4-digit ZIP+4 add-on
     * (`zip_code_plus_4`), 2-digit delivery point, and 1-digit delivery point check digit.
     * @return Returns the String
     */
    @JsonGetter("delivery_point_barcode")
    public String getDeliveryPointBarcode() {
        return deliveryPointBarcode;
    }

    /**
     * Setter for DeliveryPointBarcode.
     * A 12-digit identifier that uniquely identifies a delivery point (location where mail can be
     * sent and received). It consists of the 5-digit ZIP code (`zip_code`), 4-digit ZIP+4 add-on
     * (`zip_code_plus_4`), 2-digit delivery point, and 1-digit delivery point check digit.
     * @param deliveryPointBarcode Value for String
     */
    @JsonSetter("delivery_point_barcode")
    public void setDeliveryPointBarcode(String deliveryPointBarcode) {
        this.deliveryPointBarcode = deliveryPointBarcode;
    }

    /**
     * Getter for AddressType.
     * Uses USPS's [Residential Delivery Indicator
     * (RDI)](https://www.usps.com/nationalpremieraccounts/rdi.htm) to identify whether an address
     * is classified as residential or business. Possible values are: * `residential` –– The address
     * is residential or a PO Box. * `commercial` –– The address is commercial. * `''` –– Not enough
     * information provided to be determined.
     * @return Returns the AddressTypeEnum
     */
    @JsonGetter("address_type")
    public AddressTypeEnum getAddressType() {
        return addressType;
    }

    /**
     * Setter for AddressType.
     * Uses USPS's [Residential Delivery Indicator
     * (RDI)](https://www.usps.com/nationalpremieraccounts/rdi.htm) to identify whether an address
     * is classified as residential or business. Possible values are: * `residential` –– The address
     * is residential or a PO Box. * `commercial` –– The address is commercial. * `''` –– Not enough
     * information provided to be determined.
     * @param addressType Value for AddressTypeEnum
     */
    @JsonSetter("address_type")
    public void setAddressType(AddressTypeEnum addressType) {
        this.addressType = addressType;
    }

    /**
     * Getter for RecordType.
     * A description of the type of address. Populated if a DPV match is made
     * (`deliverability_analysis[dpv_confirmation]` is `Y`, `S`, or `D`). For more detailed
     * information about each record type, see [US Verification
     * Details](#tag/US-Verification-Types).
     * @return Returns the RecordTypeEnum
     */
    @JsonGetter("record_type")
    public RecordTypeEnum getRecordType() {
        return recordType;
    }

    /**
     * Setter for RecordType.
     * A description of the type of address. Populated if a DPV match is made
     * (`deliverability_analysis[dpv_confirmation]` is `Y`, `S`, or `D`). For more detailed
     * information about each record type, see [US Verification
     * Details](#tag/US-Verification-Types).
     * @param recordType Value for RecordTypeEnum
     */
    @JsonSetter("record_type")
    public void setRecordType(RecordTypeEnum recordType) {
        this.recordType = recordType;
    }

    /**
     * Getter for DefaultBuildingAddress.
     * Designates whether or not the address is the default address for a building containing
     * multiple delivery points.
     * @return Returns the boolean
     */
    @JsonGetter("default_building_address")
    public boolean getDefaultBuildingAddress() {
        return defaultBuildingAddress;
    }

    /**
     * Setter for DefaultBuildingAddress.
     * Designates whether or not the address is the default address for a building containing
     * multiple delivery points.
     * @param defaultBuildingAddress Value for boolean
     */
    @JsonSetter("default_building_address")
    public void setDefaultBuildingAddress(boolean defaultBuildingAddress) {
        this.defaultBuildingAddress = defaultBuildingAddress;
    }

    /**
     * Getter for County.
     * County name of the address city.
     * @return Returns the String
     */
    @JsonGetter("county")
    public String getCounty() {
        return county;
    }

    /**
     * Setter for County.
     * County name of the address city.
     * @param county Value for String
     */
    @JsonSetter("county")
    public void setCounty(String county) {
        this.county = county;
    }

    /**
     * Getter for CountyFips.
     * A 5-digit [FIPS county code](https://en.wikipedia.org/wiki/FIPS_county_code) which uniquely
     * identifies `components[county]`. It consists of a 2-digit state code and a 3-digit county
     * code.
     * @return Returns the String
     */
    @JsonGetter("county_fips")
    public String getCountyFips() {
        return countyFips;
    }

    /**
     * Setter for CountyFips.
     * A 5-digit [FIPS county code](https://en.wikipedia.org/wiki/FIPS_county_code) which uniquely
     * identifies `components[county]`. It consists of a 2-digit state code and a 3-digit county
     * code.
     * @param countyFips Value for String
     */
    @JsonSetter("county_fips")
    public void setCountyFips(String countyFips) {
        this.countyFips = countyFips;
    }

    /**
     * Getter for CarrierRoute.
     * A 4-character code assigned to a mail delivery route within a ZIP code.
     * @return Returns the String
     */
    @JsonGetter("carrier_route")
    public String getCarrierRoute() {
        return carrierRoute;
    }

    /**
     * Setter for CarrierRoute.
     * A 4-character code assigned to a mail delivery route within a ZIP code.
     * @param carrierRoute Value for String
     */
    @JsonSetter("carrier_route")
    public void setCarrierRoute(String carrierRoute) {
        this.carrierRoute = carrierRoute;
    }

    /**
     * Getter for CarrierRouteType.
     * The type of `components[carrier_route]`. For more detailed information about each carrier
     * route type, see [US Verification Details](#tag/US-Verification-Types).
     * @return Returns the CarrierRouteTypeEnum
     */
    @JsonGetter("carrier_route_type")
    public CarrierRouteTypeEnum getCarrierRouteType() {
        return carrierRouteType;
    }

    /**
     * Setter for CarrierRouteType.
     * The type of `components[carrier_route]`. For more detailed information about each carrier
     * route type, see [US Verification Details](#tag/US-Verification-Types).
     * @param carrierRouteType Value for CarrierRouteTypeEnum
     */
    @JsonSetter("carrier_route_type")
    public void setCarrierRouteType(CarrierRouteTypeEnum carrierRouteType) {
        this.carrierRouteType = carrierRouteType;
    }

    /**
     * Internal Getter for Latitude.
     * A positive or negative decimal indicating the geographic latitude of the address, specifying
     * the north-to-south position of a location. This should be used with `longitude` to pinpoint
     * locations on a map. Will not be returned for undeliverable addresses or military addresses
     * (state is `AA`, `AE`, or `AP`).
     * @return Returns the Internal Double
     */
    @JsonGetter("latitude")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetLatitude() {
        return this.latitude;
    }

    /**
     * Getter for Latitude.
     * A positive or negative decimal indicating the geographic latitude of the address, specifying
     * the north-to-south position of a location. This should be used with `longitude` to pinpoint
     * locations on a map. Will not be returned for undeliverable addresses or military addresses
     * (state is `AA`, `AE`, or `AP`).
     * @return Returns the Double
     */
    public Double getLatitude() {
        return OptionalNullable.getFrom(latitude);
    }

    /**
     * Setter for Latitude.
     * A positive or negative decimal indicating the geographic latitude of the address, specifying
     * the north-to-south position of a location. This should be used with `longitude` to pinpoint
     * locations on a map. Will not be returned for undeliverable addresses or military addresses
     * (state is `AA`, `AE`, or `AP`).
     * @param latitude Value for Double
     */
    @JsonSetter("latitude")
    public void setLatitude(Double latitude) {
        this.latitude = OptionalNullable.of(latitude);
    }

    /**
     * UnSetter for Latitude.
     * A positive or negative decimal indicating the geographic latitude of the address, specifying
     * the north-to-south position of a location. This should be used with `longitude` to pinpoint
     * locations on a map. Will not be returned for undeliverable addresses or military addresses
     * (state is `AA`, `AE`, or `AP`).
     */
    public void unsetLatitude() {
        latitude = null;
    }

    /**
     * Internal Getter for Longitude.
     * A positive or negative decimal indicating the geographic longitude of the address, specifying
     * the north-to-south position of a location. This should be used with `latitude` to pinpoint
     * locations on a map. Will not be returned for undeliverable addresses or military addresses
     * (state is `AA`, `AE`, or `AP`).
     * @return Returns the Internal Double
     */
    @JsonGetter("longitude")
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetLongitude() {
        return this.longitude;
    }

    /**
     * Getter for Longitude.
     * A positive or negative decimal indicating the geographic longitude of the address, specifying
     * the north-to-south position of a location. This should be used with `latitude` to pinpoint
     * locations on a map. Will not be returned for undeliverable addresses or military addresses
     * (state is `AA`, `AE`, or `AP`).
     * @return Returns the Double
     */
    public Double getLongitude() {
        return OptionalNullable.getFrom(longitude);
    }

    /**
     * Setter for Longitude.
     * A positive or negative decimal indicating the geographic longitude of the address, specifying
     * the north-to-south position of a location. This should be used with `latitude` to pinpoint
     * locations on a map. Will not be returned for undeliverable addresses or military addresses
     * (state is `AA`, `AE`, or `AP`).
     * @param longitude Value for Double
     */
    @JsonSetter("longitude")
    public void setLongitude(Double longitude) {
        this.longitude = OptionalNullable.of(longitude);
    }

    /**
     * UnSetter for Longitude.
     * A positive or negative decimal indicating the geographic longitude of the address, specifying
     * the north-to-south position of a location. This should be used with `latitude` to pinpoint
     * locations on a map. Will not be returned for undeliverable addresses or military addresses
     * (state is `AA`, `AE`, or `AP`).
     */
    public void unsetLongitude() {
        longitude = null;
    }

    /**
     * Converts this UsComponents into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "UsComponents [" + "primaryNumber=" + primaryNumber + ", streetPredirection="
                + streetPredirection + ", streetName=" + streetName + ", streetSuffix="
                + streetSuffix + ", streetPostdirection=" + streetPostdirection
                + ", secondaryDesignator=" + secondaryDesignator + ", secondaryNumber="
                + secondaryNumber + ", pmbDesignator=" + pmbDesignator + ", pmbNumber=" + pmbNumber
                + ", extraSecondaryDesignator=" + extraSecondaryDesignator
                + ", extraSecondaryNumber=" + extraSecondaryNumber + ", city=" + city + ", state="
                + state + ", zipCode=" + zipCode + ", zipCodePlus4=" + zipCodePlus4
                + ", zipCodeType=" + zipCodeType + ", deliveryPointBarcode=" + deliveryPointBarcode
                + ", addressType=" + addressType + ", recordType=" + recordType
                + ", defaultBuildingAddress=" + defaultBuildingAddress + ", county=" + county
                + ", countyFips=" + countyFips + ", carrierRoute=" + carrierRoute
                + ", carrierRouteType=" + carrierRouteType + ", latitude=" + latitude
                + ", longitude=" + longitude + "]";
    }

    /**
     * Builds a new {@link UsComponents.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link UsComponents.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(primaryNumber, streetPredirection, streetName, streetSuffix,
                streetPostdirection, secondaryDesignator, secondaryNumber, pmbDesignator, pmbNumber,
                extraSecondaryDesignator, extraSecondaryNumber, city, state, zipCode, zipCodePlus4,
                zipCodeType, deliveryPointBarcode, addressType, recordType, defaultBuildingAddress,
                county, countyFips, carrierRoute, carrierRouteType);
        builder.latitude = internalGetLatitude();
        builder.longitude = internalGetLongitude();
        return builder;
    }

    /**
     * Class to build instances of {@link UsComponents}.
     */
    public static class Builder {
        private String primaryNumber;
        private StreetPredirectionEnum streetPredirection;
        private String streetName;
        private String streetSuffix;
        private StreetPostdirectionEnum streetPostdirection;
        private String secondaryDesignator;
        private String secondaryNumber;
        private String pmbDesignator;
        private String pmbNumber;
        private String extraSecondaryDesignator;
        private String extraSecondaryNumber;
        private String city;
        private String state;
        private String zipCode;
        private Object zipCodePlus4;
        private ZipCodeTypeEnum zipCodeType;
        private String deliveryPointBarcode;
        private AddressTypeEnum addressType;
        private RecordTypeEnum recordType;
        private boolean defaultBuildingAddress;
        private String county;
        private String countyFips;
        private String carrierRoute;
        private CarrierRouteTypeEnum carrierRouteType;
        private OptionalNullable<Double> latitude;
        private OptionalNullable<Double> longitude;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  primaryNumber  String value for primaryNumber.
         * @param  streetPredirection  StreetPredirectionEnum value for streetPredirection.
         * @param  streetName  String value for streetName.
         * @param  streetSuffix  String value for streetSuffix.
         * @param  streetPostdirection  StreetPostdirectionEnum value for streetPostdirection.
         * @param  secondaryDesignator  String value for secondaryDesignator.
         * @param  secondaryNumber  String value for secondaryNumber.
         * @param  pmbDesignator  String value for pmbDesignator.
         * @param  pmbNumber  String value for pmbNumber.
         * @param  extraSecondaryDesignator  String value for extraSecondaryDesignator.
         * @param  extraSecondaryNumber  String value for extraSecondaryNumber.
         * @param  city  String value for city.
         * @param  state  String value for state.
         * @param  zipCode  String value for zipCode.
         * @param  zipCodePlus4  Object value for zipCodePlus4.
         * @param  zipCodeType  ZipCodeTypeEnum value for zipCodeType.
         * @param  deliveryPointBarcode  String value for deliveryPointBarcode.
         * @param  addressType  AddressTypeEnum value for addressType.
         * @param  recordType  RecordTypeEnum value for recordType.
         * @param  defaultBuildingAddress  boolean value for defaultBuildingAddress.
         * @param  county  String value for county.
         * @param  countyFips  String value for countyFips.
         * @param  carrierRoute  String value for carrierRoute.
         * @param  carrierRouteType  CarrierRouteTypeEnum value for carrierRouteType.
         */
        public Builder(String primaryNumber, StreetPredirectionEnum streetPredirection,
                String streetName, String streetSuffix, StreetPostdirectionEnum streetPostdirection,
                String secondaryDesignator, String secondaryNumber, String pmbDesignator,
                String pmbNumber, String extraSecondaryDesignator, String extraSecondaryNumber,
                String city, String state, String zipCode, Object zipCodePlus4,
                ZipCodeTypeEnum zipCodeType, String deliveryPointBarcode,
                AddressTypeEnum addressType, RecordTypeEnum recordType,
                boolean defaultBuildingAddress, String county, String countyFips,
                String carrierRoute, CarrierRouteTypeEnum carrierRouteType) {
            this.primaryNumber = primaryNumber;
            this.streetPredirection = streetPredirection;
            this.streetName = streetName;
            this.streetSuffix = streetSuffix;
            this.streetPostdirection = streetPostdirection;
            this.secondaryDesignator = secondaryDesignator;
            this.secondaryNumber = secondaryNumber;
            this.pmbDesignator = pmbDesignator;
            this.pmbNumber = pmbNumber;
            this.extraSecondaryDesignator = extraSecondaryDesignator;
            this.extraSecondaryNumber = extraSecondaryNumber;
            this.city = city;
            this.state = state;
            this.zipCode = zipCode;
            this.zipCodePlus4 = zipCodePlus4;
            this.zipCodeType = zipCodeType;
            this.deliveryPointBarcode = deliveryPointBarcode;
            this.addressType = addressType;
            this.recordType = recordType;
            this.defaultBuildingAddress = defaultBuildingAddress;
            this.county = county;
            this.countyFips = countyFips;
            this.carrierRoute = carrierRoute;
            this.carrierRouteType = carrierRouteType;
        }

        /**
         * Setter for primaryNumber.
         * @param  primaryNumber  String value for primaryNumber.
         * @return Builder
         */
        public Builder primaryNumber(String primaryNumber) {
            this.primaryNumber = primaryNumber;
            return this;
        }

        /**
         * Setter for streetPredirection.
         * @param  streetPredirection  StreetPredirectionEnum value for streetPredirection.
         * @return Builder
         */
        public Builder streetPredirection(StreetPredirectionEnum streetPredirection) {
            this.streetPredirection = streetPredirection;
            return this;
        }

        /**
         * Setter for streetName.
         * @param  streetName  String value for streetName.
         * @return Builder
         */
        public Builder streetName(String streetName) {
            this.streetName = streetName;
            return this;
        }

        /**
         * Setter for streetSuffix.
         * @param  streetSuffix  String value for streetSuffix.
         * @return Builder
         */
        public Builder streetSuffix(String streetSuffix) {
            this.streetSuffix = streetSuffix;
            return this;
        }

        /**
         * Setter for streetPostdirection.
         * @param  streetPostdirection  StreetPostdirectionEnum value for streetPostdirection.
         * @return Builder
         */
        public Builder streetPostdirection(StreetPostdirectionEnum streetPostdirection) {
            this.streetPostdirection = streetPostdirection;
            return this;
        }

        /**
         * Setter for secondaryDesignator.
         * @param  secondaryDesignator  String value for secondaryDesignator.
         * @return Builder
         */
        public Builder secondaryDesignator(String secondaryDesignator) {
            this.secondaryDesignator = secondaryDesignator;
            return this;
        }

        /**
         * Setter for secondaryNumber.
         * @param  secondaryNumber  String value for secondaryNumber.
         * @return Builder
         */
        public Builder secondaryNumber(String secondaryNumber) {
            this.secondaryNumber = secondaryNumber;
            return this;
        }

        /**
         * Setter for pmbDesignator.
         * @param  pmbDesignator  String value for pmbDesignator.
         * @return Builder
         */
        public Builder pmbDesignator(String pmbDesignator) {
            this.pmbDesignator = pmbDesignator;
            return this;
        }

        /**
         * Setter for pmbNumber.
         * @param  pmbNumber  String value for pmbNumber.
         * @return Builder
         */
        public Builder pmbNumber(String pmbNumber) {
            this.pmbNumber = pmbNumber;
            return this;
        }

        /**
         * Setter for extraSecondaryDesignator.
         * @param  extraSecondaryDesignator  String value for extraSecondaryDesignator.
         * @return Builder
         */
        public Builder extraSecondaryDesignator(String extraSecondaryDesignator) {
            this.extraSecondaryDesignator = extraSecondaryDesignator;
            return this;
        }

        /**
         * Setter for extraSecondaryNumber.
         * @param  extraSecondaryNumber  String value for extraSecondaryNumber.
         * @return Builder
         */
        public Builder extraSecondaryNumber(String extraSecondaryNumber) {
            this.extraSecondaryNumber = extraSecondaryNumber;
            return this;
        }

        /**
         * Setter for city.
         * @param  city  String value for city.
         * @return Builder
         */
        public Builder city(String city) {
            this.city = city;
            return this;
        }

        /**
         * Setter for state.
         * @param  state  String value for state.
         * @return Builder
         */
        public Builder state(String state) {
            this.state = state;
            return this;
        }

        /**
         * Setter for zipCode.
         * @param  zipCode  String value for zipCode.
         * @return Builder
         */
        public Builder zipCode(String zipCode) {
            this.zipCode = zipCode;
            return this;
        }

        /**
         * Setter for zipCodePlus4.
         * @param  zipCodePlus4  Object value for zipCodePlus4.
         * @return Builder
         */
        public Builder zipCodePlus4(Object zipCodePlus4) {
            this.zipCodePlus4 = zipCodePlus4;
            return this;
        }

        /**
         * Setter for zipCodeType.
         * @param  zipCodeType  ZipCodeTypeEnum value for zipCodeType.
         * @return Builder
         */
        public Builder zipCodeType(ZipCodeTypeEnum zipCodeType) {
            this.zipCodeType = zipCodeType;
            return this;
        }

        /**
         * Setter for deliveryPointBarcode.
         * @param  deliveryPointBarcode  String value for deliveryPointBarcode.
         * @return Builder
         */
        public Builder deliveryPointBarcode(String deliveryPointBarcode) {
            this.deliveryPointBarcode = deliveryPointBarcode;
            return this;
        }

        /**
         * Setter for addressType.
         * @param  addressType  AddressTypeEnum value for addressType.
         * @return Builder
         */
        public Builder addressType(AddressTypeEnum addressType) {
            this.addressType = addressType;
            return this;
        }

        /**
         * Setter for recordType.
         * @param  recordType  RecordTypeEnum value for recordType.
         * @return Builder
         */
        public Builder recordType(RecordTypeEnum recordType) {
            this.recordType = recordType;
            return this;
        }

        /**
         * Setter for defaultBuildingAddress.
         * @param  defaultBuildingAddress  boolean value for defaultBuildingAddress.
         * @return Builder
         */
        public Builder defaultBuildingAddress(boolean defaultBuildingAddress) {
            this.defaultBuildingAddress = defaultBuildingAddress;
            return this;
        }

        /**
         * Setter for county.
         * @param  county  String value for county.
         * @return Builder
         */
        public Builder county(String county) {
            this.county = county;
            return this;
        }

        /**
         * Setter for countyFips.
         * @param  countyFips  String value for countyFips.
         * @return Builder
         */
        public Builder countyFips(String countyFips) {
            this.countyFips = countyFips;
            return this;
        }

        /**
         * Setter for carrierRoute.
         * @param  carrierRoute  String value for carrierRoute.
         * @return Builder
         */
        public Builder carrierRoute(String carrierRoute) {
            this.carrierRoute = carrierRoute;
            return this;
        }

        /**
         * Setter for carrierRouteType.
         * @param  carrierRouteType  CarrierRouteTypeEnum value for carrierRouteType.
         * @return Builder
         */
        public Builder carrierRouteType(CarrierRouteTypeEnum carrierRouteType) {
            this.carrierRouteType = carrierRouteType;
            return this;
        }

        /**
         * Setter for latitude.
         * @param  latitude  Double value for latitude.
         * @return Builder
         */
        public Builder latitude(Double latitude) {
            this.latitude = OptionalNullable.of(latitude);
            return this;
        }

        /**
         * UnSetter for latitude.
         * @return Builder
         */
        public Builder unsetLatitude() {
            latitude = null;
            return this;
        }

        /**
         * Setter for longitude.
         * @param  longitude  Double value for longitude.
         * @return Builder
         */
        public Builder longitude(Double longitude) {
            this.longitude = OptionalNullable.of(longitude);
            return this;
        }

        /**
         * UnSetter for longitude.
         * @return Builder
         */
        public Builder unsetLongitude() {
            longitude = null;
            return this;
        }

        /**
         * Builds a new {@link UsComponents} object using the set fields.
         * @return {@link UsComponents}
         */
        public UsComponents build() {
            return new UsComponents(primaryNumber, streetPredirection, streetName, streetSuffix,
                    streetPostdirection, secondaryDesignator, secondaryNumber, pmbDesignator,
                    pmbNumber, extraSecondaryDesignator, extraSecondaryNumber, city, state, zipCode,
                    zipCodePlus4, zipCodeType, deliveryPointBarcode, addressType, recordType,
                    defaultBuildingAddress, county, countyFips, carrierRoute, carrierRouteType,
                    latitude, longitude);
        }
    }
}
