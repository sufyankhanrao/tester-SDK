/*
 * TesterXMLLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package localhost3000;

import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Consumer;
import localhost3000.controllers.AttributesAndElementsModel;
import localhost3000.controllers.AttributesModelWithInheritance;
import localhost3000.controllers.DiscriminateUsingAttribute;
import localhost3000.controllers.DiscriminateUsingElement;
import localhost3000.controllers.ElementsArray;
import localhost3000.controllers.ElementsModelWithInheritance;
import localhost3000.controllers.IntegerEnumeration;
import localhost3000.controllers.NamedElementsArray;
import localhost3000.controllers.NestedAttributesModel;
import localhost3000.controllers.NestedElementsModel;
import localhost3000.controllers.SimpleAttributesModel;
import localhost3000.controllers.SimpleElementsModel;
import localhost3000.controllers.SimpleInteger;
import localhost3000.controllers.SimpleLong;
import localhost3000.controllers.SimplePrecision;
import localhost3000.controllers.SimpleString;
import localhost3000.controllers.SimpleUUID;
import localhost3000.controllers.SingleElementModelWithModelNodeName;
import localhost3000.controllers.StringEnumeration;
import localhost3000.controllers.WrappedAndNamedArray;
import localhost3000.controllers.WrappedArray;
import localhost3000.http.client.HttpClient;
import localhost3000.http.client.HttpClientConfiguration;
import localhost3000.http.client.OkClient;
import localhost3000.http.client.ReadonlyHttpClientConfiguration;

/**
 * Gateway class for the library.
 * This class acts as a factory for Controllers.
 * It holds the state of the SDK.
 */
public final class TesterXMLClient implements Configuration {

    /**
     * Private store for controllers.
     */
    private DiscriminateUsingAttribute discriminateUsingAttribute;
    private DiscriminateUsingElement discriminateUsingElement;
    private SimpleAttributesModel simpleAttributesModel;
    private AttributesModelWithInheritance attributesModelWithInheritance;
    private NestedAttributesModel nestedAttributesModel;
    private SimpleElementsModel simpleElementsModel;
    private ElementsModelWithInheritance elementsModelWithInheritance;
    private NestedElementsModel nestedElementsModel;
    private SingleElementModelWithModelNodeName singleElementModelWithModelNodeName;
    private AttributesAndElementsModel attributesAndElementsModel;
    private StringEnumeration stringEnumeration;
    private IntegerEnumeration integerEnumeration;
    private ElementsArray elementsArray;
    private NamedElementsArray namedElementsArray;
    private WrappedArray wrappedArray;
    private WrappedAndNamedArray wrappedAndNamedArray;
    private SimpleInteger simpleInteger;
    private SimplePrecision simplePrecision;
    private SimpleLong simpleLong;
    private SimpleString simpleString;
    private SimpleUUID simpleUUID;

    /**
     * Current API environment.
     */
    private final Environment environment;

    /**
     * The HTTP Client instance to use for making HTTP requests.
     */
    private final HttpClient httpClient;

    /**
     * Http Client Configuration instance.
     */
    private final ReadonlyHttpClientConfiguration httpClientConfig;

    /**
     * Map of authentication Managers.
     */
    private Map<String, AuthManager> authManagers;

    private TesterXMLClient(Environment environment, HttpClient httpClient,
            ReadonlyHttpClientConfiguration httpClientConfig,
            Map<String, AuthManager> authManagers) {
        this.environment = environment;
        this.httpClient = httpClient;
        this.httpClientConfig = httpClientConfig;

        this.authManagers = (authManagers == null) ? new HashMap<>() : new HashMap<>(authManagers);


        discriminateUsingAttribute = new DiscriminateUsingAttribute(this, this.httpClient,
                this.authManagers);
        discriminateUsingElement = new DiscriminateUsingElement(this, this.httpClient,
                this.authManagers);
        simpleAttributesModel = new SimpleAttributesModel(this, this.httpClient, this.authManagers);
        attributesModelWithInheritance = new AttributesModelWithInheritance(this, this.httpClient,
                this.authManagers);
        nestedAttributesModel = new NestedAttributesModel(this, this.httpClient, this.authManagers);
        simpleElementsModel = new SimpleElementsModel(this, this.httpClient, this.authManagers);
        elementsModelWithInheritance = new ElementsModelWithInheritance(this, this.httpClient,
                this.authManagers);
        nestedElementsModel = new NestedElementsModel(this, this.httpClient, this.authManagers);
        singleElementModelWithModelNodeName = new SingleElementModelWithModelNodeName(this,
                this.httpClient, this.authManagers);
        attributesAndElementsModel = new AttributesAndElementsModel(this, this.httpClient,
                this.authManagers);
        stringEnumeration = new StringEnumeration(this, this.httpClient, this.authManagers);
        integerEnumeration = new IntegerEnumeration(this, this.httpClient, this.authManagers);
        elementsArray = new ElementsArray(this, this.httpClient, this.authManagers);
        namedElementsArray = new NamedElementsArray(this, this.httpClient, this.authManagers);
        wrappedArray = new WrappedArray(this, this.httpClient, this.authManagers);
        wrappedAndNamedArray = new WrappedAndNamedArray(this, this.httpClient, this.authManagers);
        simpleInteger = new SimpleInteger(this, this.httpClient, this.authManagers);
        simplePrecision = new SimplePrecision(this, this.httpClient, this.authManagers);
        simpleLong = new SimpleLong(this, this.httpClient, this.authManagers);
        simpleString = new SimpleString(this, this.httpClient, this.authManagers);
        simpleUUID = new SimpleUUID(this, this.httpClient, this.authManagers);
    }

    /**
     * Shutdown the underlying HttpClient instance.
     */
    public static void shutdown() {
        OkClient.shutdown();
    }

    /**
     * Get the instance of DiscriminateUsingAttribute.
     * @return discriminateUsingAttribute
     */
    public DiscriminateUsingAttribute getDiscriminateUsingAttribute() {
        return discriminateUsingAttribute;
    }

    /**
     * Get the instance of DiscriminateUsingElement.
     * @return discriminateUsingElement
     */
    public DiscriminateUsingElement getDiscriminateUsingElement() {
        return discriminateUsingElement;
    }

    /**
     * Get the instance of SimpleAttributesModel.
     * @return simpleAttributesModel
     */
    public SimpleAttributesModel getSimpleAttributesModel() {
        return simpleAttributesModel;
    }

    /**
     * Get the instance of AttributesModelWithInheritance.
     * @return attributesModelWithInheritance
     */
    public AttributesModelWithInheritance getAttributesModelWithInheritance() {
        return attributesModelWithInheritance;
    }

    /**
     * Get the instance of NestedAttributesModel.
     * @return nestedAttributesModel
     */
    public NestedAttributesModel getNestedAttributesModel() {
        return nestedAttributesModel;
    }

    /**
     * Get the instance of SimpleElementsModel.
     * @return simpleElementsModel
     */
    public SimpleElementsModel getSimpleElementsModel() {
        return simpleElementsModel;
    }

    /**
     * Get the instance of ElementsModelWithInheritance.
     * @return elementsModelWithInheritance
     */
    public ElementsModelWithInheritance getElementsModelWithInheritance() {
        return elementsModelWithInheritance;
    }

    /**
     * Get the instance of NestedElementsModel.
     * @return nestedElementsModel
     */
    public NestedElementsModel getNestedElementsModel() {
        return nestedElementsModel;
    }

    /**
     * Get the instance of SingleElementModelWithModelNodeName.
     * @return singleElementModelWithModelNodeName
     */
    public SingleElementModelWithModelNodeName getSingleElementModelWithModelNodeName() {
        return singleElementModelWithModelNodeName;
    }

    /**
     * Get the instance of AttributesAndElementsModel.
     * @return attributesAndElementsModel
     */
    public AttributesAndElementsModel getAttributesAndElementsModel() {
        return attributesAndElementsModel;
    }

    /**
     * Get the instance of StringEnumeration.
     * @return stringEnumeration
     */
    public StringEnumeration getStringEnumeration() {
        return stringEnumeration;
    }

    /**
     * Get the instance of IntegerEnumeration.
     * @return integerEnumeration
     */
    public IntegerEnumeration getIntegerEnumeration() {
        return integerEnumeration;
    }

    /**
     * Get the instance of ElementsArray.
     * @return elementsArray
     */
    public ElementsArray getElementsArray() {
        return elementsArray;
    }

    /**
     * Get the instance of NamedElementsArray.
     * @return namedElementsArray
     */
    public NamedElementsArray getNamedElementsArray() {
        return namedElementsArray;
    }

    /**
     * Get the instance of WrappedArray.
     * @return wrappedArray
     */
    public WrappedArray getWrappedArray() {
        return wrappedArray;
    }

    /**
     * Get the instance of WrappedAndNamedArray.
     * @return wrappedAndNamedArray
     */
    public WrappedAndNamedArray getWrappedAndNamedArray() {
        return wrappedAndNamedArray;
    }

    /**
     * Get the instance of SimpleInteger.
     * @return simpleInteger
     */
    public SimpleInteger getSimpleInteger() {
        return simpleInteger;
    }

    /**
     * Get the instance of SimplePrecision.
     * @return simplePrecision
     */
    public SimplePrecision getSimplePrecision() {
        return simplePrecision;
    }

    /**
     * Get the instance of SimpleLong.
     * @return simpleLong
     */
    public SimpleLong getSimpleLong() {
        return simpleLong;
    }

    /**
     * Get the instance of SimpleString.
     * @return simpleString
     */
    public SimpleString getSimpleString() {
        return simpleString;
    }

    /**
     * Get the instance of SimpleUUID.
     * @return simpleUUID
     */
    public SimpleUUID getSimpleUUID() {
        return simpleUUID;
    }

    /**
     * Current API environment.
     * @return environment
     */
    public Environment getEnvironment() {
        return environment;
    }

    /**
     * The HTTP Client instance to use for making HTTP requests.
     * @return httpClient
     */
    private HttpClient getHttpClient() {
        return httpClient;
    }

    /**
     * Http Client Configuration instance.
     * @return httpClientConfig
     */
    public ReadonlyHttpClientConfiguration getHttpClientConfig() {
        return httpClientConfig;
    }

    /**
     * The timeout to use for making HTTP requests.
     * @deprecated This method will be removed in a future version. Use
     *             {@link #getHttpClientConfig()} instead.
     *
     * @return timeout
     */
    @Deprecated
    public long timeout() {
        return httpClientConfig.getTimeout();
    }

    /**
     * Get base URI by current environment.
     * @param server Server for which to get the base URI
     * @return Processed base URI
     */
    public String getBaseUri(Server server) {
        Map<String, SimpleEntry<Object, Boolean>> parameters = new HashMap<>();
        StringBuilder baseUrl = new StringBuilder(environmentMapper(environment, server));
        ApiHelper.appendUrlWithTemplateParameters(baseUrl, parameters);
        return baseUrl.toString();
    }

    /**
     * Get base URI by current environment.
     * @return Processed base URI
     */
    public String getBaseUri() {
        return getBaseUri(Server.ENUM_DEFAULT);
    }

    /**
     * Base URLs by environment and server aliases.
     * @param environment Environment for which to get the base URI
     * @param server Server for which to get the base URI
     * @return base URL
     */
    private static String environmentMapper(Environment environment, Server server) {
        if (environment.equals(Environment.PRODUCTION)) {
            if (server.equals(Server.ENUM_DEFAULT)) {
                return "https://example.com/api";
            }
        }
        if (environment.equals(Environment.TESTING)) {
            if (server.equals(Server.ENUM_DEFAULT)) {
                return "http://localhost:3000/body-xml";
            }
        }
        return "http://localhost:3000/body-xml";
    }

    /**
     * Converts this TesterXMLClient into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "TesterXMLClient [" + "environment=" + environment + ", httpClientConfig="
                + httpClientConfig + ", authManagers=" + authManagers + "]";
    }

    /**
     * Builds a new {@link TesterXMLClient.Builder} object.
     * Creates the instance with the state of the current client.
     * @return a new {@link TesterXMLClient.Builder} object
     */
    public Builder newBuilder() {
        Builder builder = new Builder();
        builder.environment = getEnvironment();
        builder.httpClient = getHttpClient();
        builder.authManagers = authManagers;
        builder.httpClientConfig(configBldr -> configBldr =
                ((HttpClientConfiguration) httpClientConfig).newBuilder());
        return builder;
    }

    /**
     * Class to build instances of {@link TesterXMLClient}.
     */
    public static class Builder {

        private Environment environment = Environment.TESTING;
        private HttpClient httpClient;
        private Map<String, AuthManager> authManagers = null;
        private HttpClientConfiguration.Builder httpClientConfigBuilder =
                new HttpClientConfiguration.Builder();


        /**
         * Current API environment.
         * @param environment The environment for client.
         * @return Builder
         */
        public Builder environment(Environment environment) {
            this.environment = environment;
            return this;
        }

        /**
         * The timeout to use for making HTTP requests.
         * @deprecated This method will be removed in a future version. Use
         *             {@link #httpClientConfig(Consumer) httpClientConfig} instead.
         * @param timeout must be greater then 0.
         * @return Builder
         */
        @Deprecated
        public Builder timeout(long timeout) {
            this.httpClientConfigBuilder.timeout(timeout);
            return this;
        }

        /**
         * Setter for the Builder of httpClientConfiguration, takes in an operation to be performed
         * on the builder instance of HTTP client configuration.
         * 
         * @param action Consumer for the builder of httpClientConfiguration.
         * @return Builder
         */
        public Builder httpClientConfig(Consumer<HttpClientConfiguration.Builder> action) {
            action.accept(httpClientConfigBuilder);
            return this;
        }

        /**
         * Builds a new TesterXMLClient object using the set fields.
         * @return TesterXMLClient
         */
        public TesterXMLClient build() {
            HttpClientConfiguration httpClientConfig = httpClientConfigBuilder.build();
            httpClient = new OkClient(httpClientConfig);

            return new TesterXMLClient(environment, httpClient, httpClientConfig, authManagers);
        }
    }
}