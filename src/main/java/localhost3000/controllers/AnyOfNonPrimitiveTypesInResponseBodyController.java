/*
 * AnyOfNonScalarEndpointsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package localhost3000.controllers;

import com.fasterxml.jackson.core.type.TypeReference;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import localhost3000.ApiHelper;
import localhost3000.AuthManager;
import localhost3000.Configuration;
import localhost3000.exceptions.ApiException;
import localhost3000.http.Headers;
import localhost3000.http.client.HttpCallback;
import localhost3000.http.client.HttpClient;
import localhost3000.http.client.HttpContext;
import localhost3000.http.request.HttpRequest;
import localhost3000.http.response.HttpResponse;
import localhost3000.http.response.HttpStringResponse;
import localhost3000.models.containers.GetAnyofArrayOfArrayOfMapFlagSession;
import localhost3000.models.containers.GetAnyofArrayOfArraysSession;
import localhost3000.models.containers.GetAnyofArrayOfMapFlagOfArrayOfMapFlagSession;
import localhost3000.models.containers.GetAnyofArrayOfMapFlagOfArraySession;
import localhost3000.models.containers.GetAnyofArrayOfMapFlagOfMapSession;
import localhost3000.models.containers.GetAnyofArrayOfMapFlagOfMixedArrayOfMapFlagSession;
import localhost3000.models.containers.GetAnyofArrayOfMapsSession;
import localhost3000.models.containers.GetAnyofArrayOfMixedArraysSession;
import localhost3000.models.containers.GetAnyofInnerArrayOfMapFlagSession;
import localhost3000.models.containers.GetAnyofInnerArraySession;
import localhost3000.models.containers.GetAnyofInnerMapOfArraySession;
import localhost3000.models.containers.GetAnyofInnerMapSession;
import localhost3000.models.containers.GetAnyofInnerMixedArrayOfMapFlagSession;
import localhost3000.models.containers.GetAnyofInnerMixedArraysSession;
import localhost3000.models.containers.GetAnyofInnerMixedMapOfArraySession;
import localhost3000.models.containers.GetAnyofInnerMixedMapSession;
import localhost3000.models.containers.GetAnyofMapOfArrayOfMapFlagSession;
import localhost3000.models.containers.GetAnyofMapOfArrayOfMapOfArraySession;
import localhost3000.models.containers.GetAnyofMapOfArrayOfMixedMapOfArraySession;
import localhost3000.models.containers.GetAnyofMapOfArraySession;
import localhost3000.models.containers.GetAnyofMapOfInnerMixedMapSession;
import localhost3000.models.containers.GetAnyofMapOfMapSession;
import localhost3000.models.containers.GetAnyofOuterArrayOfMapFlagSession;
import localhost3000.models.containers.GetAnyofOuterArraySession;
import localhost3000.models.containers.GetAnyofOuterMapOfArraySession;
import localhost3000.models.containers.GetAnyofOuterMapSession;
import localhost3000.models.containers.GetAnyofSimpleSession;
import localhost3000.models.containers.GetMultiLevelAnyofSession;

/**
 * This class lists all the endpoints of the groups.
 */
public final class AnyOfNonPrimitiveTypesInResponseBodyController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public AnyOfNonPrimitiveTypesInResponseBodyController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }

    /**
     * Initializes the controller with HTTPCallback.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     * @param httpCallback    Callback to be called before and after the HTTP call.
     */
    public AnyOfNonPrimitiveTypesInResponseBodyController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        super(config, httpClient, authManagers, httpCallback);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the GetAnyofSimpleSession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetAnyofSimpleSession getAnyofSimple(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofSimpleRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofSimpleResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the GetAnyofSimpleSession response from the API call
     */
    public CompletableFuture<GetAnyofSimpleSession> getAnyofSimpleAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofSimpleRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofSimpleResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofSimple.
     */
    private HttpRequest buildGetAnyofSimpleRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/simple");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofSimple.
     * @return An object of type GetAnyofSimpleSession
     */
    private GetAnyofSimpleSession handleGetAnyofSimpleResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetAnyofSimpleSession result = ApiHelper.deserialize(responseBody,
                GetAnyofSimpleSession.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the List of GetAnyofOuterArraySession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<GetAnyofOuterArraySession> getAnyofOuterArray(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofOuterArrayRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofOuterArrayResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the List of GetAnyofOuterArraySession response from the API call
     */
    public CompletableFuture<List<GetAnyofOuterArraySession>> getAnyofOuterArrayAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofOuterArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofOuterArrayResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofOuterArray.
     */
    private HttpRequest buildGetAnyofOuterArrayRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/outerArray");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofOuterArray.
     * @return An object of type List of GetAnyofOuterArraySession
     */
    private List<GetAnyofOuterArraySession> handleGetAnyofOuterArrayResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        List<GetAnyofOuterArraySession> result = ApiHelper.deserializeArray(responseBody,
                GetAnyofOuterArraySession[].class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the GetAnyofInnerArraySession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetAnyofInnerArraySession getAnyofInnerArray(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofInnerArrayRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofInnerArrayResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the GetAnyofInnerArraySession response from the API call
     */
    public CompletableFuture<GetAnyofInnerArraySession> getAnyofInnerArrayAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofInnerArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofInnerArrayResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofInnerArray.
     */
    private HttpRequest buildGetAnyofInnerArrayRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/innerArray");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofInnerArray.
     * @return An object of type GetAnyofInnerArraySession
     */
    private GetAnyofInnerArraySession handleGetAnyofInnerArrayResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetAnyofInnerArraySession result = ApiHelper.deserialize(responseBody,
                GetAnyofInnerArraySession.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the List of GetAnyofArrayOfArraysSession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<GetAnyofArrayOfArraysSession> getAnyofArrayOfArrays(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofArrayOfArraysRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofArrayOfArraysResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the List of GetAnyofArrayOfArraysSession response from the API call
     */
    public CompletableFuture<List<GetAnyofArrayOfArraysSession>> getAnyofArrayOfArraysAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofArrayOfArraysRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofArrayOfArraysResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofArrayOfArrays.
     */
    private HttpRequest buildGetAnyofArrayOfArraysRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/arrayOfArrays");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofArrayOfArrays.
     * @return An object of type List of GetAnyofArrayOfArraysSession
     */
    private List<GetAnyofArrayOfArraysSession> handleGetAnyofArrayOfArraysResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        List<GetAnyofArrayOfArraysSession> result = ApiHelper.deserializeArray(responseBody,
                GetAnyofArrayOfArraysSession[].class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the GetAnyofInnerMixedArraysSession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetAnyofInnerMixedArraysSession getAnyofInnerMixedArrays(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofInnerMixedArraysRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofInnerMixedArraysResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the GetAnyofInnerMixedArraysSession response from the API call
     */
    public CompletableFuture<GetAnyofInnerMixedArraysSession> getAnyofInnerMixedArraysAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofInnerMixedArraysRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofInnerMixedArraysResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofInnerMixedArrays.
     */
    private HttpRequest buildGetAnyofInnerMixedArraysRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/innerMixedArray");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofInnerMixedArrays.
     * @return An object of type GetAnyofInnerMixedArraysSession
     */
    private GetAnyofInnerMixedArraysSession handleGetAnyofInnerMixedArraysResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetAnyofInnerMixedArraysSession result = ApiHelper.deserialize(responseBody,
                GetAnyofInnerMixedArraysSession.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the List of GetAnyofArrayOfMixedArraysSession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<GetAnyofArrayOfMixedArraysSession> getAnyofArrayOfMixedArrays(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofArrayOfMixedArraysRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofArrayOfMixedArraysResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the List of GetAnyofArrayOfMixedArraysSession response from the API call
     */
    public CompletableFuture<List<GetAnyofArrayOfMixedArraysSession>> getAnyofArrayOfMixedArraysAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofArrayOfMixedArraysRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofArrayOfMixedArraysResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofArrayOfMixedArrays.
     */
    private HttpRequest buildGetAnyofArrayOfMixedArraysRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/arrayOfMixedArray");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofArrayOfMixedArrays.
     * @return An object of type List of GetAnyofArrayOfMixedArraysSession
     */
    private List<GetAnyofArrayOfMixedArraysSession> handleGetAnyofArrayOfMixedArraysResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        List<GetAnyofArrayOfMixedArraysSession> result = ApiHelper.deserializeArray(responseBody,
                GetAnyofArrayOfMixedArraysSession[].class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the Map of String, GetAnyofOuterMapSession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Map<String, GetAnyofOuterMapSession> getAnyofOuterMap(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofOuterMapRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofOuterMapResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the Map of String, GetAnyofOuterMapSession response from the API call
     */
    public CompletableFuture<Map<String, GetAnyofOuterMapSession>> getAnyofOuterMapAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofOuterMapRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofOuterMapResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofOuterMap.
     */
    private HttpRequest buildGetAnyofOuterMapRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/outerMap");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofOuterMap.
     * @return An object of type Map of String, GetAnyofOuterMapSession
     */
    private Map<String, GetAnyofOuterMapSession> handleGetAnyofOuterMapResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Map<String, GetAnyofOuterMapSession> result = ApiHelper.deserialize(responseBody,
                new TypeReference<Map<String, GetAnyofOuterMapSession>>(){});

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the GetAnyofInnerMapSession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetAnyofInnerMapSession getAnyofInnerMap(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofInnerMapRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofInnerMapResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the GetAnyofInnerMapSession response from the API call
     */
    public CompletableFuture<GetAnyofInnerMapSession> getAnyofInnerMapAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofInnerMapRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofInnerMapResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofInnerMap.
     */
    private HttpRequest buildGetAnyofInnerMapRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/innerMap");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofInnerMap.
     * @return An object of type GetAnyofInnerMapSession
     */
    private GetAnyofInnerMapSession handleGetAnyofInnerMapResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetAnyofInnerMapSession result = ApiHelper.deserialize(responseBody,
                GetAnyofInnerMapSession.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the Map of String, GetAnyofMapOfMapSession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Map<String, GetAnyofMapOfMapSession> getAnyofMapOfMap(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofMapOfMapRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofMapOfMapResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the Map of String, GetAnyofMapOfMapSession response from the API call
     */
    public CompletableFuture<Map<String, GetAnyofMapOfMapSession>> getAnyofMapOfMapAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofMapOfMapRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofMapOfMapResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofMapOfMap.
     */
    private HttpRequest buildGetAnyofMapOfMapRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/mapOfMaps");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofMapOfMap.
     * @return An object of type Map of String, GetAnyofMapOfMapSession
     */
    private Map<String, GetAnyofMapOfMapSession> handleGetAnyofMapOfMapResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Map<String, GetAnyofMapOfMapSession> result = ApiHelper.deserialize(responseBody,
                new TypeReference<Map<String, GetAnyofMapOfMapSession>>(){});

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the GetAnyofInnerMixedMapSession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetAnyofInnerMixedMapSession getAnyofInnerMixedMap(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofInnerMixedMapRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofInnerMixedMapResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the GetAnyofInnerMixedMapSession response from the API call
     */
    public CompletableFuture<GetAnyofInnerMixedMapSession> getAnyofInnerMixedMapAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofInnerMixedMapRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofInnerMixedMapResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofInnerMixedMap.
     */
    private HttpRequest buildGetAnyofInnerMixedMapRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/innerMixedMap");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofInnerMixedMap.
     * @return An object of type GetAnyofInnerMixedMapSession
     */
    private GetAnyofInnerMixedMapSession handleGetAnyofInnerMixedMapResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetAnyofInnerMixedMapSession result = ApiHelper.deserialize(responseBody,
                GetAnyofInnerMixedMapSession.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the Map of String, GetAnyofMapOfInnerMixedMapSession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Map<String, GetAnyofMapOfInnerMixedMapSession> getAnyofMapOfInnerMixedMap(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofMapOfInnerMixedMapRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofMapOfInnerMixedMapResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the Map of String, GetAnyofMapOfInnerMixedMapSession response from the API call
     */
    public CompletableFuture<Map<String, GetAnyofMapOfInnerMixedMapSession>> getAnyofMapOfInnerMixedMapAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofMapOfInnerMixedMapRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofMapOfInnerMixedMapResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofMapOfInnerMixedMap.
     */
    private HttpRequest buildGetAnyofMapOfInnerMixedMapRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/mapOfMixedMap");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofMapOfInnerMixedMap.
     * @return An object of type Map of String, GetAnyofMapOfInnerMixedMapSession
     */
    private Map<String, GetAnyofMapOfInnerMixedMapSession> handleGetAnyofMapOfInnerMixedMapResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Map<String, GetAnyofMapOfInnerMixedMapSession> result = ApiHelper.deserialize(responseBody,
                new TypeReference<Map<String, GetAnyofMapOfInnerMixedMapSession>>(){});

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the List of String, GetAnyofOuterArrayOfMapFlagSession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<Map<String, GetAnyofOuterArrayOfMapFlagSession>> getAnyofOuterArrayOfMapFlag(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofOuterArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofOuterArrayOfMapFlagResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the List of String, GetAnyofOuterArrayOfMapFlagSession response from the API call
     */
    public CompletableFuture<List<Map<String, GetAnyofOuterArrayOfMapFlagSession>>> getAnyofOuterArrayOfMapFlagAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofOuterArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofOuterArrayOfMapFlagResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofOuterArrayOfMapFlag.
     */
    private HttpRequest buildGetAnyofOuterArrayOfMapFlagRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/outerArrayOfMapFlag");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofOuterArrayOfMapFlag.
     * @return An object of type List of String, GetAnyofOuterArrayOfMapFlagSession
     */
    private List<Map<String, GetAnyofOuterArrayOfMapFlagSession>> handleGetAnyofOuterArrayOfMapFlagResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        List<Map<String, GetAnyofOuterArrayOfMapFlagSession>> result = ApiHelper.deserialize(responseBody,
                new TypeReference<List<Map<String, GetAnyofOuterArrayOfMapFlagSession>>>(){});

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the GetAnyofInnerArrayOfMapFlagSession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetAnyofInnerArrayOfMapFlagSession getAnyofInnerArrayOfMapFlag(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofInnerArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofInnerArrayOfMapFlagResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the GetAnyofInnerArrayOfMapFlagSession response from the API call
     */
    public CompletableFuture<GetAnyofInnerArrayOfMapFlagSession> getAnyofInnerArrayOfMapFlagAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofInnerArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofInnerArrayOfMapFlagResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofInnerArrayOfMapFlag.
     */
    private HttpRequest buildGetAnyofInnerArrayOfMapFlagRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/innerArrayOfMapFlag");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofInnerArrayOfMapFlag.
     * @return An object of type GetAnyofInnerArrayOfMapFlagSession
     */
    private GetAnyofInnerArrayOfMapFlagSession handleGetAnyofInnerArrayOfMapFlagResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetAnyofInnerArrayOfMapFlagSession result = ApiHelper.deserialize(responseBody,
                GetAnyofInnerArrayOfMapFlagSession.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the List of String, GetAnyofArrayOfMapFlagOfArrayOfMapFlagSession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<Map<String, GetAnyofArrayOfMapFlagOfArrayOfMapFlagSession>> getAnyofArrayOfMapFlagOfArrayOfMapFlag(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofArrayOfMapFlagOfArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofArrayOfMapFlagOfArrayOfMapFlagResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the List of String, GetAnyofArrayOfMapFlagOfArrayOfMapFlagSession response from the API call
     */
    public CompletableFuture<List<Map<String, GetAnyofArrayOfMapFlagOfArrayOfMapFlagSession>>> getAnyofArrayOfMapFlagOfArrayOfMapFlagAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofArrayOfMapFlagOfArrayOfMapFlagRequest(
                isPrimitiveType, isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofArrayOfMapFlagOfArrayOfMapFlagResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofArrayOfMapFlagOfArrayOfMapFlag.
     */
    private HttpRequest buildGetAnyofArrayOfMapFlagOfArrayOfMapFlagRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/arrayOfMapFlagOfArrayOfMapFlag");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofArrayOfMapFlagOfArrayOfMapFlag.
     * @return An object of type List of String, GetAnyofArrayOfMapFlagOfArrayOfMapFlagSession
     */
    private List<Map<String, GetAnyofArrayOfMapFlagOfArrayOfMapFlagSession>> handleGetAnyofArrayOfMapFlagOfArrayOfMapFlagResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        List<Map<String, GetAnyofArrayOfMapFlagOfArrayOfMapFlagSession>> result = ApiHelper.deserialize(responseBody,
                new TypeReference<List<Map<String, GetAnyofArrayOfMapFlagOfArrayOfMapFlagSession>>>(){});

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the GetAnyofInnerMixedArrayOfMapFlagSession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetAnyofInnerMixedArrayOfMapFlagSession getAnyofInnerMixedArrayOfMapFlag(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofInnerMixedArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofInnerMixedArrayOfMapFlagResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the GetAnyofInnerMixedArrayOfMapFlagSession response from the API call
     */
    public CompletableFuture<GetAnyofInnerMixedArrayOfMapFlagSession> getAnyofInnerMixedArrayOfMapFlagAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofInnerMixedArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofInnerMixedArrayOfMapFlagResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofInnerMixedArrayOfMapFlag.
     */
    private HttpRequest buildGetAnyofInnerMixedArrayOfMapFlagRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/innerMixedArrayOfMap");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofInnerMixedArrayOfMapFlag.
     * @return An object of type GetAnyofInnerMixedArrayOfMapFlagSession
     */
    private GetAnyofInnerMixedArrayOfMapFlagSession handleGetAnyofInnerMixedArrayOfMapFlagResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetAnyofInnerMixedArrayOfMapFlagSession result = ApiHelper.deserialize(responseBody,
                GetAnyofInnerMixedArrayOfMapFlagSession.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the List of String, GetAnyofArrayOfMapFlagOfMixedArrayOfMapFlagSession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<Map<String, GetAnyofArrayOfMapFlagOfMixedArrayOfMapFlagSession>> getAnyofArrayOfMapFlagOfMixedArrayOfMapFlag(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofArrayOfMapFlagOfMixedArrayOfMapFlagRequest(
                isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofArrayOfMapFlagOfMixedArrayOfMapFlagResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the List of String, GetAnyofArrayOfMapFlagOfMixedArrayOfMapFlagSession response from the API call
     */
    public CompletableFuture<List<Map<String, GetAnyofArrayOfMapFlagOfMixedArrayOfMapFlagSession>>> getAnyofArrayOfMapFlagOfMixedArrayOfMapFlagAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofArrayOfMapFlagOfMixedArrayOfMapFlagRequest(
                isPrimitiveType, isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofArrayOfMapFlagOfMixedArrayOfMapFlagResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofArrayOfMapFlagOfMixedArrayOfMapFlag.
     */
    private HttpRequest buildGetAnyofArrayOfMapFlagOfMixedArrayOfMapFlagRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/arrayOfMapFlagOfMixedArrayOfMap");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofArrayOfMapFlagOfMixedArrayOfMapFlag.
     * @return An object of type List of String, GetAnyofArrayOfMapFlagOfMixedArrayOfMapFlagSession
     */
    private List<Map<String, GetAnyofArrayOfMapFlagOfMixedArrayOfMapFlagSession>> handleGetAnyofArrayOfMapFlagOfMixedArrayOfMapFlagResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        List<Map<String, GetAnyofArrayOfMapFlagOfMixedArrayOfMapFlagSession>> result = ApiHelper.deserialize(responseBody,
                new TypeReference<List<Map<String, GetAnyofArrayOfMapFlagOfMixedArrayOfMapFlagSession>>>(){});

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the Map of GetAnyofOuterMapOfArraySession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Map<String, List<GetAnyofOuterMapOfArraySession>> getAnyofOuterMapOfArray(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofOuterMapOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofOuterMapOfArrayResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the Map of GetAnyofOuterMapOfArraySession response from the API call
     */
    public CompletableFuture<Map<String, List<GetAnyofOuterMapOfArraySession>>> getAnyofOuterMapOfArrayAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofOuterMapOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofOuterMapOfArrayResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofOuterMapOfArray.
     */
    private HttpRequest buildGetAnyofOuterMapOfArrayRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/outerMapOfArray");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofOuterMapOfArray.
     * @return An object of type Map of GetAnyofOuterMapOfArraySession
     */
    private Map<String, List<GetAnyofOuterMapOfArraySession>> handleGetAnyofOuterMapOfArrayResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Map<String, List<GetAnyofOuterMapOfArraySession>> result = ApiHelper.deserialize(responseBody,
                new TypeReference<Map<String, List<GetAnyofOuterMapOfArraySession>>>(){});

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the GetAnyofInnerMapOfArraySession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetAnyofInnerMapOfArraySession getAnyofInnerMapOfArray(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofInnerMapOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofInnerMapOfArrayResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the GetAnyofInnerMapOfArraySession response from the API call
     */
    public CompletableFuture<GetAnyofInnerMapOfArraySession> getAnyofInnerMapOfArrayAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofInnerMapOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofInnerMapOfArrayResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofInnerMapOfArray.
     */
    private HttpRequest buildGetAnyofInnerMapOfArrayRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/innerMapOfArray");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofInnerMapOfArray.
     * @return An object of type GetAnyofInnerMapOfArraySession
     */
    private GetAnyofInnerMapOfArraySession handleGetAnyofInnerMapOfArrayResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetAnyofInnerMapOfArraySession result = ApiHelper.deserialize(responseBody,
                GetAnyofInnerMapOfArraySession.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the Map of GetAnyofMapOfArrayOfMapOfArraySession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Map<String, List<GetAnyofMapOfArrayOfMapOfArraySession>> getAnyofMapOfArrayOfMapOfArray(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofMapOfArrayOfMapOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofMapOfArrayOfMapOfArrayResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the Map of GetAnyofMapOfArrayOfMapOfArraySession response from the API call
     */
    public CompletableFuture<Map<String, List<GetAnyofMapOfArrayOfMapOfArraySession>>> getAnyofMapOfArrayOfMapOfArrayAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofMapOfArrayOfMapOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofMapOfArrayOfMapOfArrayResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofMapOfArrayOfMapOfArray.
     */
    private HttpRequest buildGetAnyofMapOfArrayOfMapOfArrayRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/mapOfArrayOfInnerMapOfArray");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofMapOfArrayOfMapOfArray.
     * @return An object of type Map of GetAnyofMapOfArrayOfMapOfArraySession
     */
    private Map<String, List<GetAnyofMapOfArrayOfMapOfArraySession>> handleGetAnyofMapOfArrayOfMapOfArrayResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Map<String, List<GetAnyofMapOfArrayOfMapOfArraySession>> result = ApiHelper.deserialize(responseBody,
                new TypeReference<Map<String, List<GetAnyofMapOfArrayOfMapOfArraySession>>>(){});

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the GetAnyofInnerMixedMapOfArraySession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetAnyofInnerMixedMapOfArraySession getAnyofInnerMixedMapOfArray(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofInnerMixedMapOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofInnerMixedMapOfArrayResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the GetAnyofInnerMixedMapOfArraySession response from the API call
     */
    public CompletableFuture<GetAnyofInnerMixedMapOfArraySession> getAnyofInnerMixedMapOfArrayAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofInnerMixedMapOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofInnerMixedMapOfArrayResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofInnerMixedMapOfArray.
     */
    private HttpRequest buildGetAnyofInnerMixedMapOfArrayRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/innerMixedMapOfArray");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofInnerMixedMapOfArray.
     * @return An object of type GetAnyofInnerMixedMapOfArraySession
     */
    private GetAnyofInnerMixedMapOfArraySession handleGetAnyofInnerMixedMapOfArrayResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetAnyofInnerMixedMapOfArraySession result = ApiHelper.deserialize(responseBody,
                GetAnyofInnerMixedMapOfArraySession.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the Map of GetAnyofMapOfArrayOfMixedMapOfArraySession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Map<String, List<GetAnyofMapOfArrayOfMixedMapOfArraySession>> getAnyofMapOfArrayOfMixedMapOfArray(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofMapOfArrayOfMixedMapOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofMapOfArrayOfMixedMapOfArrayResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the Map of GetAnyofMapOfArrayOfMixedMapOfArraySession response from the API call
     */
    public CompletableFuture<Map<String, List<GetAnyofMapOfArrayOfMixedMapOfArraySession>>> getAnyofMapOfArrayOfMixedMapOfArrayAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofMapOfArrayOfMixedMapOfArrayRequest(
                isPrimitiveType, isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofMapOfArrayOfMixedMapOfArrayResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofMapOfArrayOfMixedMapOfArray.
     */
    private HttpRequest buildGetAnyofMapOfArrayOfMixedMapOfArrayRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/mapOfArrayOfMixedMapOfArray");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofMapOfArrayOfMixedMapOfArray.
     * @return An object of type Map of GetAnyofMapOfArrayOfMixedMapOfArraySession
     */
    private Map<String, List<GetAnyofMapOfArrayOfMixedMapOfArraySession>> handleGetAnyofMapOfArrayOfMixedMapOfArrayResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Map<String, List<GetAnyofMapOfArrayOfMixedMapOfArraySession>> result = ApiHelper.deserialize(responseBody,
                new TypeReference<Map<String, List<GetAnyofMapOfArrayOfMixedMapOfArraySession>>>(){});

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the List of GetAnyofArrayOfMapsSession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<GetAnyofArrayOfMapsSession> getAnyofArrayOfMaps(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofArrayOfMapsRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofArrayOfMapsResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the List of GetAnyofArrayOfMapsSession response from the API call
     */
    public CompletableFuture<List<GetAnyofArrayOfMapsSession>> getAnyofArrayOfMapsAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofArrayOfMapsRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofArrayOfMapsResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofArrayOfMaps.
     */
    private HttpRequest buildGetAnyofArrayOfMapsRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/arrayOfMaps");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofArrayOfMaps.
     * @return An object of type List of GetAnyofArrayOfMapsSession
     */
    private List<GetAnyofArrayOfMapsSession> handleGetAnyofArrayOfMapsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        List<GetAnyofArrayOfMapsSession> result = ApiHelper.deserializeArray(responseBody,
                GetAnyofArrayOfMapsSession[].class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the List of GetAnyofArrayOfArrayOfMapFlagSession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<GetAnyofArrayOfArrayOfMapFlagSession> getAnyofArrayOfArrayOfMapFlag(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofArrayOfArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofArrayOfArrayOfMapFlagResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the List of GetAnyofArrayOfArrayOfMapFlagSession response from the API call
     */
    public CompletableFuture<List<GetAnyofArrayOfArrayOfMapFlagSession>> getAnyofArrayOfArrayOfMapFlagAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofArrayOfArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofArrayOfArrayOfMapFlagResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofArrayOfArrayOfMapFlag.
     */
    private HttpRequest buildGetAnyofArrayOfArrayOfMapFlagRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/arrayOfArrayOfMapFlag");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofArrayOfArrayOfMapFlag.
     * @return An object of type List of GetAnyofArrayOfArrayOfMapFlagSession
     */
    private List<GetAnyofArrayOfArrayOfMapFlagSession> handleGetAnyofArrayOfArrayOfMapFlagResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        List<GetAnyofArrayOfArrayOfMapFlagSession> result = ApiHelper.deserializeArray(responseBody,
                GetAnyofArrayOfArrayOfMapFlagSession[].class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the Map of String, GetAnyofMapOfArraySession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Map<String, GetAnyofMapOfArraySession> getAnyofMapOfArray(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofMapOfArrayRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofMapOfArrayResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the Map of String, GetAnyofMapOfArraySession response from the API call
     */
    public CompletableFuture<Map<String, GetAnyofMapOfArraySession>> getAnyofMapOfArrayAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofMapOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofMapOfArrayResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofMapOfArray.
     */
    private HttpRequest buildGetAnyofMapOfArrayRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/mapOfArrays");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofMapOfArray.
     * @return An object of type Map of String, GetAnyofMapOfArraySession
     */
    private Map<String, GetAnyofMapOfArraySession> handleGetAnyofMapOfArrayResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Map<String, GetAnyofMapOfArraySession> result = ApiHelper.deserialize(responseBody,
                new TypeReference<Map<String, GetAnyofMapOfArraySession>>(){});

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the Map of String, GetAnyofMapOfArrayOfMapFlagSession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Map<String, GetAnyofMapOfArrayOfMapFlagSession> getAnyofMapOfArrayOfMapFlag(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofMapOfArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofMapOfArrayOfMapFlagResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the Map of String, GetAnyofMapOfArrayOfMapFlagSession response from the API call
     */
    public CompletableFuture<Map<String, GetAnyofMapOfArrayOfMapFlagSession>> getAnyofMapOfArrayOfMapFlagAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofMapOfArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofMapOfArrayOfMapFlagResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofMapOfArrayOfMapFlag.
     */
    private HttpRequest buildGetAnyofMapOfArrayOfMapFlagRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/mapOfArrayOfMapFlag");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofMapOfArrayOfMapFlag.
     * @return An object of type Map of String, GetAnyofMapOfArrayOfMapFlagSession
     */
    private Map<String, GetAnyofMapOfArrayOfMapFlagSession> handleGetAnyofMapOfArrayOfMapFlagResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Map<String, GetAnyofMapOfArrayOfMapFlagSession> result = ApiHelper.deserialize(responseBody,
                new TypeReference<Map<String, GetAnyofMapOfArrayOfMapFlagSession>>(){});

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the List of String, GetAnyofArrayOfMapFlagOfArraySession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<Map<String, GetAnyofArrayOfMapFlagOfArraySession>> getAnyofArrayOfMapFlagOfArray(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofArrayOfMapFlagOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofArrayOfMapFlagOfArrayResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the List of String, GetAnyofArrayOfMapFlagOfArraySession response from the API call
     */
    public CompletableFuture<List<Map<String, GetAnyofArrayOfMapFlagOfArraySession>>> getAnyofArrayOfMapFlagOfArrayAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofArrayOfMapFlagOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofArrayOfMapFlagOfArrayResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofArrayOfMapFlagOfArray.
     */
    private HttpRequest buildGetAnyofArrayOfMapFlagOfArrayRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/arrayOfMapFlagOfArray");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofArrayOfMapFlagOfArray.
     * @return An object of type List of String, GetAnyofArrayOfMapFlagOfArraySession
     */
    private List<Map<String, GetAnyofArrayOfMapFlagOfArraySession>> handleGetAnyofArrayOfMapFlagOfArrayResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        List<Map<String, GetAnyofArrayOfMapFlagOfArraySession>> result = ApiHelper.deserialize(responseBody,
                new TypeReference<List<Map<String, GetAnyofArrayOfMapFlagOfArraySession>>>(){});

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the List of String, GetAnyofArrayOfMapFlagOfMapSession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<Map<String, GetAnyofArrayOfMapFlagOfMapSession>> getAnyofArrayOfMapFlagOfMap(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofArrayOfMapFlagOfMapRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofArrayOfMapFlagOfMapResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the List of String, GetAnyofArrayOfMapFlagOfMapSession response from the API call
     */
    public CompletableFuture<List<Map<String, GetAnyofArrayOfMapFlagOfMapSession>>> getAnyofArrayOfMapFlagOfMapAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofArrayOfMapFlagOfMapRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofArrayOfMapFlagOfMapResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofArrayOfMapFlagOfMap.
     */
    private HttpRequest buildGetAnyofArrayOfMapFlagOfMapRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/arrayOfMapFlagOfMap");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofArrayOfMapFlagOfMap.
     * @return An object of type List of String, GetAnyofArrayOfMapFlagOfMapSession
     */
    private List<Map<String, GetAnyofArrayOfMapFlagOfMapSession>> handleGetAnyofArrayOfMapFlagOfMapResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        List<Map<String, GetAnyofArrayOfMapFlagOfMapSession>> result = ApiHelper.deserialize(responseBody,
                new TypeReference<List<Map<String, GetAnyofArrayOfMapFlagOfMapSession>>>(){});

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the GetMultiLevelAnyofSession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetMultiLevelAnyofSession getMultiLevelAnyof(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetMultiLevelAnyofRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetMultiLevelAnyofResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the GetMultiLevelAnyofSession response from the API call
     */
    public CompletableFuture<GetMultiLevelAnyofSession> getMultiLevelAnyofAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetMultiLevelAnyofRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetMultiLevelAnyofResponse(context));
    }

    /**
     * Builds the HttpRequest object for getMultiLevelAnyof.
     */
    private HttpRequest buildGetMultiLevelAnyofRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/multiLevel");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getMultiLevelAnyof.
     * @return An object of type GetMultiLevelAnyofSession
     */
    private GetMultiLevelAnyofSession handleGetMultiLevelAnyofResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetMultiLevelAnyofSession result = ApiHelper.deserialize(responseBody,
                GetMultiLevelAnyofSession.class);

        return result;
    }

}