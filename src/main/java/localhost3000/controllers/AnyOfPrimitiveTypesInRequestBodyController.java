/*
 * AnyOfScalarModelsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package localhost3000.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import localhost3000.ApiHelper;
import localhost3000.AuthManager;
import localhost3000.Configuration;
import localhost3000.exceptions.ApiException;
import localhost3000.http.Headers;
import localhost3000.http.client.HttpCallback;
import localhost3000.http.client.HttpClient;
import localhost3000.http.client.HttpContext;
import localhost3000.http.request.HttpRequest;
import localhost3000.http.response.HttpResponse;
import localhost3000.http.response.HttpStringResponse;
import localhost3000.models.ArrayOfArrayOfMapFlagCase;
import localhost3000.models.ArrayOfArraysCase;
import localhost3000.models.ArrayOfMapFlagOfArrayCase;
import localhost3000.models.ArrayOfMapFlagOfInnerArrayOfMapFlagCase;
import localhost3000.models.ArrayOfMapFlagOfInnerMixedArrayOfMapFlagCase;
import localhost3000.models.ArrayOfMapFlagOfMapCase;
import localhost3000.models.ArrayOfMapsCase;
import localhost3000.models.ArrayOfMixedArrayCase;
import localhost3000.models.InnerArrayCase;
import localhost3000.models.InnerArrayOfMapFlagCase;
import localhost3000.models.InnerMapCase;
import localhost3000.models.InnerMapOfArrayCase;
import localhost3000.models.InnerMixedArrayCase;
import localhost3000.models.InnerMixedMapCase;
import localhost3000.models.MapOfArrayOfInnerMapOfArrayCase;
import localhost3000.models.MapOfArrayOfInnerMixedMapOfArrayCase;
import localhost3000.models.MapOfArrayOfMapFlagCase;
import localhost3000.models.MapOfArraysCase;
import localhost3000.models.MapOfMapsCase;
import localhost3000.models.MapOfMixedMapCase;
import localhost3000.models.MixedArrayOfMapFlagCase;
import localhost3000.models.MixedMapOfArrayCase;
import localhost3000.models.MultiLevelAnyOf;
import localhost3000.models.OuterArrayCase;
import localhost3000.models.OuterArrayOfMapFlagCase;
import localhost3000.models.OuterMapCase;
import localhost3000.models.OuterMapOfArrayCase;
import localhost3000.models.ServerResponse;
import localhost3000.models.SimpleCase;

/**
 * This class lists all the endpoints of the groups.
 */
public final class AnyOfPrimitiveTypesInRequestBodyController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public AnyOfPrimitiveTypesInRequestBodyController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }

    /**
     * Initializes the controller with HTTPCallback.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     * @param httpCallback    Callback to be called before and after the HTTP call.
     */
    public AnyOfPrimitiveTypesInRequestBodyController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        super(config, httpClient, authManagers, httpCallback);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  simpleCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendAnyofSimple(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final SimpleCase simpleCase) throws ApiException, IOException {
        HttpRequest request = buildSendAnyofSimpleRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator, simpleCase);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendAnyofSimpleResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  simpleCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendAnyofSimpleAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final SimpleCase simpleCase) {
        return makeHttpCallAsync(() -> buildSendAnyofSimpleRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, simpleCase),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendAnyofSimpleResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendAnyofSimple.
     */
    private HttpRequest buildSendAnyofSimpleRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final SimpleCase simpleCase) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/body/simple");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(simpleCase);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendAnyofSimple.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendAnyofSimpleResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  outerArrayCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendAnyofOuterArray(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final OuterArrayCase outerArrayCase) throws ApiException, IOException {
        HttpRequest request = buildSendAnyofOuterArrayRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator, outerArrayCase);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendAnyofOuterArrayResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  outerArrayCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendAnyofOuterArrayAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final OuterArrayCase outerArrayCase) {
        return makeHttpCallAsync(() -> buildSendAnyofOuterArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, outerArrayCase),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendAnyofOuterArrayResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendAnyofOuterArray.
     */
    private HttpRequest buildSendAnyofOuterArrayRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final OuterArrayCase outerArrayCase) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/body/outerArray");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(outerArrayCase);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendAnyofOuterArray.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendAnyofOuterArrayResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  innerArrayCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendAnyofInnerArray(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final InnerArrayCase innerArrayCase) throws ApiException, IOException {
        HttpRequest request = buildSendAnyofInnerArrayRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator, innerArrayCase);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendAnyofInnerArrayResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  innerArrayCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendAnyofInnerArrayAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final InnerArrayCase innerArrayCase) {
        return makeHttpCallAsync(() -> buildSendAnyofInnerArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, innerArrayCase),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendAnyofInnerArrayResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendAnyofInnerArray.
     */
    private HttpRequest buildSendAnyofInnerArrayRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final InnerArrayCase innerArrayCase) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/body/innerArray");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(innerArrayCase);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendAnyofInnerArray.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendAnyofInnerArrayResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  arrayOfArraysCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendAnyofArrayOfArrays(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final ArrayOfArraysCase arrayOfArraysCase) throws ApiException, IOException {
        HttpRequest request = buildSendAnyofArrayOfArraysRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator, arrayOfArraysCase);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendAnyofArrayOfArraysResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  arrayOfArraysCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendAnyofArrayOfArraysAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final ArrayOfArraysCase arrayOfArraysCase) {
        return makeHttpCallAsync(() -> buildSendAnyofArrayOfArraysRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, arrayOfArraysCase),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendAnyofArrayOfArraysResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendAnyofArrayOfArrays.
     */
    private HttpRequest buildSendAnyofArrayOfArraysRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final ArrayOfArraysCase arrayOfArraysCase) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/body/arrayOfArrays");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(arrayOfArraysCase);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendAnyofArrayOfArrays.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendAnyofArrayOfArraysResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  innerMixedArrayCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendAnyofInnerMixedArrays(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final InnerMixedArrayCase innerMixedArrayCase) throws ApiException, IOException {
        HttpRequest request = buildSendAnyofInnerMixedArraysRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, innerMixedArrayCase);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendAnyofInnerMixedArraysResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  innerMixedArrayCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendAnyofInnerMixedArraysAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final InnerMixedArrayCase innerMixedArrayCase) {
        return makeHttpCallAsync(() -> buildSendAnyofInnerMixedArraysRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, innerMixedArrayCase),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendAnyofInnerMixedArraysResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendAnyofInnerMixedArrays.
     */
    private HttpRequest buildSendAnyofInnerMixedArraysRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final InnerMixedArrayCase innerMixedArrayCase) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/body/innerMixedArray");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(innerMixedArrayCase);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendAnyofInnerMixedArrays.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendAnyofInnerMixedArraysResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  arrayOfMixedArrayCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendAnyofArrayOfMixedArrays(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final ArrayOfMixedArrayCase arrayOfMixedArrayCase) throws ApiException, IOException {
        HttpRequest request = buildSendAnyofArrayOfMixedArraysRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, arrayOfMixedArrayCase);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendAnyofArrayOfMixedArraysResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  arrayOfMixedArrayCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendAnyofArrayOfMixedArraysAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final ArrayOfMixedArrayCase arrayOfMixedArrayCase) {
        return makeHttpCallAsync(() -> buildSendAnyofArrayOfMixedArraysRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, arrayOfMixedArrayCase),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendAnyofArrayOfMixedArraysResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendAnyofArrayOfMixedArrays.
     */
    private HttpRequest buildSendAnyofArrayOfMixedArraysRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final ArrayOfMixedArrayCase arrayOfMixedArrayCase) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/body/arrayOfMixedArray");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(arrayOfMixedArrayCase);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendAnyofArrayOfMixedArrays.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendAnyofArrayOfMixedArraysResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  outerMapCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendAnyofOuterMap(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final OuterMapCase outerMapCase) throws ApiException, IOException {
        HttpRequest request = buildSendAnyofOuterMapRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator, outerMapCase);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendAnyofOuterMapResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  outerMapCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendAnyofOuterMapAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final OuterMapCase outerMapCase) {
        return makeHttpCallAsync(() -> buildSendAnyofOuterMapRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, outerMapCase),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendAnyofOuterMapResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendAnyofOuterMap.
     */
    private HttpRequest buildSendAnyofOuterMapRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final OuterMapCase outerMapCase) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/body/outerMap");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(outerMapCase);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendAnyofOuterMap.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendAnyofOuterMapResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  innerMapCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendAnyofInnerMap(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final InnerMapCase innerMapCase) throws ApiException, IOException {
        HttpRequest request = buildSendAnyofInnerMapRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator, innerMapCase);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendAnyofInnerMapResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  innerMapCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendAnyofInnerMapAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final InnerMapCase innerMapCase) {
        return makeHttpCallAsync(() -> buildSendAnyofInnerMapRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, innerMapCase),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendAnyofInnerMapResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendAnyofInnerMap.
     */
    private HttpRequest buildSendAnyofInnerMapRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final InnerMapCase innerMapCase) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/body/innerMap");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(innerMapCase);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendAnyofInnerMap.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendAnyofInnerMapResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  mapOfMapsCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendAnyofMapOfMap(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final MapOfMapsCase mapOfMapsCase) throws ApiException, IOException {
        HttpRequest request = buildSendAnyofMapOfMapRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator, mapOfMapsCase);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendAnyofMapOfMapResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  mapOfMapsCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendAnyofMapOfMapAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final MapOfMapsCase mapOfMapsCase) {
        return makeHttpCallAsync(() -> buildSendAnyofMapOfMapRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, mapOfMapsCase),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendAnyofMapOfMapResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendAnyofMapOfMap.
     */
    private HttpRequest buildSendAnyofMapOfMapRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final MapOfMapsCase mapOfMapsCase) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/body/mapOfMaps");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(mapOfMapsCase);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendAnyofMapOfMap.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendAnyofMapOfMapResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  innerMixedMapCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendAnyofInnerMixedMap(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final InnerMixedMapCase innerMixedMapCase) throws ApiException, IOException {
        HttpRequest request = buildSendAnyofInnerMixedMapRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator, innerMixedMapCase);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendAnyofInnerMixedMapResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  innerMixedMapCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendAnyofInnerMixedMapAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final InnerMixedMapCase innerMixedMapCase) {
        return makeHttpCallAsync(() -> buildSendAnyofInnerMixedMapRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, innerMixedMapCase),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendAnyofInnerMixedMapResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendAnyofInnerMixedMap.
     */
    private HttpRequest buildSendAnyofInnerMixedMapRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final InnerMixedMapCase innerMixedMapCase) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/body/innerMixedMap");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(innerMixedMapCase);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendAnyofInnerMixedMap.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendAnyofInnerMixedMapResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  mapOfMixedMapCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendAnyofMapOfInnerMixedMap(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final MapOfMixedMapCase mapOfMixedMapCase) throws ApiException, IOException {
        HttpRequest request = buildSendAnyofMapOfInnerMixedMapRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, mapOfMixedMapCase);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendAnyofMapOfInnerMixedMapResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  mapOfMixedMapCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendAnyofMapOfInnerMixedMapAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final MapOfMixedMapCase mapOfMixedMapCase) {
        return makeHttpCallAsync(() -> buildSendAnyofMapOfInnerMixedMapRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, mapOfMixedMapCase),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendAnyofMapOfInnerMixedMapResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendAnyofMapOfInnerMixedMap.
     */
    private HttpRequest buildSendAnyofMapOfInnerMixedMapRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final MapOfMixedMapCase mapOfMixedMapCase) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/body/mapOfMixedMap");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(mapOfMixedMapCase);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendAnyofMapOfInnerMixedMap.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendAnyofMapOfInnerMixedMapResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  outerArrayOfMapFlagCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendAnyofOuterArrayOfMapFlag(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final OuterArrayOfMapFlagCase outerArrayOfMapFlagCase) throws ApiException, IOException {
        HttpRequest request = buildSendAnyofOuterArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, outerArrayOfMapFlagCase);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendAnyofOuterArrayOfMapFlagResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  outerArrayOfMapFlagCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendAnyofOuterArrayOfMapFlagAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final OuterArrayOfMapFlagCase outerArrayOfMapFlagCase) {
        return makeHttpCallAsync(() -> buildSendAnyofOuterArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, outerArrayOfMapFlagCase),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendAnyofOuterArrayOfMapFlagResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendAnyofOuterArrayOfMapFlag.
     */
    private HttpRequest buildSendAnyofOuterArrayOfMapFlagRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final OuterArrayOfMapFlagCase outerArrayOfMapFlagCase) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/body/outerArrayOfMapFlag");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(outerArrayOfMapFlagCase);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendAnyofOuterArrayOfMapFlag.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendAnyofOuterArrayOfMapFlagResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  innerArrayOfMapFlagCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendAnyofInnerArrayOfMapFlag(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final InnerArrayOfMapFlagCase innerArrayOfMapFlagCase) throws ApiException, IOException {
        HttpRequest request = buildSendAnyofInnerArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, innerArrayOfMapFlagCase);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendAnyofInnerArrayOfMapFlagResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  innerArrayOfMapFlagCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendAnyofInnerArrayOfMapFlagAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final InnerArrayOfMapFlagCase innerArrayOfMapFlagCase) {
        return makeHttpCallAsync(() -> buildSendAnyofInnerArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, innerArrayOfMapFlagCase),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendAnyofInnerArrayOfMapFlagResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendAnyofInnerArrayOfMapFlag.
     */
    private HttpRequest buildSendAnyofInnerArrayOfMapFlagRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final InnerArrayOfMapFlagCase innerArrayOfMapFlagCase) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/body/innerArrayOfMapFlag");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(innerArrayOfMapFlagCase);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendAnyofInnerArrayOfMapFlag.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendAnyofInnerArrayOfMapFlagResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  arrayOfMapFlagOfInnerArrayOfMapFlagCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendAnyofArrayOfMapFlagOfArrayOfMapFlag(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final ArrayOfMapFlagOfInnerArrayOfMapFlagCase arrayOfMapFlagOfInnerArrayOfMapFlagCase) throws ApiException, IOException {
        HttpRequest request = buildSendAnyofArrayOfMapFlagOfArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, arrayOfMapFlagOfInnerArrayOfMapFlagCase);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendAnyofArrayOfMapFlagOfArrayOfMapFlagResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  arrayOfMapFlagOfInnerArrayOfMapFlagCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendAnyofArrayOfMapFlagOfArrayOfMapFlagAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final ArrayOfMapFlagOfInnerArrayOfMapFlagCase arrayOfMapFlagOfInnerArrayOfMapFlagCase) {
        return makeHttpCallAsync(() -> buildSendAnyofArrayOfMapFlagOfArrayOfMapFlagRequest(
                isPrimitiveType, isAtEndpointLevel, hasDiscriminator,
                arrayOfMapFlagOfInnerArrayOfMapFlagCase),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendAnyofArrayOfMapFlagOfArrayOfMapFlagResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendAnyofArrayOfMapFlagOfArrayOfMapFlag.
     */
    private HttpRequest buildSendAnyofArrayOfMapFlagOfArrayOfMapFlagRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final ArrayOfMapFlagOfInnerArrayOfMapFlagCase arrayOfMapFlagOfInnerArrayOfMapFlagCase) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/body/arrayOfMapFlagOfArrayOfMapFlag");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(arrayOfMapFlagOfInnerArrayOfMapFlagCase);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendAnyofArrayOfMapFlagOfArrayOfMapFlag.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendAnyofArrayOfMapFlagOfArrayOfMapFlagResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  mixedArrayOfMapFlagCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendAnyofInnerMixedArrayOfMapFlag(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final MixedArrayOfMapFlagCase mixedArrayOfMapFlagCase) throws ApiException, IOException {
        HttpRequest request = buildSendAnyofInnerMixedArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, mixedArrayOfMapFlagCase);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendAnyofInnerMixedArrayOfMapFlagResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  mixedArrayOfMapFlagCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendAnyofInnerMixedArrayOfMapFlagAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final MixedArrayOfMapFlagCase mixedArrayOfMapFlagCase) {
        return makeHttpCallAsync(() -> buildSendAnyofInnerMixedArrayOfMapFlagRequest(
                isPrimitiveType, isAtEndpointLevel, hasDiscriminator, mixedArrayOfMapFlagCase),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendAnyofInnerMixedArrayOfMapFlagResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendAnyofInnerMixedArrayOfMapFlag.
     */
    private HttpRequest buildSendAnyofInnerMixedArrayOfMapFlagRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final MixedArrayOfMapFlagCase mixedArrayOfMapFlagCase) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/body/innerMixedArrayOfMap");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(mixedArrayOfMapFlagCase);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendAnyofInnerMixedArrayOfMapFlag.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendAnyofInnerMixedArrayOfMapFlagResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  arrayOfMapFlagOfInnerMixedArrayOfMapFlagCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendAnyofArrayOfMapFlagOfMixedArrayOfMapFlag(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final ArrayOfMapFlagOfInnerMixedArrayOfMapFlagCase arrayOfMapFlagOfInnerMixedArrayOfMapFlagCase) throws ApiException, IOException {
        HttpRequest request = buildSendAnyofArrayOfMapFlagOfMixedArrayOfMapFlagRequest(
                isPrimitiveType, isAtEndpointLevel, hasDiscriminator,
                arrayOfMapFlagOfInnerMixedArrayOfMapFlagCase);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendAnyofArrayOfMapFlagOfMixedArrayOfMapFlagResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  arrayOfMapFlagOfInnerMixedArrayOfMapFlagCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendAnyofArrayOfMapFlagOfMixedArrayOfMapFlagAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final ArrayOfMapFlagOfInnerMixedArrayOfMapFlagCase arrayOfMapFlagOfInnerMixedArrayOfMapFlagCase) {
        return makeHttpCallAsync(() -> buildSendAnyofArrayOfMapFlagOfMixedArrayOfMapFlagRequest(
                isPrimitiveType, isAtEndpointLevel, hasDiscriminator,
                arrayOfMapFlagOfInnerMixedArrayOfMapFlagCase),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendAnyofArrayOfMapFlagOfMixedArrayOfMapFlagResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendAnyofArrayOfMapFlagOfMixedArrayOfMapFlag.
     */
    private HttpRequest buildSendAnyofArrayOfMapFlagOfMixedArrayOfMapFlagRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final ArrayOfMapFlagOfInnerMixedArrayOfMapFlagCase arrayOfMapFlagOfInnerMixedArrayOfMapFlagCase) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/body/arrayOfMapFlagOfMixedArrayOfMap");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(arrayOfMapFlagOfInnerMixedArrayOfMapFlagCase);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendAnyofArrayOfMapFlagOfMixedArrayOfMapFlag.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendAnyofArrayOfMapFlagOfMixedArrayOfMapFlagResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  outerMapOfArrayCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendAnyofOuterMapOfArray(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final OuterMapOfArrayCase outerMapOfArrayCase) throws ApiException, IOException {
        HttpRequest request = buildSendAnyofOuterMapOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, outerMapOfArrayCase);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendAnyofOuterMapOfArrayResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  outerMapOfArrayCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendAnyofOuterMapOfArrayAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final OuterMapOfArrayCase outerMapOfArrayCase) {
        return makeHttpCallAsync(() -> buildSendAnyofOuterMapOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, outerMapOfArrayCase),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendAnyofOuterMapOfArrayResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendAnyofOuterMapOfArray.
     */
    private HttpRequest buildSendAnyofOuterMapOfArrayRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final OuterMapOfArrayCase outerMapOfArrayCase) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/body/outerMapOfArray");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(outerMapOfArrayCase);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendAnyofOuterMapOfArray.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendAnyofOuterMapOfArrayResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  innerMapOfArrayCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendAnyofInnerMapOfArray(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final InnerMapOfArrayCase innerMapOfArrayCase) throws ApiException, IOException {
        HttpRequest request = buildSendAnyofInnerMapOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, innerMapOfArrayCase);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendAnyofInnerMapOfArrayResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  innerMapOfArrayCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendAnyofInnerMapOfArrayAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final InnerMapOfArrayCase innerMapOfArrayCase) {
        return makeHttpCallAsync(() -> buildSendAnyofInnerMapOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, innerMapOfArrayCase),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendAnyofInnerMapOfArrayResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendAnyofInnerMapOfArray.
     */
    private HttpRequest buildSendAnyofInnerMapOfArrayRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final InnerMapOfArrayCase innerMapOfArrayCase) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/body/innerMapOfArray");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(innerMapOfArrayCase);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendAnyofInnerMapOfArray.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendAnyofInnerMapOfArrayResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  mapOfArrayOfInnerMapOfArrayCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendAnyofMapOfArrayOfMapOfArray(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final MapOfArrayOfInnerMapOfArrayCase mapOfArrayOfInnerMapOfArrayCase) throws ApiException, IOException {
        HttpRequest request = buildSendAnyofMapOfArrayOfMapOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, mapOfArrayOfInnerMapOfArrayCase);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendAnyofMapOfArrayOfMapOfArrayResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  mapOfArrayOfInnerMapOfArrayCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendAnyofMapOfArrayOfMapOfArrayAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final MapOfArrayOfInnerMapOfArrayCase mapOfArrayOfInnerMapOfArrayCase) {
        return makeHttpCallAsync(() -> buildSendAnyofMapOfArrayOfMapOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, mapOfArrayOfInnerMapOfArrayCase),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendAnyofMapOfArrayOfMapOfArrayResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendAnyofMapOfArrayOfMapOfArray.
     */
    private HttpRequest buildSendAnyofMapOfArrayOfMapOfArrayRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final MapOfArrayOfInnerMapOfArrayCase mapOfArrayOfInnerMapOfArrayCase) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/body/mapOfArrayOfInnerMapOfArray");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(mapOfArrayOfInnerMapOfArrayCase);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendAnyofMapOfArrayOfMapOfArray.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendAnyofMapOfArrayOfMapOfArrayResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  mixedMapOfArrayCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendAnyofInnerMixedMapOfArray(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final MixedMapOfArrayCase mixedMapOfArrayCase) throws ApiException, IOException {
        HttpRequest request = buildSendAnyofInnerMixedMapOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, mixedMapOfArrayCase);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendAnyofInnerMixedMapOfArrayResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  mixedMapOfArrayCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendAnyofInnerMixedMapOfArrayAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final MixedMapOfArrayCase mixedMapOfArrayCase) {
        return makeHttpCallAsync(() -> buildSendAnyofInnerMixedMapOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, mixedMapOfArrayCase),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendAnyofInnerMixedMapOfArrayResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendAnyofInnerMixedMapOfArray.
     */
    private HttpRequest buildSendAnyofInnerMixedMapOfArrayRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final MixedMapOfArrayCase mixedMapOfArrayCase) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/body/innerMixedMapOfArray");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(mixedMapOfArrayCase);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendAnyofInnerMixedMapOfArray.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendAnyofInnerMixedMapOfArrayResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  mapOfArrayOfInnerMixedMapOfArrayCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendAnyofMapOfArrayOfMixedMapOfArray(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final MapOfArrayOfInnerMixedMapOfArrayCase mapOfArrayOfInnerMixedMapOfArrayCase) throws ApiException, IOException {
        HttpRequest request = buildSendAnyofMapOfArrayOfMixedMapOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, mapOfArrayOfInnerMixedMapOfArrayCase);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendAnyofMapOfArrayOfMixedMapOfArrayResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  mapOfArrayOfInnerMixedMapOfArrayCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendAnyofMapOfArrayOfMixedMapOfArrayAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final MapOfArrayOfInnerMixedMapOfArrayCase mapOfArrayOfInnerMixedMapOfArrayCase) {
        return makeHttpCallAsync(() -> buildSendAnyofMapOfArrayOfMixedMapOfArrayRequest(
                isPrimitiveType, isAtEndpointLevel, hasDiscriminator,
                mapOfArrayOfInnerMixedMapOfArrayCase),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendAnyofMapOfArrayOfMixedMapOfArrayResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendAnyofMapOfArrayOfMixedMapOfArray.
     */
    private HttpRequest buildSendAnyofMapOfArrayOfMixedMapOfArrayRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final MapOfArrayOfInnerMixedMapOfArrayCase mapOfArrayOfInnerMixedMapOfArrayCase) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/body/mapOfArrayOfMixedMapOfArray");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(mapOfArrayOfInnerMixedMapOfArrayCase);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendAnyofMapOfArrayOfMixedMapOfArray.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendAnyofMapOfArrayOfMixedMapOfArrayResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  arrayOfMapsCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendAnyofArrayOfMaps(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final ArrayOfMapsCase arrayOfMapsCase) throws ApiException, IOException {
        HttpRequest request = buildSendAnyofArrayOfMapsRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator, arrayOfMapsCase);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendAnyofArrayOfMapsResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  arrayOfMapsCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendAnyofArrayOfMapsAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final ArrayOfMapsCase arrayOfMapsCase) {
        return makeHttpCallAsync(() -> buildSendAnyofArrayOfMapsRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, arrayOfMapsCase),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendAnyofArrayOfMapsResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendAnyofArrayOfMaps.
     */
    private HttpRequest buildSendAnyofArrayOfMapsRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final ArrayOfMapsCase arrayOfMapsCase) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/body/arrayOfMaps");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(arrayOfMapsCase);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendAnyofArrayOfMaps.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendAnyofArrayOfMapsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  arrayOfArrayOfMapFlagCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendAnyofArrayOfArrayOfMapFlag(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final ArrayOfArrayOfMapFlagCase arrayOfArrayOfMapFlagCase) throws ApiException, IOException {
        HttpRequest request = buildSendAnyofArrayOfArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, arrayOfArrayOfMapFlagCase);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendAnyofArrayOfArrayOfMapFlagResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  arrayOfArrayOfMapFlagCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendAnyofArrayOfArrayOfMapFlagAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final ArrayOfArrayOfMapFlagCase arrayOfArrayOfMapFlagCase) {
        return makeHttpCallAsync(() -> buildSendAnyofArrayOfArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, arrayOfArrayOfMapFlagCase),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendAnyofArrayOfArrayOfMapFlagResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendAnyofArrayOfArrayOfMapFlag.
     */
    private HttpRequest buildSendAnyofArrayOfArrayOfMapFlagRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final ArrayOfArrayOfMapFlagCase arrayOfArrayOfMapFlagCase) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/body/arrayOfArrayOfMapFlag");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(arrayOfArrayOfMapFlagCase);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendAnyofArrayOfArrayOfMapFlag.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendAnyofArrayOfArrayOfMapFlagResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  mapOfArraysCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendAnyofMapOfArray(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final MapOfArraysCase mapOfArraysCase) throws ApiException, IOException {
        HttpRequest request = buildSendAnyofMapOfArrayRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator, mapOfArraysCase);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendAnyofMapOfArrayResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  mapOfArraysCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendAnyofMapOfArrayAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final MapOfArraysCase mapOfArraysCase) {
        return makeHttpCallAsync(() -> buildSendAnyofMapOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, mapOfArraysCase),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendAnyofMapOfArrayResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendAnyofMapOfArray.
     */
    private HttpRequest buildSendAnyofMapOfArrayRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final MapOfArraysCase mapOfArraysCase) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/body/mapOfArrays");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(mapOfArraysCase);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendAnyofMapOfArray.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendAnyofMapOfArrayResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  mapOfArrayOfMapFlagCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendAnyofMapOfArrayOfMapFlag(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final MapOfArrayOfMapFlagCase mapOfArrayOfMapFlagCase) throws ApiException, IOException {
        HttpRequest request = buildSendAnyofMapOfArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, mapOfArrayOfMapFlagCase);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendAnyofMapOfArrayOfMapFlagResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  mapOfArrayOfMapFlagCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendAnyofMapOfArrayOfMapFlagAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final MapOfArrayOfMapFlagCase mapOfArrayOfMapFlagCase) {
        return makeHttpCallAsync(() -> buildSendAnyofMapOfArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, mapOfArrayOfMapFlagCase),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendAnyofMapOfArrayOfMapFlagResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendAnyofMapOfArrayOfMapFlag.
     */
    private HttpRequest buildSendAnyofMapOfArrayOfMapFlagRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final MapOfArrayOfMapFlagCase mapOfArrayOfMapFlagCase) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/body/mapOfArrayOfMapFlag");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(mapOfArrayOfMapFlagCase);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendAnyofMapOfArrayOfMapFlag.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendAnyofMapOfArrayOfMapFlagResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  arrayOfMapFlagOfArrayCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendAnyofArrayOfMapFlagOfArray(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final ArrayOfMapFlagOfArrayCase arrayOfMapFlagOfArrayCase) throws ApiException, IOException {
        HttpRequest request = buildSendAnyofArrayOfMapFlagOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, arrayOfMapFlagOfArrayCase);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendAnyofArrayOfMapFlagOfArrayResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  arrayOfMapFlagOfArrayCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendAnyofArrayOfMapFlagOfArrayAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final ArrayOfMapFlagOfArrayCase arrayOfMapFlagOfArrayCase) {
        return makeHttpCallAsync(() -> buildSendAnyofArrayOfMapFlagOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, arrayOfMapFlagOfArrayCase),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendAnyofArrayOfMapFlagOfArrayResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendAnyofArrayOfMapFlagOfArray.
     */
    private HttpRequest buildSendAnyofArrayOfMapFlagOfArrayRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final ArrayOfMapFlagOfArrayCase arrayOfMapFlagOfArrayCase) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/body/arrayOfMapFlagOfArray");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(arrayOfMapFlagOfArrayCase);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendAnyofArrayOfMapFlagOfArray.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendAnyofArrayOfMapFlagOfArrayResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  arrayOfMapFlagOfMapCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendAnyofArrayOfMapFlagOfMap(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final ArrayOfMapFlagOfMapCase arrayOfMapFlagOfMapCase) throws ApiException, IOException {
        HttpRequest request = buildSendAnyofArrayOfMapFlagOfMapRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, arrayOfMapFlagOfMapCase);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendAnyofArrayOfMapFlagOfMapResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  arrayOfMapFlagOfMapCase  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendAnyofArrayOfMapFlagOfMapAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final ArrayOfMapFlagOfMapCase arrayOfMapFlagOfMapCase) {
        return makeHttpCallAsync(() -> buildSendAnyofArrayOfMapFlagOfMapRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, arrayOfMapFlagOfMapCase),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendAnyofArrayOfMapFlagOfMapResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendAnyofArrayOfMapFlagOfMap.
     */
    private HttpRequest buildSendAnyofArrayOfMapFlagOfMapRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final ArrayOfMapFlagOfMapCase arrayOfMapFlagOfMapCase) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/body/arrayOfMapFlagOfMap");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(arrayOfMapFlagOfMapCase);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendAnyofArrayOfMapFlagOfMap.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendAnyofArrayOfMapFlagOfMapResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  multiLevelAnyOf  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendMultiLevelAnyof(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final MultiLevelAnyOf multiLevelAnyOf) throws ApiException, IOException {
        HttpRequest request = buildSendMultiLevelAnyofRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator, multiLevelAnyOf);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendMultiLevelAnyofResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  multiLevelAnyOf  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendMultiLevelAnyofAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final MultiLevelAnyOf multiLevelAnyOf) {
        return makeHttpCallAsync(() -> buildSendMultiLevelAnyofRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, multiLevelAnyOf),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendMultiLevelAnyofResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendMultiLevelAnyof.
     */
    private HttpRequest buildSendMultiLevelAnyofRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final MultiLevelAnyOf multiLevelAnyOf) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/body/multiLevel");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(multiLevelAnyOf);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendMultiLevelAnyof.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendMultiLevelAnyofResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

}