/*
 * AnyOfScalarModelsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package localhost3000.controllers;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import localhost3000.ApiHelper;
import localhost3000.AuthManager;
import localhost3000.Configuration;
import localhost3000.exceptions.ApiException;
import localhost3000.http.Headers;
import localhost3000.http.client.HttpCallback;
import localhost3000.http.client.HttpClient;
import localhost3000.http.client.HttpContext;
import localhost3000.http.request.HttpRequest;
import localhost3000.http.response.HttpResponse;
import localhost3000.http.response.HttpStringResponse;
import localhost3000.models.ArrayOfArrayOfMapFlagCase;
import localhost3000.models.ArrayOfArraysCase;
import localhost3000.models.ArrayOfMapFlagOfArrayCase;
import localhost3000.models.ArrayOfMapFlagOfInnerArrayOfMapFlagCase;
import localhost3000.models.ArrayOfMapFlagOfInnerMixedArrayOfMapFlagCase;
import localhost3000.models.ArrayOfMapFlagOfMapCase;
import localhost3000.models.ArrayOfMapsCase;
import localhost3000.models.ArrayOfMixedArrayCase;
import localhost3000.models.InnerArrayCase;
import localhost3000.models.InnerArrayOfMapFlagCase;
import localhost3000.models.InnerMapCase;
import localhost3000.models.InnerMapOfArrayCase;
import localhost3000.models.InnerMixedArrayCase;
import localhost3000.models.InnerMixedMapCase;
import localhost3000.models.MapOfArrayOfInnerMapOfArrayCase;
import localhost3000.models.MapOfArrayOfInnerMixedMapOfArrayCase;
import localhost3000.models.MapOfArrayOfMapFlagCase;
import localhost3000.models.MapOfArraysCase;
import localhost3000.models.MapOfMapsCase;
import localhost3000.models.MapOfMixedMapCase;
import localhost3000.models.MixedArrayOfMapFlagCase;
import localhost3000.models.MixedMapOfArrayCase;
import localhost3000.models.MultiLevelAnyOf;
import localhost3000.models.OuterArrayCase;
import localhost3000.models.OuterArrayOfMapFlagCase;
import localhost3000.models.OuterMapCase;
import localhost3000.models.OuterMapOfArrayCase;
import localhost3000.models.SimpleCase;

/**
 * This class lists all the endpoints of the groups.
 */
public final class AnyOfPrimitiveTypesInResponseBodyController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public AnyOfPrimitiveTypesInResponseBodyController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }

    /**
     * Initializes the controller with HTTPCallback.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     * @param httpCallback    Callback to be called before and after the HTTP call.
     */
    public AnyOfPrimitiveTypesInResponseBodyController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        super(config, httpClient, authManagers, httpCallback);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the SimpleCase response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public SimpleCase getAnyofSimple(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofSimpleRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofSimpleResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the SimpleCase response from the API call
     */
    public CompletableFuture<SimpleCase> getAnyofSimpleAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofSimpleRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofSimpleResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofSimple.
     */
    private HttpRequest buildGetAnyofSimpleRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/simple");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofSimple.
     * @return An object of type SimpleCase
     */
    private SimpleCase handleGetAnyofSimpleResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        SimpleCase result = ApiHelper.deserialize(responseBody,
                SimpleCase.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the OuterArrayCase response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public OuterArrayCase getAnyofOuterArray(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofOuterArrayRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofOuterArrayResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the OuterArrayCase response from the API call
     */
    public CompletableFuture<OuterArrayCase> getAnyofOuterArrayAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofOuterArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofOuterArrayResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofOuterArray.
     */
    private HttpRequest buildGetAnyofOuterArrayRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/outerArray");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofOuterArray.
     * @return An object of type OuterArrayCase
     */
    private OuterArrayCase handleGetAnyofOuterArrayResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        OuterArrayCase result = ApiHelper.deserialize(responseBody,
                OuterArrayCase.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the InnerArrayCase response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public InnerArrayCase getAnyofInnerArray(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofInnerArrayRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofInnerArrayResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the InnerArrayCase response from the API call
     */
    public CompletableFuture<InnerArrayCase> getAnyofInnerArrayAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofInnerArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofInnerArrayResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofInnerArray.
     */
    private HttpRequest buildGetAnyofInnerArrayRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/innerArray");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofInnerArray.
     * @return An object of type InnerArrayCase
     */
    private InnerArrayCase handleGetAnyofInnerArrayResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        InnerArrayCase result = ApiHelper.deserialize(responseBody,
                InnerArrayCase.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the ArrayOfArraysCase response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ArrayOfArraysCase getAnyofArrayOfArrays(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofArrayOfArraysRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofArrayOfArraysResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the ArrayOfArraysCase response from the API call
     */
    public CompletableFuture<ArrayOfArraysCase> getAnyofArrayOfArraysAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofArrayOfArraysRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofArrayOfArraysResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofArrayOfArrays.
     */
    private HttpRequest buildGetAnyofArrayOfArraysRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/arrayOfArrays");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofArrayOfArrays.
     * @return An object of type ArrayOfArraysCase
     */
    private ArrayOfArraysCase handleGetAnyofArrayOfArraysResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ArrayOfArraysCase result = ApiHelper.deserialize(responseBody,
                ArrayOfArraysCase.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the InnerMixedArrayCase response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public InnerMixedArrayCase getAnyofInnerMixedArrays(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofInnerMixedArraysRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofInnerMixedArraysResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the InnerMixedArrayCase response from the API call
     */
    public CompletableFuture<InnerMixedArrayCase> getAnyofInnerMixedArraysAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofInnerMixedArraysRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofInnerMixedArraysResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofInnerMixedArrays.
     */
    private HttpRequest buildGetAnyofInnerMixedArraysRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/innerMixedArray");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofInnerMixedArrays.
     * @return An object of type InnerMixedArrayCase
     */
    private InnerMixedArrayCase handleGetAnyofInnerMixedArraysResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        InnerMixedArrayCase result = ApiHelper.deserialize(responseBody,
                InnerMixedArrayCase.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the ArrayOfMixedArrayCase response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ArrayOfMixedArrayCase getAnyofArrayOfMixedArrays(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofArrayOfMixedArraysRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofArrayOfMixedArraysResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the ArrayOfMixedArrayCase response from the API call
     */
    public CompletableFuture<ArrayOfMixedArrayCase> getAnyofArrayOfMixedArraysAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofArrayOfMixedArraysRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofArrayOfMixedArraysResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofArrayOfMixedArrays.
     */
    private HttpRequest buildGetAnyofArrayOfMixedArraysRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/arrayOfMixedArray");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofArrayOfMixedArrays.
     * @return An object of type ArrayOfMixedArrayCase
     */
    private ArrayOfMixedArrayCase handleGetAnyofArrayOfMixedArraysResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ArrayOfMixedArrayCase result = ApiHelper.deserialize(responseBody,
                ArrayOfMixedArrayCase.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the OuterMapCase response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public OuterMapCase getAnyofOuterMap(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofOuterMapRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofOuterMapResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the OuterMapCase response from the API call
     */
    public CompletableFuture<OuterMapCase> getAnyofOuterMapAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofOuterMapRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofOuterMapResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofOuterMap.
     */
    private HttpRequest buildGetAnyofOuterMapRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/outerMap");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofOuterMap.
     * @return An object of type OuterMapCase
     */
    private OuterMapCase handleGetAnyofOuterMapResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        OuterMapCase result = ApiHelper.deserialize(responseBody,
                OuterMapCase.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the InnerMapCase response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public InnerMapCase getAnyofInnerMap(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofInnerMapRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofInnerMapResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the InnerMapCase response from the API call
     */
    public CompletableFuture<InnerMapCase> getAnyofInnerMapAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofInnerMapRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofInnerMapResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofInnerMap.
     */
    private HttpRequest buildGetAnyofInnerMapRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/innerMap");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofInnerMap.
     * @return An object of type InnerMapCase
     */
    private InnerMapCase handleGetAnyofInnerMapResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        InnerMapCase result = ApiHelper.deserialize(responseBody,
                InnerMapCase.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the MapOfMapsCase response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public MapOfMapsCase getAnyofMapOfMap(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofMapOfMapRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofMapOfMapResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the MapOfMapsCase response from the API call
     */
    public CompletableFuture<MapOfMapsCase> getAnyofMapOfMapAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofMapOfMapRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofMapOfMapResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofMapOfMap.
     */
    private HttpRequest buildGetAnyofMapOfMapRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/mapOfMaps");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofMapOfMap.
     * @return An object of type MapOfMapsCase
     */
    private MapOfMapsCase handleGetAnyofMapOfMapResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        MapOfMapsCase result = ApiHelper.deserialize(responseBody,
                MapOfMapsCase.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the InnerMixedMapCase response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public InnerMixedMapCase getAnyofInnerMixedMap(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofInnerMixedMapRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofInnerMixedMapResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the InnerMixedMapCase response from the API call
     */
    public CompletableFuture<InnerMixedMapCase> getAnyofInnerMixedMapAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofInnerMixedMapRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofInnerMixedMapResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofInnerMixedMap.
     */
    private HttpRequest buildGetAnyofInnerMixedMapRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/innerMixedMap");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofInnerMixedMap.
     * @return An object of type InnerMixedMapCase
     */
    private InnerMixedMapCase handleGetAnyofInnerMixedMapResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        InnerMixedMapCase result = ApiHelper.deserialize(responseBody,
                InnerMixedMapCase.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the MapOfMixedMapCase response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public MapOfMixedMapCase getAnyofMapOfInnerMixedMap(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofMapOfInnerMixedMapRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofMapOfInnerMixedMapResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the MapOfMixedMapCase response from the API call
     */
    public CompletableFuture<MapOfMixedMapCase> getAnyofMapOfInnerMixedMapAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofMapOfInnerMixedMapRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofMapOfInnerMixedMapResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofMapOfInnerMixedMap.
     */
    private HttpRequest buildGetAnyofMapOfInnerMixedMapRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/mapOfMixedMap");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofMapOfInnerMixedMap.
     * @return An object of type MapOfMixedMapCase
     */
    private MapOfMixedMapCase handleGetAnyofMapOfInnerMixedMapResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        MapOfMixedMapCase result = ApiHelper.deserialize(responseBody,
                MapOfMixedMapCase.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the OuterArrayOfMapFlagCase response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public OuterArrayOfMapFlagCase getAnyofOuterArrayOfMapFlag(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofOuterArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofOuterArrayOfMapFlagResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the OuterArrayOfMapFlagCase response from the API call
     */
    public CompletableFuture<OuterArrayOfMapFlagCase> getAnyofOuterArrayOfMapFlagAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofOuterArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofOuterArrayOfMapFlagResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofOuterArrayOfMapFlag.
     */
    private HttpRequest buildGetAnyofOuterArrayOfMapFlagRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/outerArrayOfMapFlag");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofOuterArrayOfMapFlag.
     * @return An object of type OuterArrayOfMapFlagCase
     */
    private OuterArrayOfMapFlagCase handleGetAnyofOuterArrayOfMapFlagResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        OuterArrayOfMapFlagCase result = ApiHelper.deserialize(responseBody,
                OuterArrayOfMapFlagCase.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the InnerArrayOfMapFlagCase response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public InnerArrayOfMapFlagCase getAnyofInnerArrayOfMapFlag(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofInnerArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofInnerArrayOfMapFlagResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the InnerArrayOfMapFlagCase response from the API call
     */
    public CompletableFuture<InnerArrayOfMapFlagCase> getAnyofInnerArrayOfMapFlagAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofInnerArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofInnerArrayOfMapFlagResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofInnerArrayOfMapFlag.
     */
    private HttpRequest buildGetAnyofInnerArrayOfMapFlagRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/innerArrayOfMapFlag");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofInnerArrayOfMapFlag.
     * @return An object of type InnerArrayOfMapFlagCase
     */
    private InnerArrayOfMapFlagCase handleGetAnyofInnerArrayOfMapFlagResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        InnerArrayOfMapFlagCase result = ApiHelper.deserialize(responseBody,
                InnerArrayOfMapFlagCase.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the ArrayOfMapFlagOfInnerArrayOfMapFlagCase response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ArrayOfMapFlagOfInnerArrayOfMapFlagCase getAnyofArrayOfMapFlagOfArrayOfMapFlag(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofArrayOfMapFlagOfArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofArrayOfMapFlagOfArrayOfMapFlagResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the ArrayOfMapFlagOfInnerArrayOfMapFlagCase response from the API call
     */
    public CompletableFuture<ArrayOfMapFlagOfInnerArrayOfMapFlagCase> getAnyofArrayOfMapFlagOfArrayOfMapFlagAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofArrayOfMapFlagOfArrayOfMapFlagRequest(
                isPrimitiveType, isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofArrayOfMapFlagOfArrayOfMapFlagResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofArrayOfMapFlagOfArrayOfMapFlag.
     */
    private HttpRequest buildGetAnyofArrayOfMapFlagOfArrayOfMapFlagRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/arrayOfMapFlagOfArrayOfMapFlag");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofArrayOfMapFlagOfArrayOfMapFlag.
     * @return An object of type ArrayOfMapFlagOfInnerArrayOfMapFlagCase
     */
    private ArrayOfMapFlagOfInnerArrayOfMapFlagCase handleGetAnyofArrayOfMapFlagOfArrayOfMapFlagResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ArrayOfMapFlagOfInnerArrayOfMapFlagCase result = ApiHelper.deserialize(responseBody,
                ArrayOfMapFlagOfInnerArrayOfMapFlagCase.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the MixedArrayOfMapFlagCase response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public MixedArrayOfMapFlagCase getAnyofInnerMixedArrayOfMapFlag(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofInnerMixedArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofInnerMixedArrayOfMapFlagResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the MixedArrayOfMapFlagCase response from the API call
     */
    public CompletableFuture<MixedArrayOfMapFlagCase> getAnyofInnerMixedArrayOfMapFlagAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofInnerMixedArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofInnerMixedArrayOfMapFlagResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofInnerMixedArrayOfMapFlag.
     */
    private HttpRequest buildGetAnyofInnerMixedArrayOfMapFlagRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/innerMixedArrayOfMap");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofInnerMixedArrayOfMapFlag.
     * @return An object of type MixedArrayOfMapFlagCase
     */
    private MixedArrayOfMapFlagCase handleGetAnyofInnerMixedArrayOfMapFlagResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        MixedArrayOfMapFlagCase result = ApiHelper.deserialize(responseBody,
                MixedArrayOfMapFlagCase.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the ArrayOfMapFlagOfInnerMixedArrayOfMapFlagCase response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ArrayOfMapFlagOfInnerMixedArrayOfMapFlagCase getAnyofArrayOfMapFlagOfMixedArrayOfMapFlag(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofArrayOfMapFlagOfMixedArrayOfMapFlagRequest(
                isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofArrayOfMapFlagOfMixedArrayOfMapFlagResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the ArrayOfMapFlagOfInnerMixedArrayOfMapFlagCase response from the API call
     */
    public CompletableFuture<ArrayOfMapFlagOfInnerMixedArrayOfMapFlagCase> getAnyofArrayOfMapFlagOfMixedArrayOfMapFlagAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofArrayOfMapFlagOfMixedArrayOfMapFlagRequest(
                isPrimitiveType, isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofArrayOfMapFlagOfMixedArrayOfMapFlagResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofArrayOfMapFlagOfMixedArrayOfMapFlag.
     */
    private HttpRequest buildGetAnyofArrayOfMapFlagOfMixedArrayOfMapFlagRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/arrayOfMapFlagOfMixedArrayOfMap");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofArrayOfMapFlagOfMixedArrayOfMapFlag.
     * @return An object of type ArrayOfMapFlagOfInnerMixedArrayOfMapFlagCase
     */
    private ArrayOfMapFlagOfInnerMixedArrayOfMapFlagCase handleGetAnyofArrayOfMapFlagOfMixedArrayOfMapFlagResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ArrayOfMapFlagOfInnerMixedArrayOfMapFlagCase result = ApiHelper.deserialize(responseBody,
                ArrayOfMapFlagOfInnerMixedArrayOfMapFlagCase.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the OuterMapOfArrayCase response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public OuterMapOfArrayCase getAnyofOuterMapOfArray(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofOuterMapOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofOuterMapOfArrayResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the OuterMapOfArrayCase response from the API call
     */
    public CompletableFuture<OuterMapOfArrayCase> getAnyofOuterMapOfArrayAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofOuterMapOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofOuterMapOfArrayResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofOuterMapOfArray.
     */
    private HttpRequest buildGetAnyofOuterMapOfArrayRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/outerMapOfArray");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofOuterMapOfArray.
     * @return An object of type OuterMapOfArrayCase
     */
    private OuterMapOfArrayCase handleGetAnyofOuterMapOfArrayResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        OuterMapOfArrayCase result = ApiHelper.deserialize(responseBody,
                OuterMapOfArrayCase.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the InnerMapOfArrayCase response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public InnerMapOfArrayCase getAnyofInnerMapOfArray(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofInnerMapOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofInnerMapOfArrayResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the InnerMapOfArrayCase response from the API call
     */
    public CompletableFuture<InnerMapOfArrayCase> getAnyofInnerMapOfArrayAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofInnerMapOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofInnerMapOfArrayResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofInnerMapOfArray.
     */
    private HttpRequest buildGetAnyofInnerMapOfArrayRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/innerMapOfArray");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofInnerMapOfArray.
     * @return An object of type InnerMapOfArrayCase
     */
    private InnerMapOfArrayCase handleGetAnyofInnerMapOfArrayResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        InnerMapOfArrayCase result = ApiHelper.deserialize(responseBody,
                InnerMapOfArrayCase.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the MapOfArrayOfInnerMapOfArrayCase response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public MapOfArrayOfInnerMapOfArrayCase getAnyofMapOfArrayOfMapOfArray(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofMapOfArrayOfMapOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofMapOfArrayOfMapOfArrayResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the MapOfArrayOfInnerMapOfArrayCase response from the API call
     */
    public CompletableFuture<MapOfArrayOfInnerMapOfArrayCase> getAnyofMapOfArrayOfMapOfArrayAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofMapOfArrayOfMapOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofMapOfArrayOfMapOfArrayResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofMapOfArrayOfMapOfArray.
     */
    private HttpRequest buildGetAnyofMapOfArrayOfMapOfArrayRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/mapOfArrayOfInnerMapOfArray");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofMapOfArrayOfMapOfArray.
     * @return An object of type MapOfArrayOfInnerMapOfArrayCase
     */
    private MapOfArrayOfInnerMapOfArrayCase handleGetAnyofMapOfArrayOfMapOfArrayResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        MapOfArrayOfInnerMapOfArrayCase result = ApiHelper.deserialize(responseBody,
                MapOfArrayOfInnerMapOfArrayCase.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the MixedMapOfArrayCase response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public MixedMapOfArrayCase getAnyofInnerMixedMapOfArray(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofInnerMixedMapOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofInnerMixedMapOfArrayResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the MixedMapOfArrayCase response from the API call
     */
    public CompletableFuture<MixedMapOfArrayCase> getAnyofInnerMixedMapOfArrayAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofInnerMixedMapOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofInnerMixedMapOfArrayResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofInnerMixedMapOfArray.
     */
    private HttpRequest buildGetAnyofInnerMixedMapOfArrayRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/innerMixedMapOfArray");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofInnerMixedMapOfArray.
     * @return An object of type MixedMapOfArrayCase
     */
    private MixedMapOfArrayCase handleGetAnyofInnerMixedMapOfArrayResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        MixedMapOfArrayCase result = ApiHelper.deserialize(responseBody,
                MixedMapOfArrayCase.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the MapOfArrayOfInnerMixedMapOfArrayCase response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public MapOfArrayOfInnerMixedMapOfArrayCase getAnyofMapOfArrayOfMixedMapOfArray(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofMapOfArrayOfMixedMapOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofMapOfArrayOfMixedMapOfArrayResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the MapOfArrayOfInnerMixedMapOfArrayCase response from the API call
     */
    public CompletableFuture<MapOfArrayOfInnerMixedMapOfArrayCase> getAnyofMapOfArrayOfMixedMapOfArrayAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofMapOfArrayOfMixedMapOfArrayRequest(
                isPrimitiveType, isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofMapOfArrayOfMixedMapOfArrayResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofMapOfArrayOfMixedMapOfArray.
     */
    private HttpRequest buildGetAnyofMapOfArrayOfMixedMapOfArrayRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/mapOfArrayOfMixedMapOfArray");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofMapOfArrayOfMixedMapOfArray.
     * @return An object of type MapOfArrayOfInnerMixedMapOfArrayCase
     */
    private MapOfArrayOfInnerMixedMapOfArrayCase handleGetAnyofMapOfArrayOfMixedMapOfArrayResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        MapOfArrayOfInnerMixedMapOfArrayCase result = ApiHelper.deserialize(responseBody,
                MapOfArrayOfInnerMixedMapOfArrayCase.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the ArrayOfMapsCase response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ArrayOfMapsCase getAnyofArrayOfMaps(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofArrayOfMapsRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofArrayOfMapsResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the ArrayOfMapsCase response from the API call
     */
    public CompletableFuture<ArrayOfMapsCase> getAnyofArrayOfMapsAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofArrayOfMapsRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofArrayOfMapsResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofArrayOfMaps.
     */
    private HttpRequest buildGetAnyofArrayOfMapsRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/arrayOfMaps");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofArrayOfMaps.
     * @return An object of type ArrayOfMapsCase
     */
    private ArrayOfMapsCase handleGetAnyofArrayOfMapsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ArrayOfMapsCase result = ApiHelper.deserialize(responseBody,
                ArrayOfMapsCase.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the ArrayOfArrayOfMapFlagCase response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ArrayOfArrayOfMapFlagCase getAnyofArrayOfArrayOfMapFlag(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofArrayOfArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofArrayOfArrayOfMapFlagResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the ArrayOfArrayOfMapFlagCase response from the API call
     */
    public CompletableFuture<ArrayOfArrayOfMapFlagCase> getAnyofArrayOfArrayOfMapFlagAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofArrayOfArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofArrayOfArrayOfMapFlagResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofArrayOfArrayOfMapFlag.
     */
    private HttpRequest buildGetAnyofArrayOfArrayOfMapFlagRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/arrayOfArrayOfMapFlag");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofArrayOfArrayOfMapFlag.
     * @return An object of type ArrayOfArrayOfMapFlagCase
     */
    private ArrayOfArrayOfMapFlagCase handleGetAnyofArrayOfArrayOfMapFlagResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ArrayOfArrayOfMapFlagCase result = ApiHelper.deserialize(responseBody,
                ArrayOfArrayOfMapFlagCase.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the MapOfArraysCase response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public MapOfArraysCase getAnyofMapOfArray(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofMapOfArrayRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofMapOfArrayResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the MapOfArraysCase response from the API call
     */
    public CompletableFuture<MapOfArraysCase> getAnyofMapOfArrayAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofMapOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofMapOfArrayResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofMapOfArray.
     */
    private HttpRequest buildGetAnyofMapOfArrayRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/mapOfArrays");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofMapOfArray.
     * @return An object of type MapOfArraysCase
     */
    private MapOfArraysCase handleGetAnyofMapOfArrayResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        MapOfArraysCase result = ApiHelper.deserialize(responseBody,
                MapOfArraysCase.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the MapOfArrayOfMapFlagCase response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public MapOfArrayOfMapFlagCase getAnyofMapOfArrayOfMapFlag(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofMapOfArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofMapOfArrayOfMapFlagResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the MapOfArrayOfMapFlagCase response from the API call
     */
    public CompletableFuture<MapOfArrayOfMapFlagCase> getAnyofMapOfArrayOfMapFlagAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofMapOfArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofMapOfArrayOfMapFlagResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofMapOfArrayOfMapFlag.
     */
    private HttpRequest buildGetAnyofMapOfArrayOfMapFlagRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/mapOfArrayOfMapFlag");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofMapOfArrayOfMapFlag.
     * @return An object of type MapOfArrayOfMapFlagCase
     */
    private MapOfArrayOfMapFlagCase handleGetAnyofMapOfArrayOfMapFlagResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        MapOfArrayOfMapFlagCase result = ApiHelper.deserialize(responseBody,
                MapOfArrayOfMapFlagCase.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the ArrayOfMapFlagOfArrayCase response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ArrayOfMapFlagOfArrayCase getAnyofArrayOfMapFlagOfArray(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofArrayOfMapFlagOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofArrayOfMapFlagOfArrayResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the ArrayOfMapFlagOfArrayCase response from the API call
     */
    public CompletableFuture<ArrayOfMapFlagOfArrayCase> getAnyofArrayOfMapFlagOfArrayAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofArrayOfMapFlagOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofArrayOfMapFlagOfArrayResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofArrayOfMapFlagOfArray.
     */
    private HttpRequest buildGetAnyofArrayOfMapFlagOfArrayRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/arrayOfMapFlagOfArray");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofArrayOfMapFlagOfArray.
     * @return An object of type ArrayOfMapFlagOfArrayCase
     */
    private ArrayOfMapFlagOfArrayCase handleGetAnyofArrayOfMapFlagOfArrayResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ArrayOfMapFlagOfArrayCase result = ApiHelper.deserialize(responseBody,
                ArrayOfMapFlagOfArrayCase.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the ArrayOfMapFlagOfMapCase response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ArrayOfMapFlagOfMapCase getAnyofArrayOfMapFlagOfMap(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetAnyofArrayOfMapFlagOfMapRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetAnyofArrayOfMapFlagOfMapResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the ArrayOfMapFlagOfMapCase response from the API call
     */
    public CompletableFuture<ArrayOfMapFlagOfMapCase> getAnyofArrayOfMapFlagOfMapAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetAnyofArrayOfMapFlagOfMapRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetAnyofArrayOfMapFlagOfMapResponse(context));
    }

    /**
     * Builds the HttpRequest object for getAnyofArrayOfMapFlagOfMap.
     */
    private HttpRequest buildGetAnyofArrayOfMapFlagOfMapRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/arrayOfMapFlagOfMap");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getAnyofArrayOfMapFlagOfMap.
     * @return An object of type ArrayOfMapFlagOfMapCase
     */
    private ArrayOfMapFlagOfMapCase handleGetAnyofArrayOfMapFlagOfMapResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ArrayOfMapFlagOfMapCase result = ApiHelper.deserialize(responseBody,
                ArrayOfMapFlagOfMapCase.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the MultiLevelAnyOf response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public MultiLevelAnyOf getMultiLevelAnyof(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetMultiLevelAnyofRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetMultiLevelAnyofResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the MultiLevelAnyOf response from the API call
     */
    public CompletableFuture<MultiLevelAnyOf> getMultiLevelAnyofAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetMultiLevelAnyofRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetMultiLevelAnyofResponse(context));
    }

    /**
     * Builds the HttpRequest object for getMultiLevelAnyof.
     */
    private HttpRequest buildGetMultiLevelAnyofRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/anyof/response/multiLevel");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getMultiLevelAnyof.
     * @return An object of type MultiLevelAnyOf
     */
    private MultiLevelAnyOf handleGetMultiLevelAnyofResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        MultiLevelAnyOf result = ApiHelper.deserialize(responseBody,
                MultiLevelAnyOf.class);

        return result;
    }

}