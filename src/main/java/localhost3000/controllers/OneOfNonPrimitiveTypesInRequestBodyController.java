/*
 * OneOfNonScalarEndpointsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package localhost3000.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import localhost3000.ApiHelper;
import localhost3000.AuthManager;
import localhost3000.Configuration;
import localhost3000.exceptions.ApiException;
import localhost3000.http.Headers;
import localhost3000.http.client.HttpCallback;
import localhost3000.http.client.HttpClient;
import localhost3000.http.client.HttpContext;
import localhost3000.http.request.HttpRequest;
import localhost3000.http.response.HttpResponse;
import localhost3000.http.response.HttpStringResponse;
import localhost3000.models.ServerResponse;
import localhost3000.models.containers.SendMultiLevelOneofSession;
import localhost3000.models.containers.SendOneofArrayOfArrayOfMapFlagSession;
import localhost3000.models.containers.SendOneofArrayOfArraysSession;
import localhost3000.models.containers.SendOneofArrayOfMapFlagOfArrayOfMapFlagSession;
import localhost3000.models.containers.SendOneofArrayOfMapFlagOfArraySession;
import localhost3000.models.containers.SendOneofArrayOfMapFlagOfMapSession;
import localhost3000.models.containers.SendOneofArrayOfMapFlagOfMixedArrayOfMapFlagSession;
import localhost3000.models.containers.SendOneofArrayOfMapsSession;
import localhost3000.models.containers.SendOneofArrayOfMixedArraysSession;
import localhost3000.models.containers.SendOneofInnerArrayOfMapFlagSession;
import localhost3000.models.containers.SendOneofInnerArraySession;
import localhost3000.models.containers.SendOneofInnerMapOfArraySession;
import localhost3000.models.containers.SendOneofInnerMapSession;
import localhost3000.models.containers.SendOneofInnerMixedArrayOfMapFlagSession;
import localhost3000.models.containers.SendOneofInnerMixedArraysSession;
import localhost3000.models.containers.SendOneofInnerMixedMapOfArraySession;
import localhost3000.models.containers.SendOneofInnerMixedMapSession;
import localhost3000.models.containers.SendOneofMapOfArrayOfMapFlagSession;
import localhost3000.models.containers.SendOneofMapOfArrayOfMapOfArraySession;
import localhost3000.models.containers.SendOneofMapOfArrayOfMixedMapOfArraySession;
import localhost3000.models.containers.SendOneofMapOfArraySession;
import localhost3000.models.containers.SendOneofMapOfInnerMixedMapSession;
import localhost3000.models.containers.SendOneofMapOfMapSession;
import localhost3000.models.containers.SendOneofOuterArrayOfMapFlagSession;
import localhost3000.models.containers.SendOneofOuterArraySession;
import localhost3000.models.containers.SendOneofOuterMapOfArraySession;
import localhost3000.models.containers.SendOneofOuterMapSession;
import localhost3000.models.containers.SendOneofSimpleSession;

/**
 * This class lists all the endpoints of the groups.
 */
public final class OneOfNonPrimitiveTypesInRequestBodyController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public OneOfNonPrimitiveTypesInRequestBodyController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }

    /**
     * Initializes the controller with HTTPCallback.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     * @param httpCallback    Callback to be called before and after the HTTP call.
     */
    public OneOfNonPrimitiveTypesInRequestBodyController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        super(config, httpClient, authManagers, httpCallback);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendOneofSimple(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final SendOneofSimpleSession session) throws ApiException, IOException {
        HttpRequest request = buildSendOneofSimpleRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator, session);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendOneofSimpleResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendOneofSimpleAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final SendOneofSimpleSession session) {
        return makeHttpCallAsync(() -> buildSendOneofSimpleRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, session),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendOneofSimpleResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendOneofSimple.
     */
    private HttpRequest buildSendOneofSimpleRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final SendOneofSimpleSession session) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/body/simple");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(session);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendOneofSimple.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendOneofSimpleResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendOneofOuterArray(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final List<SendOneofOuterArraySession> session) throws ApiException, IOException {
        HttpRequest request = buildSendOneofOuterArrayRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator, session);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendOneofOuterArrayResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendOneofOuterArrayAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final List<SendOneofOuterArraySession> session) {
        return makeHttpCallAsync(() -> buildSendOneofOuterArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, session),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendOneofOuterArrayResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendOneofOuterArray.
     */
    private HttpRequest buildSendOneofOuterArrayRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final List<SendOneofOuterArraySession> session) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/body/outerArray");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(session);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendOneofOuterArray.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendOneofOuterArrayResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendOneofInnerArray(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final SendOneofInnerArraySession session) throws ApiException, IOException {
        HttpRequest request = buildSendOneofInnerArrayRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator, session);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendOneofInnerArrayResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendOneofInnerArrayAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final SendOneofInnerArraySession session) {
        return makeHttpCallAsync(() -> buildSendOneofInnerArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, session),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendOneofInnerArrayResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendOneofInnerArray.
     */
    private HttpRequest buildSendOneofInnerArrayRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final SendOneofInnerArraySession session) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/body/innerArray");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(session);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendOneofInnerArray.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendOneofInnerArrayResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendOneofArrayOfArrays(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final List<SendOneofArrayOfArraysSession> session) throws ApiException, IOException {
        HttpRequest request = buildSendOneofArrayOfArraysRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator, session);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendOneofArrayOfArraysResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendOneofArrayOfArraysAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final List<SendOneofArrayOfArraysSession> session) {
        return makeHttpCallAsync(() -> buildSendOneofArrayOfArraysRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, session),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendOneofArrayOfArraysResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendOneofArrayOfArrays.
     */
    private HttpRequest buildSendOneofArrayOfArraysRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final List<SendOneofArrayOfArraysSession> session) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/body/arrayOfArrays");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(session);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendOneofArrayOfArrays.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendOneofArrayOfArraysResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendOneofInnerMixedArrays(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final SendOneofInnerMixedArraysSession session) throws ApiException, IOException {
        HttpRequest request = buildSendOneofInnerMixedArraysRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, session);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendOneofInnerMixedArraysResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendOneofInnerMixedArraysAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final SendOneofInnerMixedArraysSession session) {
        return makeHttpCallAsync(() -> buildSendOneofInnerMixedArraysRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, session),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendOneofInnerMixedArraysResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendOneofInnerMixedArrays.
     */
    private HttpRequest buildSendOneofInnerMixedArraysRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final SendOneofInnerMixedArraysSession session) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/body/innerMixedArray");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(session);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendOneofInnerMixedArrays.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendOneofInnerMixedArraysResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendOneofArrayOfMixedArrays(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final List<SendOneofArrayOfMixedArraysSession> session) throws ApiException, IOException {
        HttpRequest request = buildSendOneofArrayOfMixedArraysRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, session);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendOneofArrayOfMixedArraysResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendOneofArrayOfMixedArraysAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final List<SendOneofArrayOfMixedArraysSession> session) {
        return makeHttpCallAsync(() -> buildSendOneofArrayOfMixedArraysRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, session),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendOneofArrayOfMixedArraysResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendOneofArrayOfMixedArrays.
     */
    private HttpRequest buildSendOneofArrayOfMixedArraysRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final List<SendOneofArrayOfMixedArraysSession> session) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/body/arrayOfMixedArray");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(session);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendOneofArrayOfMixedArrays.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendOneofArrayOfMixedArraysResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendOneofOuterMap(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final Map<String, SendOneofOuterMapSession> session) throws ApiException, IOException {
        HttpRequest request = buildSendOneofOuterMapRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator, session);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendOneofOuterMapResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendOneofOuterMapAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final Map<String, SendOneofOuterMapSession> session) {
        return makeHttpCallAsync(() -> buildSendOneofOuterMapRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, session),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendOneofOuterMapResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendOneofOuterMap.
     */
    private HttpRequest buildSendOneofOuterMapRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final Map<String, SendOneofOuterMapSession> session) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/body/outerMap");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(session);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendOneofOuterMap.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendOneofOuterMapResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendOneofInnerMap(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final SendOneofInnerMapSession session) throws ApiException, IOException {
        HttpRequest request = buildSendOneofInnerMapRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator, session);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendOneofInnerMapResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendOneofInnerMapAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final SendOneofInnerMapSession session) {
        return makeHttpCallAsync(() -> buildSendOneofInnerMapRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, session),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendOneofInnerMapResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendOneofInnerMap.
     */
    private HttpRequest buildSendOneofInnerMapRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final SendOneofInnerMapSession session) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/body/innerMap");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(session);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendOneofInnerMap.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendOneofInnerMapResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendOneofMapOfMap(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final Map<String, SendOneofMapOfMapSession> session) throws ApiException, IOException {
        HttpRequest request = buildSendOneofMapOfMapRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator, session);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendOneofMapOfMapResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendOneofMapOfMapAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final Map<String, SendOneofMapOfMapSession> session) {
        return makeHttpCallAsync(() -> buildSendOneofMapOfMapRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, session),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendOneofMapOfMapResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendOneofMapOfMap.
     */
    private HttpRequest buildSendOneofMapOfMapRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final Map<String, SendOneofMapOfMapSession> session) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/body/mapOfMaps");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(session);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendOneofMapOfMap.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendOneofMapOfMapResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendOneofInnerMixedMap(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final SendOneofInnerMixedMapSession session) throws ApiException, IOException {
        HttpRequest request = buildSendOneofInnerMixedMapRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator, session);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendOneofInnerMixedMapResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendOneofInnerMixedMapAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final SendOneofInnerMixedMapSession session) {
        return makeHttpCallAsync(() -> buildSendOneofInnerMixedMapRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, session),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendOneofInnerMixedMapResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendOneofInnerMixedMap.
     */
    private HttpRequest buildSendOneofInnerMixedMapRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final SendOneofInnerMixedMapSession session) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/body/innerMixedMap");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(session);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendOneofInnerMixedMap.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendOneofInnerMixedMapResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendOneofMapOfInnerMixedMap(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final Map<String, SendOneofMapOfInnerMixedMapSession> session) throws ApiException, IOException {
        HttpRequest request = buildSendOneofMapOfInnerMixedMapRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, session);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendOneofMapOfInnerMixedMapResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendOneofMapOfInnerMixedMapAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final Map<String, SendOneofMapOfInnerMixedMapSession> session) {
        return makeHttpCallAsync(() -> buildSendOneofMapOfInnerMixedMapRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, session),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendOneofMapOfInnerMixedMapResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendOneofMapOfInnerMixedMap.
     */
    private HttpRequest buildSendOneofMapOfInnerMixedMapRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final Map<String, SendOneofMapOfInnerMixedMapSession> session) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/body/mapOfMixedMap");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(session);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendOneofMapOfInnerMixedMap.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendOneofMapOfInnerMixedMapResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendOneofOuterArrayOfMapFlag(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final List<Map<String, SendOneofOuterArrayOfMapFlagSession>> session) throws ApiException, IOException {
        HttpRequest request = buildSendOneofOuterArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, session);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendOneofOuterArrayOfMapFlagResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendOneofOuterArrayOfMapFlagAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final List<Map<String, SendOneofOuterArrayOfMapFlagSession>> session) {
        return makeHttpCallAsync(() -> buildSendOneofOuterArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, session),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendOneofOuterArrayOfMapFlagResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendOneofOuterArrayOfMapFlag.
     */
    private HttpRequest buildSendOneofOuterArrayOfMapFlagRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final List<Map<String, SendOneofOuterArrayOfMapFlagSession>> session) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/body/outerArrayOfMapFlag");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(session);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendOneofOuterArrayOfMapFlag.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendOneofOuterArrayOfMapFlagResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendOneofInnerArrayOfMapFlag(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final SendOneofInnerArrayOfMapFlagSession session) throws ApiException, IOException {
        HttpRequest request = buildSendOneofInnerArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, session);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendOneofInnerArrayOfMapFlagResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendOneofInnerArrayOfMapFlagAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final SendOneofInnerArrayOfMapFlagSession session) {
        return makeHttpCallAsync(() -> buildSendOneofInnerArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, session),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendOneofInnerArrayOfMapFlagResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendOneofInnerArrayOfMapFlag.
     */
    private HttpRequest buildSendOneofInnerArrayOfMapFlagRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final SendOneofInnerArrayOfMapFlagSession session) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/body/innerArrayOfMapFlag");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(session);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendOneofInnerArrayOfMapFlag.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendOneofInnerArrayOfMapFlagResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendOneofArrayOfMapFlagOfArrayOfMapFlag(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final List<Map<String, SendOneofArrayOfMapFlagOfArrayOfMapFlagSession>> session) throws ApiException, IOException {
        HttpRequest request = buildSendOneofArrayOfMapFlagOfArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, session);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendOneofArrayOfMapFlagOfArrayOfMapFlagResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendOneofArrayOfMapFlagOfArrayOfMapFlagAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final List<Map<String, SendOneofArrayOfMapFlagOfArrayOfMapFlagSession>> session) {
        return makeHttpCallAsync(() -> buildSendOneofArrayOfMapFlagOfArrayOfMapFlagRequest(
                isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendOneofArrayOfMapFlagOfArrayOfMapFlagResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendOneofArrayOfMapFlagOfArrayOfMapFlag.
     */
    private HttpRequest buildSendOneofArrayOfMapFlagOfArrayOfMapFlagRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final List<Map<String, SendOneofArrayOfMapFlagOfArrayOfMapFlagSession>> session) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/body/arrayOfMapFlagOfArrayOfMapFlag");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(session);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendOneofArrayOfMapFlagOfArrayOfMapFlag.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendOneofArrayOfMapFlagOfArrayOfMapFlagResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendOneofInnerMixedArrayOfMapFlag(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final SendOneofInnerMixedArrayOfMapFlagSession session) throws ApiException, IOException {
        HttpRequest request = buildSendOneofInnerMixedArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, session);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendOneofInnerMixedArrayOfMapFlagResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendOneofInnerMixedArrayOfMapFlagAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final SendOneofInnerMixedArrayOfMapFlagSession session) {
        return makeHttpCallAsync(() -> buildSendOneofInnerMixedArrayOfMapFlagRequest(
                isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendOneofInnerMixedArrayOfMapFlagResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendOneofInnerMixedArrayOfMapFlag.
     */
    private HttpRequest buildSendOneofInnerMixedArrayOfMapFlagRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final SendOneofInnerMixedArrayOfMapFlagSession session) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/body/innerMixedArrayOfMap");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(session);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendOneofInnerMixedArrayOfMapFlag.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendOneofInnerMixedArrayOfMapFlagResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendOneofArrayOfMapFlagOfMixedArrayOfMapFlag(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final List<Map<String, SendOneofArrayOfMapFlagOfMixedArrayOfMapFlagSession>> session) throws ApiException, IOException {
        HttpRequest request = buildSendOneofArrayOfMapFlagOfMixedArrayOfMapFlagRequest(
                isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendOneofArrayOfMapFlagOfMixedArrayOfMapFlagResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendOneofArrayOfMapFlagOfMixedArrayOfMapFlagAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final List<Map<String, SendOneofArrayOfMapFlagOfMixedArrayOfMapFlagSession>> session) {
        return makeHttpCallAsync(() -> buildSendOneofArrayOfMapFlagOfMixedArrayOfMapFlagRequest(
                isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendOneofArrayOfMapFlagOfMixedArrayOfMapFlagResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendOneofArrayOfMapFlagOfMixedArrayOfMapFlag.
     */
    private HttpRequest buildSendOneofArrayOfMapFlagOfMixedArrayOfMapFlagRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final List<Map<String, SendOneofArrayOfMapFlagOfMixedArrayOfMapFlagSession>> session) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/body/arrayOfMapFlagOfMixedArrayOfMap");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(session);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendOneofArrayOfMapFlagOfMixedArrayOfMapFlag.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendOneofArrayOfMapFlagOfMixedArrayOfMapFlagResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendOneofOuterMapOfArray(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final Map<String, List<SendOneofOuterMapOfArraySession>> session) throws ApiException, IOException {
        HttpRequest request = buildSendOneofOuterMapOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, session);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendOneofOuterMapOfArrayResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendOneofOuterMapOfArrayAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final Map<String, List<SendOneofOuterMapOfArraySession>> session) {
        return makeHttpCallAsync(() -> buildSendOneofOuterMapOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, session),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendOneofOuterMapOfArrayResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendOneofOuterMapOfArray.
     */
    private HttpRequest buildSendOneofOuterMapOfArrayRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final Map<String, List<SendOneofOuterMapOfArraySession>> session) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/body/outerMapOfArray");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(session);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendOneofOuterMapOfArray.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendOneofOuterMapOfArrayResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendOneofInnerMapOfArray(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final SendOneofInnerMapOfArraySession session) throws ApiException, IOException {
        HttpRequest request = buildSendOneofInnerMapOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, session);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendOneofInnerMapOfArrayResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendOneofInnerMapOfArrayAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final SendOneofInnerMapOfArraySession session) {
        return makeHttpCallAsync(() -> buildSendOneofInnerMapOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, session),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendOneofInnerMapOfArrayResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendOneofInnerMapOfArray.
     */
    private HttpRequest buildSendOneofInnerMapOfArrayRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final SendOneofInnerMapOfArraySession session) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/body/innerMapOfArray");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(session);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendOneofInnerMapOfArray.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendOneofInnerMapOfArrayResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendOneofMapOfArrayOfMapOfArray(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final Map<String, List<SendOneofMapOfArrayOfMapOfArraySession>> session) throws ApiException, IOException {
        HttpRequest request = buildSendOneofMapOfArrayOfMapOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, session);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendOneofMapOfArrayOfMapOfArrayResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendOneofMapOfArrayOfMapOfArrayAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final Map<String, List<SendOneofMapOfArrayOfMapOfArraySession>> session) {
        return makeHttpCallAsync(() -> buildSendOneofMapOfArrayOfMapOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, session),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendOneofMapOfArrayOfMapOfArrayResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendOneofMapOfArrayOfMapOfArray.
     */
    private HttpRequest buildSendOneofMapOfArrayOfMapOfArrayRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final Map<String, List<SendOneofMapOfArrayOfMapOfArraySession>> session) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/body/mapOfArrayOfInnerMapOfArray");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(session);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendOneofMapOfArrayOfMapOfArray.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendOneofMapOfArrayOfMapOfArrayResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendOneofInnerMixedMapOfArray(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final SendOneofInnerMixedMapOfArraySession session) throws ApiException, IOException {
        HttpRequest request = buildSendOneofInnerMixedMapOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, session);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendOneofInnerMixedMapOfArrayResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendOneofInnerMixedMapOfArrayAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final SendOneofInnerMixedMapOfArraySession session) {
        return makeHttpCallAsync(() -> buildSendOneofInnerMixedMapOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, session),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendOneofInnerMixedMapOfArrayResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendOneofInnerMixedMapOfArray.
     */
    private HttpRequest buildSendOneofInnerMixedMapOfArrayRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final SendOneofInnerMixedMapOfArraySession session) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/body/innerMixedMapOfArray");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(session);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendOneofInnerMixedMapOfArray.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendOneofInnerMixedMapOfArrayResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendOneofMapOfArrayOfMixedMapOfArray(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final Map<String, List<SendOneofMapOfArrayOfMixedMapOfArraySession>> session) throws ApiException, IOException {
        HttpRequest request = buildSendOneofMapOfArrayOfMixedMapOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, session);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendOneofMapOfArrayOfMixedMapOfArrayResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendOneofMapOfArrayOfMixedMapOfArrayAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final Map<String, List<SendOneofMapOfArrayOfMixedMapOfArraySession>> session) {
        return makeHttpCallAsync(() -> buildSendOneofMapOfArrayOfMixedMapOfArrayRequest(
                isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendOneofMapOfArrayOfMixedMapOfArrayResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendOneofMapOfArrayOfMixedMapOfArray.
     */
    private HttpRequest buildSendOneofMapOfArrayOfMixedMapOfArrayRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final Map<String, List<SendOneofMapOfArrayOfMixedMapOfArraySession>> session) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/body/mapOfArrayOfMixedMapOfArray");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(session);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendOneofMapOfArrayOfMixedMapOfArray.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendOneofMapOfArrayOfMixedMapOfArrayResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendOneofArrayOfMaps(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final List<SendOneofArrayOfMapsSession> session) throws ApiException, IOException {
        HttpRequest request = buildSendOneofArrayOfMapsRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator, session);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendOneofArrayOfMapsResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendOneofArrayOfMapsAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final List<SendOneofArrayOfMapsSession> session) {
        return makeHttpCallAsync(() -> buildSendOneofArrayOfMapsRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, session),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendOneofArrayOfMapsResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendOneofArrayOfMaps.
     */
    private HttpRequest buildSendOneofArrayOfMapsRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final List<SendOneofArrayOfMapsSession> session) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/body/arrayOfMaps");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(session);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendOneofArrayOfMaps.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendOneofArrayOfMapsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendOneofArrayOfArrayOfMapFlag(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final List<SendOneofArrayOfArrayOfMapFlagSession> session) throws ApiException, IOException {
        HttpRequest request = buildSendOneofArrayOfArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, session);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendOneofArrayOfArrayOfMapFlagResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendOneofArrayOfArrayOfMapFlagAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final List<SendOneofArrayOfArrayOfMapFlagSession> session) {
        return makeHttpCallAsync(() -> buildSendOneofArrayOfArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, session),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendOneofArrayOfArrayOfMapFlagResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendOneofArrayOfArrayOfMapFlag.
     */
    private HttpRequest buildSendOneofArrayOfArrayOfMapFlagRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final List<SendOneofArrayOfArrayOfMapFlagSession> session) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/body/arrayOfArrayOfMapFlag");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(session);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendOneofArrayOfArrayOfMapFlag.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendOneofArrayOfArrayOfMapFlagResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendOneofMapOfArray(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final Map<String, SendOneofMapOfArraySession> session) throws ApiException, IOException {
        HttpRequest request = buildSendOneofMapOfArrayRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator, session);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendOneofMapOfArrayResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendOneofMapOfArrayAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final Map<String, SendOneofMapOfArraySession> session) {
        return makeHttpCallAsync(() -> buildSendOneofMapOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, session),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendOneofMapOfArrayResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendOneofMapOfArray.
     */
    private HttpRequest buildSendOneofMapOfArrayRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final Map<String, SendOneofMapOfArraySession> session) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/body/mapOfArrays");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(session);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendOneofMapOfArray.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendOneofMapOfArrayResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendOneofMapOfArrayOfMapFlag(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final Map<String, SendOneofMapOfArrayOfMapFlagSession> session) throws ApiException, IOException {
        HttpRequest request = buildSendOneofMapOfArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, session);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendOneofMapOfArrayOfMapFlagResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendOneofMapOfArrayOfMapFlagAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final Map<String, SendOneofMapOfArrayOfMapFlagSession> session) {
        return makeHttpCallAsync(() -> buildSendOneofMapOfArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, session),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendOneofMapOfArrayOfMapFlagResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendOneofMapOfArrayOfMapFlag.
     */
    private HttpRequest buildSendOneofMapOfArrayOfMapFlagRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final Map<String, SendOneofMapOfArrayOfMapFlagSession> session) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/body/mapOfArrayOfMapFlag");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(session);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendOneofMapOfArrayOfMapFlag.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendOneofMapOfArrayOfMapFlagResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendOneofArrayOfMapFlagOfArray(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final List<Map<String, SendOneofArrayOfMapFlagOfArraySession>> session) throws ApiException, IOException {
        HttpRequest request = buildSendOneofArrayOfMapFlagOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, session);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendOneofArrayOfMapFlagOfArrayResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendOneofArrayOfMapFlagOfArrayAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final List<Map<String, SendOneofArrayOfMapFlagOfArraySession>> session) {
        return makeHttpCallAsync(() -> buildSendOneofArrayOfMapFlagOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, session),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendOneofArrayOfMapFlagOfArrayResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendOneofArrayOfMapFlagOfArray.
     */
    private HttpRequest buildSendOneofArrayOfMapFlagOfArrayRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final List<Map<String, SendOneofArrayOfMapFlagOfArraySession>> session) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/body/arrayOfMapFlagOfArray");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(session);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendOneofArrayOfMapFlagOfArray.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendOneofArrayOfMapFlagOfArrayResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendOneofArrayOfMapFlagOfMap(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final List<Map<String, SendOneofArrayOfMapFlagOfMapSession>> session) throws ApiException, IOException {
        HttpRequest request = buildSendOneofArrayOfMapFlagOfMapRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, session);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendOneofArrayOfMapFlagOfMapResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Course session
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendOneofArrayOfMapFlagOfMapAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final List<Map<String, SendOneofArrayOfMapFlagOfMapSession>> session) {
        return makeHttpCallAsync(() -> buildSendOneofArrayOfMapFlagOfMapRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, session),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendOneofArrayOfMapFlagOfMapResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendOneofArrayOfMapFlagOfMap.
     */
    private HttpRequest buildSendOneofArrayOfMapFlagOfMapRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final List<Map<String, SendOneofArrayOfMapFlagOfMapSession>> session) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/body/arrayOfMapFlagOfMap");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(session);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendOneofArrayOfMapFlagOfMap.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendOneofArrayOfMapFlagOfMapResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServerResponse sendMultiLevelOneof(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final SendMultiLevelOneofSession session) throws ApiException, IOException {
        HttpRequest request = buildSendMultiLevelOneofRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator, session);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendMultiLevelOneofResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @param  session  Required parameter: Example:
     * @return    Returns the ServerResponse response from the API call
     */
    public CompletableFuture<ServerResponse> sendMultiLevelOneofAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final SendMultiLevelOneofSession session) {
        return makeHttpCallAsync(() -> buildSendMultiLevelOneofRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator, session),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSendMultiLevelOneofResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendMultiLevelOneof.
     */
    private HttpRequest buildSendMultiLevelOneofRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator,
            final SendMultiLevelOneofSession session) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/body/multiLevel");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(session);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, queryParameters,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for sendMultiLevelOneof.
     * @return An object of type ServerResponse
     */
    private ServerResponse handleSendMultiLevelOneofResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ServerResponse result = ApiHelper.deserialize(responseBody,
                ServerResponse.class);

        return result;
    }

}