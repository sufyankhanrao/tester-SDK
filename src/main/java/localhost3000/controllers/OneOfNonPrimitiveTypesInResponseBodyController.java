/*
 * OneOfNonScalarEndpointsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package localhost3000.controllers;

import com.fasterxml.jackson.core.type.TypeReference;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import localhost3000.ApiHelper;
import localhost3000.AuthManager;
import localhost3000.Configuration;
import localhost3000.exceptions.ApiException;
import localhost3000.http.Headers;
import localhost3000.http.client.HttpCallback;
import localhost3000.http.client.HttpClient;
import localhost3000.http.client.HttpContext;
import localhost3000.http.request.HttpRequest;
import localhost3000.http.response.HttpResponse;
import localhost3000.http.response.HttpStringResponse;
import localhost3000.models.containers.GetMultiLevelOneofSession;
import localhost3000.models.containers.GetOneofArrayOfArrayOfMapFlagSession;
import localhost3000.models.containers.GetOneofArrayOfArraysSession;
import localhost3000.models.containers.GetOneofArrayOfMapFlagOfArrayOfMapFlagSession;
import localhost3000.models.containers.GetOneofArrayOfMapFlagOfArraySession;
import localhost3000.models.containers.GetOneofArrayOfMapFlagOfMapSession;
import localhost3000.models.containers.GetOneofArrayOfMapFlagOfMixedArrayOfMapFlagSession;
import localhost3000.models.containers.GetOneofArrayOfMapsSession;
import localhost3000.models.containers.GetOneofArrayOfMixedArraysSession;
import localhost3000.models.containers.GetOneofInnerArrayOfMapFlagSession;
import localhost3000.models.containers.GetOneofInnerArraySession;
import localhost3000.models.containers.GetOneofInnerMapOfArraySession;
import localhost3000.models.containers.GetOneofInnerMapSession;
import localhost3000.models.containers.GetOneofInnerMixedArrayOfMapFlagSession;
import localhost3000.models.containers.GetOneofInnerMixedArraysSession;
import localhost3000.models.containers.GetOneofInnerMixedMapOfArraySession;
import localhost3000.models.containers.GetOneofInnerMixedMapSession;
import localhost3000.models.containers.GetOneofMapOfArrayOfMapFlagSession;
import localhost3000.models.containers.GetOneofMapOfArrayOfMapOfArraySession;
import localhost3000.models.containers.GetOneofMapOfArrayOfMixedMapOfArraySession;
import localhost3000.models.containers.GetOneofMapOfArraySession;
import localhost3000.models.containers.GetOneofMapOfInnerMixedMapSession;
import localhost3000.models.containers.GetOneofMapOfMapSession;
import localhost3000.models.containers.GetOneofOuterArrayOfMapFlagSession;
import localhost3000.models.containers.GetOneofOuterArraySession;
import localhost3000.models.containers.GetOneofOuterMapOfArraySession;
import localhost3000.models.containers.GetOneofOuterMapSession;
import localhost3000.models.containers.GetOneofSimpleSession;

/**
 * This class lists all the endpoints of the groups.
 */
public final class OneOfNonPrimitiveTypesInResponseBodyController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public OneOfNonPrimitiveTypesInResponseBodyController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }

    /**
     * Initializes the controller with HTTPCallback.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     * @param httpCallback    Callback to be called before and after the HTTP call.
     */
    public OneOfNonPrimitiveTypesInResponseBodyController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        super(config, httpClient, authManagers, httpCallback);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the GetOneofSimpleSession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetOneofSimpleSession getOneofSimple(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetOneofSimpleRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetOneofSimpleResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the GetOneofSimpleSession response from the API call
     */
    public CompletableFuture<GetOneofSimpleSession> getOneofSimpleAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetOneofSimpleRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetOneofSimpleResponse(context));
    }

    /**
     * Builds the HttpRequest object for getOneofSimple.
     */
    private HttpRequest buildGetOneofSimpleRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/response/simple");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getOneofSimple.
     * @return An object of type GetOneofSimpleSession
     */
    private GetOneofSimpleSession handleGetOneofSimpleResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetOneofSimpleSession result = ApiHelper.deserialize(responseBody,
                GetOneofSimpleSession.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the List of GetOneofOuterArraySession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<GetOneofOuterArraySession> getOneofOuterArray(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetOneofOuterArrayRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetOneofOuterArrayResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the List of GetOneofOuterArraySession response from the API call
     */
    public CompletableFuture<List<GetOneofOuterArraySession>> getOneofOuterArrayAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetOneofOuterArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetOneofOuterArrayResponse(context));
    }

    /**
     * Builds the HttpRequest object for getOneofOuterArray.
     */
    private HttpRequest buildGetOneofOuterArrayRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/response/outerArray");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getOneofOuterArray.
     * @return An object of type List of GetOneofOuterArraySession
     */
    private List<GetOneofOuterArraySession> handleGetOneofOuterArrayResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        List<GetOneofOuterArraySession> result = ApiHelper.deserializeArray(responseBody,
                GetOneofOuterArraySession[].class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the GetOneofInnerArraySession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetOneofInnerArraySession getOneofInnerArray(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetOneofInnerArrayRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetOneofInnerArrayResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the GetOneofInnerArraySession response from the API call
     */
    public CompletableFuture<GetOneofInnerArraySession> getOneofInnerArrayAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetOneofInnerArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetOneofInnerArrayResponse(context));
    }

    /**
     * Builds the HttpRequest object for getOneofInnerArray.
     */
    private HttpRequest buildGetOneofInnerArrayRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/response/innerArray");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getOneofInnerArray.
     * @return An object of type GetOneofInnerArraySession
     */
    private GetOneofInnerArraySession handleGetOneofInnerArrayResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetOneofInnerArraySession result = ApiHelper.deserialize(responseBody,
                GetOneofInnerArraySession.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the List of GetOneofArrayOfArraysSession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<GetOneofArrayOfArraysSession> getOneofArrayOfArrays(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetOneofArrayOfArraysRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetOneofArrayOfArraysResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the List of GetOneofArrayOfArraysSession response from the API call
     */
    public CompletableFuture<List<GetOneofArrayOfArraysSession>> getOneofArrayOfArraysAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetOneofArrayOfArraysRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetOneofArrayOfArraysResponse(context));
    }

    /**
     * Builds the HttpRequest object for getOneofArrayOfArrays.
     */
    private HttpRequest buildGetOneofArrayOfArraysRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/response/arrayOfArrays");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getOneofArrayOfArrays.
     * @return An object of type List of GetOneofArrayOfArraysSession
     */
    private List<GetOneofArrayOfArraysSession> handleGetOneofArrayOfArraysResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        List<GetOneofArrayOfArraysSession> result = ApiHelper.deserializeArray(responseBody,
                GetOneofArrayOfArraysSession[].class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the GetOneofInnerMixedArraysSession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetOneofInnerMixedArraysSession getOneofInnerMixedArrays(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetOneofInnerMixedArraysRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetOneofInnerMixedArraysResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the GetOneofInnerMixedArraysSession response from the API call
     */
    public CompletableFuture<GetOneofInnerMixedArraysSession> getOneofInnerMixedArraysAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetOneofInnerMixedArraysRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetOneofInnerMixedArraysResponse(context));
    }

    /**
     * Builds the HttpRequest object for getOneofInnerMixedArrays.
     */
    private HttpRequest buildGetOneofInnerMixedArraysRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/response/innerMixedArray");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getOneofInnerMixedArrays.
     * @return An object of type GetOneofInnerMixedArraysSession
     */
    private GetOneofInnerMixedArraysSession handleGetOneofInnerMixedArraysResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetOneofInnerMixedArraysSession result = ApiHelper.deserialize(responseBody,
                GetOneofInnerMixedArraysSession.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the List of GetOneofArrayOfMixedArraysSession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<GetOneofArrayOfMixedArraysSession> getOneofArrayOfMixedArrays(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetOneofArrayOfMixedArraysRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetOneofArrayOfMixedArraysResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the List of GetOneofArrayOfMixedArraysSession response from the API call
     */
    public CompletableFuture<List<GetOneofArrayOfMixedArraysSession>> getOneofArrayOfMixedArraysAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetOneofArrayOfMixedArraysRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetOneofArrayOfMixedArraysResponse(context));
    }

    /**
     * Builds the HttpRequest object for getOneofArrayOfMixedArrays.
     */
    private HttpRequest buildGetOneofArrayOfMixedArraysRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/response/arrayOfMixedArray");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getOneofArrayOfMixedArrays.
     * @return An object of type List of GetOneofArrayOfMixedArraysSession
     */
    private List<GetOneofArrayOfMixedArraysSession> handleGetOneofArrayOfMixedArraysResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        List<GetOneofArrayOfMixedArraysSession> result = ApiHelper.deserializeArray(responseBody,
                GetOneofArrayOfMixedArraysSession[].class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the Map of String, GetOneofOuterMapSession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Map<String, GetOneofOuterMapSession> getOneofOuterMap(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetOneofOuterMapRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetOneofOuterMapResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the Map of String, GetOneofOuterMapSession response from the API call
     */
    public CompletableFuture<Map<String, GetOneofOuterMapSession>> getOneofOuterMapAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetOneofOuterMapRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetOneofOuterMapResponse(context));
    }

    /**
     * Builds the HttpRequest object for getOneofOuterMap.
     */
    private HttpRequest buildGetOneofOuterMapRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/response/outerMap");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getOneofOuterMap.
     * @return An object of type Map of String, GetOneofOuterMapSession
     */
    private Map<String, GetOneofOuterMapSession> handleGetOneofOuterMapResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Map<String, GetOneofOuterMapSession> result = ApiHelper.deserialize(responseBody,
                new TypeReference<Map<String, GetOneofOuterMapSession>>(){});

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the GetOneofInnerMapSession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetOneofInnerMapSession getOneofInnerMap(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetOneofInnerMapRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetOneofInnerMapResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the GetOneofInnerMapSession response from the API call
     */
    public CompletableFuture<GetOneofInnerMapSession> getOneofInnerMapAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetOneofInnerMapRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetOneofInnerMapResponse(context));
    }

    /**
     * Builds the HttpRequest object for getOneofInnerMap.
     */
    private HttpRequest buildGetOneofInnerMapRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/response/innerMap");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getOneofInnerMap.
     * @return An object of type GetOneofInnerMapSession
     */
    private GetOneofInnerMapSession handleGetOneofInnerMapResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetOneofInnerMapSession result = ApiHelper.deserialize(responseBody,
                GetOneofInnerMapSession.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the Map of String, GetOneofMapOfMapSession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Map<String, GetOneofMapOfMapSession> getOneofMapOfMap(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetOneofMapOfMapRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetOneofMapOfMapResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the Map of String, GetOneofMapOfMapSession response from the API call
     */
    public CompletableFuture<Map<String, GetOneofMapOfMapSession>> getOneofMapOfMapAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetOneofMapOfMapRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetOneofMapOfMapResponse(context));
    }

    /**
     * Builds the HttpRequest object for getOneofMapOfMap.
     */
    private HttpRequest buildGetOneofMapOfMapRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/response/mapOfMaps");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getOneofMapOfMap.
     * @return An object of type Map of String, GetOneofMapOfMapSession
     */
    private Map<String, GetOneofMapOfMapSession> handleGetOneofMapOfMapResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Map<String, GetOneofMapOfMapSession> result = ApiHelper.deserialize(responseBody,
                new TypeReference<Map<String, GetOneofMapOfMapSession>>(){});

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the GetOneofInnerMixedMapSession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetOneofInnerMixedMapSession getOneofInnerMixedMap(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetOneofInnerMixedMapRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetOneofInnerMixedMapResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the GetOneofInnerMixedMapSession response from the API call
     */
    public CompletableFuture<GetOneofInnerMixedMapSession> getOneofInnerMixedMapAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetOneofInnerMixedMapRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetOneofInnerMixedMapResponse(context));
    }

    /**
     * Builds the HttpRequest object for getOneofInnerMixedMap.
     */
    private HttpRequest buildGetOneofInnerMixedMapRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/response/innerMixedMap");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getOneofInnerMixedMap.
     * @return An object of type GetOneofInnerMixedMapSession
     */
    private GetOneofInnerMixedMapSession handleGetOneofInnerMixedMapResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetOneofInnerMixedMapSession result = ApiHelper.deserialize(responseBody,
                GetOneofInnerMixedMapSession.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the Map of String, GetOneofMapOfInnerMixedMapSession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Map<String, GetOneofMapOfInnerMixedMapSession> getOneofMapOfInnerMixedMap(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetOneofMapOfInnerMixedMapRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetOneofMapOfInnerMixedMapResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the Map of String, GetOneofMapOfInnerMixedMapSession response from the API call
     */
    public CompletableFuture<Map<String, GetOneofMapOfInnerMixedMapSession>> getOneofMapOfInnerMixedMapAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetOneofMapOfInnerMixedMapRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetOneofMapOfInnerMixedMapResponse(context));
    }

    /**
     * Builds the HttpRequest object for getOneofMapOfInnerMixedMap.
     */
    private HttpRequest buildGetOneofMapOfInnerMixedMapRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/response/mapOfMixedMap");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getOneofMapOfInnerMixedMap.
     * @return An object of type Map of String, GetOneofMapOfInnerMixedMapSession
     */
    private Map<String, GetOneofMapOfInnerMixedMapSession> handleGetOneofMapOfInnerMixedMapResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Map<String, GetOneofMapOfInnerMixedMapSession> result = ApiHelper.deserialize(responseBody,
                new TypeReference<Map<String, GetOneofMapOfInnerMixedMapSession>>(){});

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the List of String, GetOneofOuterArrayOfMapFlagSession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<Map<String, GetOneofOuterArrayOfMapFlagSession>> getOneofOuterArrayOfMapFlag(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetOneofOuterArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetOneofOuterArrayOfMapFlagResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the List of String, GetOneofOuterArrayOfMapFlagSession response from the API call
     */
    public CompletableFuture<List<Map<String, GetOneofOuterArrayOfMapFlagSession>>> getOneofOuterArrayOfMapFlagAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetOneofOuterArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetOneofOuterArrayOfMapFlagResponse(context));
    }

    /**
     * Builds the HttpRequest object for getOneofOuterArrayOfMapFlag.
     */
    private HttpRequest buildGetOneofOuterArrayOfMapFlagRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/response/outerArrayOfMapFlag");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getOneofOuterArrayOfMapFlag.
     * @return An object of type List of String, GetOneofOuterArrayOfMapFlagSession
     */
    private List<Map<String, GetOneofOuterArrayOfMapFlagSession>> handleGetOneofOuterArrayOfMapFlagResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        List<Map<String, GetOneofOuterArrayOfMapFlagSession>> result = ApiHelper.deserialize(responseBody,
                new TypeReference<List<Map<String, GetOneofOuterArrayOfMapFlagSession>>>(){});

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the GetOneofInnerArrayOfMapFlagSession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetOneofInnerArrayOfMapFlagSession getOneofInnerArrayOfMapFlag(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetOneofInnerArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetOneofInnerArrayOfMapFlagResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the GetOneofInnerArrayOfMapFlagSession response from the API call
     */
    public CompletableFuture<GetOneofInnerArrayOfMapFlagSession> getOneofInnerArrayOfMapFlagAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetOneofInnerArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetOneofInnerArrayOfMapFlagResponse(context));
    }

    /**
     * Builds the HttpRequest object for getOneofInnerArrayOfMapFlag.
     */
    private HttpRequest buildGetOneofInnerArrayOfMapFlagRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/response/innerArrayOfMapFlag");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getOneofInnerArrayOfMapFlag.
     * @return An object of type GetOneofInnerArrayOfMapFlagSession
     */
    private GetOneofInnerArrayOfMapFlagSession handleGetOneofInnerArrayOfMapFlagResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetOneofInnerArrayOfMapFlagSession result = ApiHelper.deserialize(responseBody,
                GetOneofInnerArrayOfMapFlagSession.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the List of String, GetOneofArrayOfMapFlagOfArrayOfMapFlagSession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<Map<String, GetOneofArrayOfMapFlagOfArrayOfMapFlagSession>> getOneofArrayOfMapFlagOfArrayOfMapFlag(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetOneofArrayOfMapFlagOfArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetOneofArrayOfMapFlagOfArrayOfMapFlagResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the List of String, GetOneofArrayOfMapFlagOfArrayOfMapFlagSession response from the API call
     */
    public CompletableFuture<List<Map<String, GetOneofArrayOfMapFlagOfArrayOfMapFlagSession>>> getOneofArrayOfMapFlagOfArrayOfMapFlagAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetOneofArrayOfMapFlagOfArrayOfMapFlagRequest(
                isPrimitiveType, isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetOneofArrayOfMapFlagOfArrayOfMapFlagResponse(context));
    }

    /**
     * Builds the HttpRequest object for getOneofArrayOfMapFlagOfArrayOfMapFlag.
     */
    private HttpRequest buildGetOneofArrayOfMapFlagOfArrayOfMapFlagRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/response/arrayOfMapFlagOfArrayOfMapFlag");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getOneofArrayOfMapFlagOfArrayOfMapFlag.
     * @return An object of type List of String, GetOneofArrayOfMapFlagOfArrayOfMapFlagSession
     */
    private List<Map<String, GetOneofArrayOfMapFlagOfArrayOfMapFlagSession>> handleGetOneofArrayOfMapFlagOfArrayOfMapFlagResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        List<Map<String, GetOneofArrayOfMapFlagOfArrayOfMapFlagSession>> result = ApiHelper.deserialize(responseBody,
                new TypeReference<List<Map<String, GetOneofArrayOfMapFlagOfArrayOfMapFlagSession>>>(){});

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the GetOneofInnerMixedArrayOfMapFlagSession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetOneofInnerMixedArrayOfMapFlagSession getOneofInnerMixedArrayOfMapFlag(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetOneofInnerMixedArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetOneofInnerMixedArrayOfMapFlagResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the GetOneofInnerMixedArrayOfMapFlagSession response from the API call
     */
    public CompletableFuture<GetOneofInnerMixedArrayOfMapFlagSession> getOneofInnerMixedArrayOfMapFlagAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetOneofInnerMixedArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetOneofInnerMixedArrayOfMapFlagResponse(context));
    }

    /**
     * Builds the HttpRequest object for getOneofInnerMixedArrayOfMapFlag.
     */
    private HttpRequest buildGetOneofInnerMixedArrayOfMapFlagRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/response/innerMixedArrayOfMap");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getOneofInnerMixedArrayOfMapFlag.
     * @return An object of type GetOneofInnerMixedArrayOfMapFlagSession
     */
    private GetOneofInnerMixedArrayOfMapFlagSession handleGetOneofInnerMixedArrayOfMapFlagResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetOneofInnerMixedArrayOfMapFlagSession result = ApiHelper.deserialize(responseBody,
                GetOneofInnerMixedArrayOfMapFlagSession.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the List of String, GetOneofArrayOfMapFlagOfMixedArrayOfMapFlagSession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<Map<String, GetOneofArrayOfMapFlagOfMixedArrayOfMapFlagSession>> getOneofArrayOfMapFlagOfMixedArrayOfMapFlag(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetOneofArrayOfMapFlagOfMixedArrayOfMapFlagRequest(
                isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetOneofArrayOfMapFlagOfMixedArrayOfMapFlagResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the List of String, GetOneofArrayOfMapFlagOfMixedArrayOfMapFlagSession response from the API call
     */
    public CompletableFuture<List<Map<String, GetOneofArrayOfMapFlagOfMixedArrayOfMapFlagSession>>> getOneofArrayOfMapFlagOfMixedArrayOfMapFlagAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetOneofArrayOfMapFlagOfMixedArrayOfMapFlagRequest(
                isPrimitiveType, isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetOneofArrayOfMapFlagOfMixedArrayOfMapFlagResponse(context));
    }

    /**
     * Builds the HttpRequest object for getOneofArrayOfMapFlagOfMixedArrayOfMapFlag.
     */
    private HttpRequest buildGetOneofArrayOfMapFlagOfMixedArrayOfMapFlagRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/response/arrayOfMapFlagOfMixedArrayOfMap");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getOneofArrayOfMapFlagOfMixedArrayOfMapFlag.
     * @return An object of type List of String, GetOneofArrayOfMapFlagOfMixedArrayOfMapFlagSession
     */
    private List<Map<String, GetOneofArrayOfMapFlagOfMixedArrayOfMapFlagSession>> handleGetOneofArrayOfMapFlagOfMixedArrayOfMapFlagResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        List<Map<String, GetOneofArrayOfMapFlagOfMixedArrayOfMapFlagSession>> result = ApiHelper.deserialize(responseBody,
                new TypeReference<List<Map<String, GetOneofArrayOfMapFlagOfMixedArrayOfMapFlagSession>>>(){});

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the Map of GetOneofOuterMapOfArraySession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Map<String, List<GetOneofOuterMapOfArraySession>> getOneofOuterMapOfArray(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetOneofOuterMapOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetOneofOuterMapOfArrayResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the Map of GetOneofOuterMapOfArraySession response from the API call
     */
    public CompletableFuture<Map<String, List<GetOneofOuterMapOfArraySession>>> getOneofOuterMapOfArrayAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetOneofOuterMapOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetOneofOuterMapOfArrayResponse(context));
    }

    /**
     * Builds the HttpRequest object for getOneofOuterMapOfArray.
     */
    private HttpRequest buildGetOneofOuterMapOfArrayRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/response/outerMapOfArray");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getOneofOuterMapOfArray.
     * @return An object of type Map of GetOneofOuterMapOfArraySession
     */
    private Map<String, List<GetOneofOuterMapOfArraySession>> handleGetOneofOuterMapOfArrayResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Map<String, List<GetOneofOuterMapOfArraySession>> result = ApiHelper.deserialize(responseBody,
                new TypeReference<Map<String, List<GetOneofOuterMapOfArraySession>>>(){});

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the GetOneofInnerMapOfArraySession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetOneofInnerMapOfArraySession getOneofInnerMapOfArray(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetOneofInnerMapOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetOneofInnerMapOfArrayResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the GetOneofInnerMapOfArraySession response from the API call
     */
    public CompletableFuture<GetOneofInnerMapOfArraySession> getOneofInnerMapOfArrayAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetOneofInnerMapOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetOneofInnerMapOfArrayResponse(context));
    }

    /**
     * Builds the HttpRequest object for getOneofInnerMapOfArray.
     */
    private HttpRequest buildGetOneofInnerMapOfArrayRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/response/innerMapOfArray");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getOneofInnerMapOfArray.
     * @return An object of type GetOneofInnerMapOfArraySession
     */
    private GetOneofInnerMapOfArraySession handleGetOneofInnerMapOfArrayResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetOneofInnerMapOfArraySession result = ApiHelper.deserialize(responseBody,
                GetOneofInnerMapOfArraySession.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the Map of GetOneofMapOfArrayOfMapOfArraySession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Map<String, List<GetOneofMapOfArrayOfMapOfArraySession>> getOneofMapOfArrayOfMapOfArray(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetOneofMapOfArrayOfMapOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetOneofMapOfArrayOfMapOfArrayResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the Map of GetOneofMapOfArrayOfMapOfArraySession response from the API call
     */
    public CompletableFuture<Map<String, List<GetOneofMapOfArrayOfMapOfArraySession>>> getOneofMapOfArrayOfMapOfArrayAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetOneofMapOfArrayOfMapOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetOneofMapOfArrayOfMapOfArrayResponse(context));
    }

    /**
     * Builds the HttpRequest object for getOneofMapOfArrayOfMapOfArray.
     */
    private HttpRequest buildGetOneofMapOfArrayOfMapOfArrayRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/response/mapOfArrayOfInnerMapOfArray");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getOneofMapOfArrayOfMapOfArray.
     * @return An object of type Map of GetOneofMapOfArrayOfMapOfArraySession
     */
    private Map<String, List<GetOneofMapOfArrayOfMapOfArraySession>> handleGetOneofMapOfArrayOfMapOfArrayResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Map<String, List<GetOneofMapOfArrayOfMapOfArraySession>> result = ApiHelper.deserialize(responseBody,
                new TypeReference<Map<String, List<GetOneofMapOfArrayOfMapOfArraySession>>>(){});

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the GetOneofInnerMixedMapOfArraySession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetOneofInnerMixedMapOfArraySession getOneofInnerMixedMapOfArray(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetOneofInnerMixedMapOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetOneofInnerMixedMapOfArrayResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the GetOneofInnerMixedMapOfArraySession response from the API call
     */
    public CompletableFuture<GetOneofInnerMixedMapOfArraySession> getOneofInnerMixedMapOfArrayAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetOneofInnerMixedMapOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetOneofInnerMixedMapOfArrayResponse(context));
    }

    /**
     * Builds the HttpRequest object for getOneofInnerMixedMapOfArray.
     */
    private HttpRequest buildGetOneofInnerMixedMapOfArrayRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/response/innerMixedMapOfArray");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getOneofInnerMixedMapOfArray.
     * @return An object of type GetOneofInnerMixedMapOfArraySession
     */
    private GetOneofInnerMixedMapOfArraySession handleGetOneofInnerMixedMapOfArrayResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetOneofInnerMixedMapOfArraySession result = ApiHelper.deserialize(responseBody,
                GetOneofInnerMixedMapOfArraySession.class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the Map of GetOneofMapOfArrayOfMixedMapOfArraySession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Map<String, List<GetOneofMapOfArrayOfMixedMapOfArraySession>> getOneofMapOfArrayOfMixedMapOfArray(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetOneofMapOfArrayOfMixedMapOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetOneofMapOfArrayOfMixedMapOfArrayResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the Map of GetOneofMapOfArrayOfMixedMapOfArraySession response from the API call
     */
    public CompletableFuture<Map<String, List<GetOneofMapOfArrayOfMixedMapOfArraySession>>> getOneofMapOfArrayOfMixedMapOfArrayAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetOneofMapOfArrayOfMixedMapOfArrayRequest(
                isPrimitiveType, isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetOneofMapOfArrayOfMixedMapOfArrayResponse(context));
    }

    /**
     * Builds the HttpRequest object for getOneofMapOfArrayOfMixedMapOfArray.
     */
    private HttpRequest buildGetOneofMapOfArrayOfMixedMapOfArrayRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/response/mapOfArrayOfMixedMapOfArray");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getOneofMapOfArrayOfMixedMapOfArray.
     * @return An object of type Map of GetOneofMapOfArrayOfMixedMapOfArraySession
     */
    private Map<String, List<GetOneofMapOfArrayOfMixedMapOfArraySession>> handleGetOneofMapOfArrayOfMixedMapOfArrayResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Map<String, List<GetOneofMapOfArrayOfMixedMapOfArraySession>> result = ApiHelper.deserialize(responseBody,
                new TypeReference<Map<String, List<GetOneofMapOfArrayOfMixedMapOfArraySession>>>(){});

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the List of GetOneofArrayOfMapsSession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<GetOneofArrayOfMapsSession> getOneofArrayOfMaps(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetOneofArrayOfMapsRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetOneofArrayOfMapsResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the List of GetOneofArrayOfMapsSession response from the API call
     */
    public CompletableFuture<List<GetOneofArrayOfMapsSession>> getOneofArrayOfMapsAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetOneofArrayOfMapsRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetOneofArrayOfMapsResponse(context));
    }

    /**
     * Builds the HttpRequest object for getOneofArrayOfMaps.
     */
    private HttpRequest buildGetOneofArrayOfMapsRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/response/arrayOfMaps");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getOneofArrayOfMaps.
     * @return An object of type List of GetOneofArrayOfMapsSession
     */
    private List<GetOneofArrayOfMapsSession> handleGetOneofArrayOfMapsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        List<GetOneofArrayOfMapsSession> result = ApiHelper.deserializeArray(responseBody,
                GetOneofArrayOfMapsSession[].class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the List of GetOneofArrayOfArrayOfMapFlagSession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<GetOneofArrayOfArrayOfMapFlagSession> getOneofArrayOfArrayOfMapFlag(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetOneofArrayOfArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetOneofArrayOfArrayOfMapFlagResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the List of GetOneofArrayOfArrayOfMapFlagSession response from the API call
     */
    public CompletableFuture<List<GetOneofArrayOfArrayOfMapFlagSession>> getOneofArrayOfArrayOfMapFlagAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetOneofArrayOfArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetOneofArrayOfArrayOfMapFlagResponse(context));
    }

    /**
     * Builds the HttpRequest object for getOneofArrayOfArrayOfMapFlag.
     */
    private HttpRequest buildGetOneofArrayOfArrayOfMapFlagRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/response/arrayOfArrayOfMapFlag");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getOneofArrayOfArrayOfMapFlag.
     * @return An object of type List of GetOneofArrayOfArrayOfMapFlagSession
     */
    private List<GetOneofArrayOfArrayOfMapFlagSession> handleGetOneofArrayOfArrayOfMapFlagResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        List<GetOneofArrayOfArrayOfMapFlagSession> result = ApiHelper.deserializeArray(responseBody,
                GetOneofArrayOfArrayOfMapFlagSession[].class);

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the Map of String, GetOneofMapOfArraySession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Map<String, GetOneofMapOfArraySession> getOneofMapOfArray(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetOneofMapOfArrayRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetOneofMapOfArrayResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the Map of String, GetOneofMapOfArraySession response from the API call
     */
    public CompletableFuture<Map<String, GetOneofMapOfArraySession>> getOneofMapOfArrayAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetOneofMapOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetOneofMapOfArrayResponse(context));
    }

    /**
     * Builds the HttpRequest object for getOneofMapOfArray.
     */
    private HttpRequest buildGetOneofMapOfArrayRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/response/mapOfArrays");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getOneofMapOfArray.
     * @return An object of type Map of String, GetOneofMapOfArraySession
     */
    private Map<String, GetOneofMapOfArraySession> handleGetOneofMapOfArrayResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Map<String, GetOneofMapOfArraySession> result = ApiHelper.deserialize(responseBody,
                new TypeReference<Map<String, GetOneofMapOfArraySession>>(){});

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the Map of String, GetOneofMapOfArrayOfMapFlagSession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Map<String, GetOneofMapOfArrayOfMapFlagSession> getOneofMapOfArrayOfMapFlag(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetOneofMapOfArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetOneofMapOfArrayOfMapFlagResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the Map of String, GetOneofMapOfArrayOfMapFlagSession response from the API call
     */
    public CompletableFuture<Map<String, GetOneofMapOfArrayOfMapFlagSession>> getOneofMapOfArrayOfMapFlagAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetOneofMapOfArrayOfMapFlagRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetOneofMapOfArrayOfMapFlagResponse(context));
    }

    /**
     * Builds the HttpRequest object for getOneofMapOfArrayOfMapFlag.
     */
    private HttpRequest buildGetOneofMapOfArrayOfMapFlagRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/response/mapOfArrayOfMapFlag");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getOneofMapOfArrayOfMapFlag.
     * @return An object of type Map of String, GetOneofMapOfArrayOfMapFlagSession
     */
    private Map<String, GetOneofMapOfArrayOfMapFlagSession> handleGetOneofMapOfArrayOfMapFlagResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Map<String, GetOneofMapOfArrayOfMapFlagSession> result = ApiHelper.deserialize(responseBody,
                new TypeReference<Map<String, GetOneofMapOfArrayOfMapFlagSession>>(){});

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the List of String, GetOneofArrayOfMapFlagOfArraySession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<Map<String, GetOneofArrayOfMapFlagOfArraySession>> getOneofArrayOfMapFlagOfArray(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetOneofArrayOfMapFlagOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetOneofArrayOfMapFlagOfArrayResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the List of String, GetOneofArrayOfMapFlagOfArraySession response from the API call
     */
    public CompletableFuture<List<Map<String, GetOneofArrayOfMapFlagOfArraySession>>> getOneofArrayOfMapFlagOfArrayAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetOneofArrayOfMapFlagOfArrayRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetOneofArrayOfMapFlagOfArrayResponse(context));
    }

    /**
     * Builds the HttpRequest object for getOneofArrayOfMapFlagOfArray.
     */
    private HttpRequest buildGetOneofArrayOfMapFlagOfArrayRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/response/arrayOfMapFlagOfArray");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getOneofArrayOfMapFlagOfArray.
     * @return An object of type List of String, GetOneofArrayOfMapFlagOfArraySession
     */
    private List<Map<String, GetOneofArrayOfMapFlagOfArraySession>> handleGetOneofArrayOfMapFlagOfArrayResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        List<Map<String, GetOneofArrayOfMapFlagOfArraySession>> result = ApiHelper.deserialize(responseBody,
                new TypeReference<List<Map<String, GetOneofArrayOfMapFlagOfArraySession>>>(){});

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the List of String, GetOneofArrayOfMapFlagOfMapSession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<Map<String, GetOneofArrayOfMapFlagOfMapSession>> getOneofArrayOfMapFlagOfMap(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetOneofArrayOfMapFlagOfMapRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetOneofArrayOfMapFlagOfMapResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the List of String, GetOneofArrayOfMapFlagOfMapSession response from the API call
     */
    public CompletableFuture<List<Map<String, GetOneofArrayOfMapFlagOfMapSession>>> getOneofArrayOfMapFlagOfMapAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetOneofArrayOfMapFlagOfMapRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetOneofArrayOfMapFlagOfMapResponse(context));
    }

    /**
     * Builds the HttpRequest object for getOneofArrayOfMapFlagOfMap.
     */
    private HttpRequest buildGetOneofArrayOfMapFlagOfMapRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/response/arrayOfMapFlagOfMap");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getOneofArrayOfMapFlagOfMap.
     * @return An object of type List of String, GetOneofArrayOfMapFlagOfMapSession
     */
    private List<Map<String, GetOneofArrayOfMapFlagOfMapSession>> handleGetOneofArrayOfMapFlagOfMapResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        List<Map<String, GetOneofArrayOfMapFlagOfMapSession>> result = ApiHelper.deserialize(responseBody,
                new TypeReference<List<Map<String, GetOneofArrayOfMapFlagOfMapSession>>>(){});

        return result;
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the GetMultiLevelOneofSession response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetMultiLevelOneofSession getMultiLevelOneof(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) throws ApiException, IOException {
        HttpRequest request = buildGetMultiLevelOneofRequest(isPrimitiveType, isAtEndpointLevel,
                hasDiscriminator);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetMultiLevelOneofResponse(context);
    }

    /**
     * @param  isPrimitiveType  Required parameter: Example:
     * @param  isAtEndpointLevel  Required parameter: Example:
     * @param  hasDiscriminator  Required parameter: Example:
     * @return    Returns the GetMultiLevelOneofSession response from the API call
     */
    public CompletableFuture<GetMultiLevelOneofSession> getMultiLevelOneofAsync(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        return makeHttpCallAsync(() -> buildGetMultiLevelOneofRequest(isPrimitiveType,
                isAtEndpointLevel, hasDiscriminator),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetMultiLevelOneofResponse(context));
    }

    /**
     * Builds the HttpRequest object for getMultiLevelOneof.
     */
    private HttpRequest buildGetMultiLevelOneofRequest(
            final boolean isPrimitiveType,
            final boolean isAtEndpointLevel,
            final boolean hasDiscriminator) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/oneof/response/multiLevel");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("isPrimitiveType", isPrimitiveType);
        queryParameters.put("isAtEndpointLevel", isAtEndpointLevel);
        queryParameters.put("hasDiscriminator", hasDiscriminator);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getMultiLevelOneof.
     * @return An object of type GetMultiLevelOneofSession
     */
    private GetMultiLevelOneofSession handleGetMultiLevelOneofResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetMultiLevelOneofSession result = ApiHelper.deserialize(responseBody,
                GetMultiLevelOneofSession.class);

        return result;
    }

}