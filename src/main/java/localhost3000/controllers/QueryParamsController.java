/*
 * NullableLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package localhost3000.controllers;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import localhost3000.ApiHelper;
import localhost3000.AuthManager;
import localhost3000.Configuration;
import localhost3000.exceptions.ApiException;
import localhost3000.http.Headers;
import localhost3000.http.client.HttpCallback;
import localhost3000.http.client.HttpClient;
import localhost3000.http.client.HttpContext;
import localhost3000.http.request.HttpRequest;
import localhost3000.http.response.HttpResponse;
import localhost3000.http.response.HttpStringResponse;
import localhost3000.models.DynamicResponse;

/**
 * This class lists all the endpoints of the groups.
 */
public final class QueryParamsController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public QueryParamsController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }

    /**
     * Initializes the controller with HTTPCallback.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     * @param httpCallback    Callback to be called before and after the HTTP call.
     */
    public QueryParamsController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        super(config, httpClient, authManagers, httpCallback);
    }

    /**
     * @param  allNullableSetToNull  Required parameter: Example:
     * @param  testPrecision  Required parameter: Example:
     * @param  testNumber  Required parameter: Example:
     * @param  testBoolean  Required parameter: Example:
     * @param  testLong  Required parameter: Example:
     * @param  testString  Required parameter: Example:
     * @return    Returns the DynamicResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DynamicResponse getSendNullableScalarTypesInQuery(
            final boolean allNullableSetToNull,
            final Double testPrecision,
            final Integer testNumber,
            final Boolean testBoolean,
            final Long testLong,
            final String testString) throws ApiException, IOException {
        HttpRequest request = buildGetSendNullableScalarTypesInQueryRequest(allNullableSetToNull,
                testPrecision, testNumber, testBoolean, testLong, testString);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetSendNullableScalarTypesInQueryResponse(context);
    }

    /**
     * @param  allNullableSetToNull  Required parameter: Example:
     * @param  testPrecision  Required parameter: Example:
     * @param  testNumber  Required parameter: Example:
     * @param  testBoolean  Required parameter: Example:
     * @param  testLong  Required parameter: Example:
     * @param  testString  Required parameter: Example:
     * @return    Returns the DynamicResponse response from the API call
     */
    public CompletableFuture<DynamicResponse> getSendNullableScalarTypesInQueryAsync(
            final boolean allNullableSetToNull,
            final Double testPrecision,
            final Integer testNumber,
            final Boolean testBoolean,
            final Long testLong,
            final String testString) {
        return makeHttpCallAsync(() -> buildGetSendNullableScalarTypesInQueryRequest(
                allNullableSetToNull, testPrecision, testNumber, testBoolean, testLong, testString),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetSendNullableScalarTypesInQueryResponse(context));
    }

    /**
     * Builds the HttpRequest object for getSendNullableScalarTypesInQuery.
     */
    private HttpRequest buildGetSendNullableScalarTypesInQueryRequest(
            final boolean allNullableSetToNull,
            final Double testPrecision,
            final Integer testNumber,
            final Boolean testBoolean,
            final Long testLong,
            final String testString) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/query/sendNullableTypesInParam");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("allNullableSetToNull", allNullableSetToNull);
        queryParameters.put("testPrecision", testPrecision);
        queryParameters.put("testNumber", testNumber);
        queryParameters.put("testBoolean", testBoolean);
        queryParameters.put("testLong", testLong);
        queryParameters.put("testString", testString);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getSendNullableScalarTypesInQuery.
     * @return An object of type DynamicResponse
     */
    private DynamicResponse handleGetSendNullableScalarTypesInQueryResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        DynamicResponse result = new DynamicResponse(response);

        return result;
    }

}