/*
 * TesterXMLLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package localhost3000.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonSubTypes.Type;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import javax.xml.bind.annotation.XmlElement;

/**
 * This is a model class for BaseForDiscriminatorInElement type.
 */
@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        include = JsonTypeInfo.As.EXISTING_PROPERTY,
        property = "discriminator",
        defaultImpl = BaseForDiscriminatorInElement.class,
        visible = true)
@JsonSubTypes({
    @Type(value = DiscriminatorInElement.class, name = "Luke Skywalker")
})
@JsonInclude(Include.ALWAYS)
public class BaseForDiscriminatorInElement {
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private String discriminator;
    private String baseField;

    /**
     * Default constructor.
     */
    public BaseForDiscriminatorInElement() {
        setDiscriminator("Anakin Skywalker");
    }

    /**
     * Initialization constructor.
     * @param  baseField  String value for baseField.
     * @param  discriminator  String value for discriminator.
     */
    public BaseForDiscriminatorInElement(
            String baseField,
            String discriminator) {
        this.discriminator = discriminator;
        this.baseField = baseField;
    }

    /**
     * Getter for Discriminator.
     * The discriminator element.
     * @return Returns the String
     */
    @JsonGetter("discriminator")
    @XmlElement(name = "discrim")
    public String getDiscriminator() {
        return discriminator;
    }

    /**
     * Setter for Discriminator.
     * The discriminator element.
     * @param discriminator Value for String
     */
    @JsonSetter("discriminator")
    public void setDiscriminator(String discriminator) {
        this.discriminator = discriminator;
    }

    /**
     * Getter for BaseField.
     * String element in parent model.
     * @return Returns the String
     */
    @JsonGetter("Base Field")
    @XmlElement(name = "inherited")
    public String getBaseField() {
        return baseField;
    }

    /**
     * Setter for BaseField.
     * String element in parent model.
     * @param baseField Value for String
     */
    @JsonSetter("Base Field")
    public void setBaseField(String baseField) {
        this.baseField = baseField;
    }

    /**
     * Converts this BaseForDiscriminatorInElement into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "BaseForDiscriminatorInElement [" + "baseField=" + baseField + ", discriminator="
                + discriminator + "]";
    }

    /**
     * Builds a new {@link BaseForDiscriminatorInElement.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link BaseForDiscriminatorInElement.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(baseField)
                .discriminator(getDiscriminator());
        return builder;
    }

    /**
     * Class to build instances of {@link BaseForDiscriminatorInElement}.
     */
    public static class Builder {
        private String baseField;
        private String discriminator = "Anakin Skywalker";

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  baseField  String value for baseField.
         */
        public Builder(String baseField) {
            this.baseField = baseField;
        }

        /**
         * Setter for baseField.
         * @param  baseField  String value for baseField.
         * @return Builder
         */
        public Builder baseField(String baseField) {
            this.baseField = baseField;
            return this;
        }

        /**
         * Setter for discriminator.
         * @param  discriminator  String value for discriminator.
         * @return Builder
         */
        public Builder discriminator(String discriminator) {
            this.discriminator = discriminator;
            return this;
        }

        /**
         * Builds a new {@link BaseForDiscriminatorInElement} object using the set fields.
         * @return {@link BaseForDiscriminatorInElement}
         */
        public BaseForDiscriminatorInElement build() {
            return new BaseForDiscriminatorInElement(baseField, discriminator);
        }
    }
}
