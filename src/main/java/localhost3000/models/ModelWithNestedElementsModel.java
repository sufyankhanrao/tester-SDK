/*
 * TesterXMLLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package localhost3000.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonSetter;
import javax.xml.bind.annotation.XmlElement;

/**
 * This is a model class for ModelWithNestedElementsModel type.
 */
public class ModelWithNestedElementsModel {
    private SimpleElements elements;
    private String simple;

    /**
     * Default constructor.
     */
    public ModelWithNestedElementsModel() {
    }

    /**
     * Initialization constructor.
     * @param  elements  SimpleElements value for elements.
     * @param  simple  String value for simple.
     */
    public ModelWithNestedElementsModel(
            SimpleElements elements,
            String simple) {
        this.elements = elements;
        this.simple = simple;
    }

    /**
     * Getter for Elements.
     * A model with only non-array, primitive type elements. Look
     * [here](https://gist.github.com/thehappybug/f6cf13f8b5c14a9079ed6402fffe6861#generate-simple-object)
     * for the expected xml schema
     * @return Returns the SimpleElements
     */
    @JsonGetter("Elements")
    @XmlElement(name = "nested")
    public SimpleElements getElements() {
        return elements;
    }

    /**
     * Setter for Elements.
     * A model with only non-array, primitive type elements. Look
     * [here](https://gist.github.com/thehappybug/f6cf13f8b5c14a9079ed6402fffe6861#generate-simple-object)
     * for the expected xml schema
     * @param elements Value for SimpleElements
     */
    @JsonSetter("Elements")
    public void setElements(SimpleElements elements) {
        this.elements = elements;
    }

    /**
     * Getter for Simple.
     * @return Returns the String
     */
    @JsonGetter("simple")
    @XmlElement(name = "simple")
    public String getSimple() {
        return simple;
    }

    /**
     * Setter for Simple.
     * @param simple Value for String
     */
    @JsonSetter("simple")
    public void setSimple(String simple) {
        this.simple = simple;
    }

    /**
     * Converts this ModelWithNestedElementsModel into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "ModelWithNestedElementsModel [" + "elements=" + elements + ", simple=" + simple
                + "]";
    }

    /**
     * Builds a new {@link ModelWithNestedElementsModel.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link ModelWithNestedElementsModel.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(elements, simple);
        return builder;
    }

    /**
     * Class to build instances of {@link ModelWithNestedElementsModel}.
     */
    public static class Builder {
        private SimpleElements elements;
        private String simple;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  elements  SimpleElements value for elements.
         * @param  simple  String value for simple.
         */
        public Builder(SimpleElements elements, String simple) {
            this.elements = elements;
            this.simple = simple;
        }

        /**
         * Setter for elements.
         * @param  elements  SimpleElements value for elements.
         * @return Builder
         */
        public Builder elements(SimpleElements elements) {
            this.elements = elements;
            return this;
        }

        /**
         * Setter for simple.
         * @param  simple  String value for simple.
         * @return Builder
         */
        public Builder simple(String simple) {
            this.simple = simple;
            return this;
        }

        /**
         * Builds a new {@link ModelWithNestedElementsModel} object using the set fields.
         * @return {@link ModelWithNestedElementsModel}
         */
        public ModelWithNestedElementsModel build() {
            return new ModelWithNestedElementsModel(elements, simple);
        }
    }
}
