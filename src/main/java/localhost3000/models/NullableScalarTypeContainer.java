/*
 * NullableLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package localhost3000.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for NullableScalarTypeContainer type.
 */
public class NullableScalarTypeContainer {
    private Double testPrecision;
    private Integer testNumber;
    private Boolean testBoolean;
    private Long testLong;
    private String testString;

    /**
     * Default constructor.
     */
    public NullableScalarTypeContainer() {
    }

    /**
     * Initialization constructor.
     * @param  testPrecision  Double value for testPrecision.
     * @param  testNumber  Integer value for testNumber.
     * @param  testBoolean  Boolean value for testBoolean.
     * @param  testLong  Long value for testLong.
     * @param  testString  String value for testString.
     */
    public NullableScalarTypeContainer(
            Double testPrecision,
            Integer testNumber,
            Boolean testBoolean,
            Long testLong,
            String testString) {
        this.testPrecision = testPrecision;
        this.testNumber = testNumber;
        this.testBoolean = testBoolean;
        this.testLong = testLong;
        this.testString = testString;
    }

    /**
     * Getter for TestPrecision.
     * @return Returns the Double
     */
    @JsonGetter("testPrecision")
    public Double getTestPrecision() {
        return testPrecision;
    }

    /**
     * Setter for TestPrecision.
     * @param testPrecision Value for Double
     */
    @JsonSetter("testPrecision")
    public void setTestPrecision(Double testPrecision) {
        this.testPrecision = testPrecision;
    }

    /**
     * Getter for TestNumber.
     * @return Returns the Integer
     */
    @JsonGetter("testNumber")
    public Integer getTestNumber() {
        return testNumber;
    }

    /**
     * Setter for TestNumber.
     * @param testNumber Value for Integer
     */
    @JsonSetter("testNumber")
    public void setTestNumber(Integer testNumber) {
        this.testNumber = testNumber;
    }

    /**
     * Getter for TestBoolean.
     * @return Returns the Boolean
     */
    @JsonGetter("testBoolean")
    public Boolean getTestBoolean() {
        return testBoolean;
    }

    /**
     * Setter for TestBoolean.
     * @param testBoolean Value for Boolean
     */
    @JsonSetter("testBoolean")
    public void setTestBoolean(Boolean testBoolean) {
        this.testBoolean = testBoolean;
    }

    /**
     * Getter for TestLong.
     * @return Returns the Long
     */
    @JsonGetter("testLong")
    public Long getTestLong() {
        return testLong;
    }

    /**
     * Setter for TestLong.
     * @param testLong Value for Long
     */
    @JsonSetter("testLong")
    public void setTestLong(Long testLong) {
        this.testLong = testLong;
    }

    /**
     * Getter for TestString.
     * @return Returns the String
     */
    @JsonGetter("testString")
    public String getTestString() {
        return testString;
    }

    /**
     * Setter for TestString.
     * @param testString Value for String
     */
    @JsonSetter("testString")
    public void setTestString(String testString) {
        this.testString = testString;
    }

    /**
     * Converts this NullableScalarTypeContainer into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "NullableScalarTypeContainer [" + "testPrecision=" + testPrecision + ", testNumber="
                + testNumber + ", testBoolean=" + testBoolean + ", testLong=" + testLong
                + ", testString=" + testString + "]";
    }

    /**
     * Builds a new {@link NullableScalarTypeContainer.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link NullableScalarTypeContainer.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(testPrecision, testNumber, testBoolean, testLong, testString);
        return builder;
    }

    /**
     * Class to build instances of {@link NullableScalarTypeContainer}.
     */
    public static class Builder {
        private Double testPrecision;
        private Integer testNumber;
        private Boolean testBoolean;
        private Long testLong;
        private String testString;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  testPrecision  Double value for testPrecision.
         * @param  testNumber  Integer value for testNumber.
         * @param  testBoolean  Boolean value for testBoolean.
         * @param  testLong  Long value for testLong.
         * @param  testString  String value for testString.
         */
        public Builder(Double testPrecision, Integer testNumber, Boolean testBoolean, Long testLong,
                String testString) {
            this.testPrecision = testPrecision;
            this.testNumber = testNumber;
            this.testBoolean = testBoolean;
            this.testLong = testLong;
            this.testString = testString;
        }

        /**
         * Setter for testPrecision.
         * @param  testPrecision  Double value for testPrecision.
         * @return Builder
         */
        public Builder testPrecision(Double testPrecision) {
            this.testPrecision = testPrecision;
            return this;
        }

        /**
         * Setter for testNumber.
         * @param  testNumber  Integer value for testNumber.
         * @return Builder
         */
        public Builder testNumber(Integer testNumber) {
            this.testNumber = testNumber;
            return this;
        }

        /**
         * Setter for testBoolean.
         * @param  testBoolean  Boolean value for testBoolean.
         * @return Builder
         */
        public Builder testBoolean(Boolean testBoolean) {
            this.testBoolean = testBoolean;
            return this;
        }

        /**
         * Setter for testLong.
         * @param  testLong  Long value for testLong.
         * @return Builder
         */
        public Builder testLong(Long testLong) {
            this.testLong = testLong;
            return this;
        }

        /**
         * Setter for testString.
         * @param  testString  String value for testString.
         * @return Builder
         */
        public Builder testString(String testString) {
            this.testString = testString;
            return this;
        }

        /**
         * Builds a new {@link NullableScalarTypeContainer} object using the set fields.
         * @return {@link NullableScalarTypeContainer}
         */
        public NullableScalarTypeContainer build() {
            return new NullableScalarTypeContainer(testPrecision, testNumber, testBoolean, testLong,
                    testString);
        }
    }
}
