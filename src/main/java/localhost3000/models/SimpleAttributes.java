/*
 * TesterXMLLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package localhost3000.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonSubTypes.Type;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;

/**
 * This is a model class for SimpleAttributes type.
 */
@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        include = JsonTypeInfo.As.EXISTING_PROPERTY,
        property = "attributes_type",
        defaultImpl = SimpleAttributes.class,
        visible = true)
@JsonSubTypes({
    @Type(value = ModelWithInheritedAttributes.class, name = "ModelWithInheritedAttributes")
})
@JsonInclude(Include.ALWAYS)
public class SimpleAttributes {
    private String stringElement;
    private String nonreserved;
    private int numberElement;
    private double precision;
    private boolean booleanElement;
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private String attributesType;

    /**
     * Default constructor.
     */
    public SimpleAttributes() {
        setAttributesType("SimpleAttributes");
    }

    /**
     * Initialization constructor.
     * @param  stringElement  String value for stringElement.
     * @param  nonreserved  String value for nonreserved.
     * @param  numberElement  int value for numberElement.
     * @param  precision  double value for precision.
     * @param  booleanElement  boolean value for booleanElement.
     * @param  attributesType  String value for attributesType.
     */
    public SimpleAttributes(
            String stringElement,
            String nonreserved,
            int numberElement,
            double precision,
            boolean booleanElement,
            String attributesType) {
        this.stringElement = stringElement;
        this.nonreserved = nonreserved;
        this.numberElement = numberElement;
        this.precision = precision;
        this.booleanElement = booleanElement;
        this.attributesType = attributesType;
    }

    /**
     * Getter for StringElement.
     * string attribute (node name "string")
     * @return Returns the String
     */
    @JsonGetter("string-element")
    @XmlAttribute(name = "string")
    public String getStringElement() {
        return stringElement;
    }

    /**
     * Setter for StringElement.
     * string attribute (node name "string")
     * @param stringElement Value for String
     */
    @JsonSetter("string-element")
    public void setStringElement(String stringElement) {
        this.stringElement = stringElement;
    }

    /**
     * Getter for Nonreserved.
     * string attribute (node name "nonreserved")
     * @return Returns the String
     */
    @JsonGetter("nonreserved")
    @XmlAttribute(name = "nonreserved")
    public String getNonreserved() {
        return nonreserved;
    }

    /**
     * Setter for Nonreserved.
     * string attribute (node name "nonreserved")
     * @param nonreserved Value for String
     */
    @JsonSetter("nonreserved")
    public void setNonreserved(String nonreserved) {
        this.nonreserved = nonreserved;
    }

    /**
     * Getter for NumberElement.
     * number attribute (node name "number ")
     * @return Returns the int
     */
    @JsonGetter("number-element")
    @XmlAttribute(name = "number")
    public int getNumberElement() {
        return numberElement;
    }

    /**
     * Setter for NumberElement.
     * number attribute (node name "number ")
     * @param numberElement Value for int
     */
    @JsonSetter("number-element")
    public void setNumberElement(int numberElement) {
        this.numberElement = numberElement;
    }

    /**
     * Getter for Precision.
     * precision attribute (node name "precision")
     * @return Returns the double
     */
    @JsonGetter("precision")
    @XmlAttribute(name = "precision")
    public double getPrecision() {
        return precision;
    }

    /**
     * Setter for Precision.
     * precision attribute (node name "precision")
     * @param precision Value for double
     */
    @JsonSetter("precision")
    public void setPrecision(double precision) {
        this.precision = precision;
    }

    /**
     * Getter for BooleanElement.
     * boolean attribute (node name "boolean")
     * @return Returns the boolean
     */
    @JsonGetter("boolean-element")
    @XmlAttribute(name = "boolean")
    public boolean getBooleanElement() {
        return booleanElement;
    }

    /**
     * Setter for BooleanElement.
     * boolean attribute (node name "boolean")
     * @param booleanElement Value for boolean
     */
    @JsonSetter("boolean-element")
    public void setBooleanElement(boolean booleanElement) {
        this.booleanElement = booleanElement;
    }

    /**
     * Getter for AttributesType.
     * @return Returns the String
     */
    @JsonGetter("attributes_type")
    @XmlElement(name = "attributes_type")
    public String getAttributesType() {
        return attributesType;
    }

    /**
     * Setter for AttributesType.
     * @param attributesType Value for String
     */
    @JsonSetter("attributes_type")
    public void setAttributesType(String attributesType) {
        this.attributesType = attributesType;
    }

    /**
     * Converts this SimpleAttributes into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "SimpleAttributes [" + "stringElement=" + stringElement + ", nonreserved="
                + nonreserved + ", numberElement=" + numberElement + ", precision=" + precision
                + ", booleanElement=" + booleanElement + ", attributesType=" + attributesType + "]";
    }

    /**
     * Builds a new {@link SimpleAttributes.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link SimpleAttributes.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(stringElement, nonreserved, numberElement, precision,
                booleanElement)
                .attributesType(getAttributesType());
        return builder;
    }

    /**
     * Class to build instances of {@link SimpleAttributes}.
     */
    public static class Builder {
        private String stringElement;
        private String nonreserved;
        private int numberElement;
        private double precision;
        private boolean booleanElement;
        private String attributesType = "SimpleAttributes";

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  stringElement  String value for stringElement.
         * @param  nonreserved  String value for nonreserved.
         * @param  numberElement  int value for numberElement.
         * @param  precision  double value for precision.
         * @param  booleanElement  boolean value for booleanElement.
         */
        public Builder(String stringElement, String nonreserved, int numberElement,
                double precision, boolean booleanElement) {
            this.stringElement = stringElement;
            this.nonreserved = nonreserved;
            this.numberElement = numberElement;
            this.precision = precision;
            this.booleanElement = booleanElement;
        }

        /**
         * Setter for stringElement.
         * @param  stringElement  String value for stringElement.
         * @return Builder
         */
        public Builder stringElement(String stringElement) {
            this.stringElement = stringElement;
            return this;
        }

        /**
         * Setter for nonreserved.
         * @param  nonreserved  String value for nonreserved.
         * @return Builder
         */
        public Builder nonreserved(String nonreserved) {
            this.nonreserved = nonreserved;
            return this;
        }

        /**
         * Setter for numberElement.
         * @param  numberElement  int value for numberElement.
         * @return Builder
         */
        public Builder numberElement(int numberElement) {
            this.numberElement = numberElement;
            return this;
        }

        /**
         * Setter for precision.
         * @param  precision  double value for precision.
         * @return Builder
         */
        public Builder precision(double precision) {
            this.precision = precision;
            return this;
        }

        /**
         * Setter for booleanElement.
         * @param  booleanElement  boolean value for booleanElement.
         * @return Builder
         */
        public Builder booleanElement(boolean booleanElement) {
            this.booleanElement = booleanElement;
            return this;
        }

        /**
         * Setter for attributesType.
         * @param  attributesType  String value for attributesType.
         * @return Builder
         */
        public Builder attributesType(String attributesType) {
            this.attributesType = attributesType;
            return this;
        }

        /**
         * Builds a new {@link SimpleAttributes} object using the set fields.
         * @return {@link SimpleAttributes}
         */
        public SimpleAttributes build() {
            return new SimpleAttributes(stringElement, nonreserved, numberElement, precision,
                    booleanElement, attributesType);
        }
    }
}
