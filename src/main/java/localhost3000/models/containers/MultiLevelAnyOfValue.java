/*
 * AnyOfScalarModelsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package localhost3000.models.containers;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.io.IOException;
import java.util.Arrays;
import localhost3000.ApiHelper;
import localhost3000.annotations.TypeCombinatorsCaseMarker;

/**
 * This is a container class for any-of types.
 */
@JsonDeserialize(using = MultiLevelAnyOfValue.MultiLevelAnyOfValueDeserializer.class)
public abstract class MultiLevelAnyOfValue {
    
    /**
     * Any-of type initialization method.
     * @param precision double value for precision.
     * @return The PrecisionCase object.
     */
    public static MultiLevelAnyOfValue fromPrecision(double precision) {
        return new PrecisionCase(precision);
    }

    /**
     * Any-of type initialization method.
     * @param case1 MultiLevelAnyOfValueCase1 value for case1.
     * @return The Case1Case object.
     */
    public static MultiLevelAnyOfValue fromCase1(MultiLevelAnyOfValueCase1 case1) {
        return new Case1(case1);
    }

    /**
     * Method to match from the provided any-of cases.
     * @param <R> The type to return after applying callback.
     * @param cases The any-of type cases callback.
     * @return The any-of matched case.
     */
    public abstract <R> R match(Cases<R> cases);

    /**
     * This is interface for any-of cases.
     * @param <R> The type to return after applying callback.
     */
    public interface Cases<R> {
        R precision(double precision);

        R case1(MultiLevelAnyOfValueCase1 case1);
    }

    /**
     * This is a implementation class for PrecisionCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorsCaseMarker
    private static class PrecisionCase extends MultiLevelAnyOfValue {

        @JsonValue
        private double precision;

        PrecisionCase(double precision) {
            this.precision = precision;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.precision(this.precision);
        }

        @JsonCreator
        private PrecisionCase(JsonNode jsonNode) throws IOException {
            if (jsonNode.isDouble()) {
                this.precision = ApiHelper.deserialize(jsonNode, Double.class);
            } else {
                throw new IllegalArgumentException();
            }
        }

        @Override
        public String toString() {
            return String.valueOf(precision);
        }
    }

    /**
     * This is a implementation class for Case1Case.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorsCaseMarker
    private static class Case1 extends MultiLevelAnyOfValue {

        @JsonValue
        private MultiLevelAnyOfValueCase1 case1;

        Case1(MultiLevelAnyOfValueCase1 case1) {
            this.case1 = case1;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.case1(this.case1);
        }

        @JsonCreator
        private Case1(JsonNode jsonNode) throws IOException {
            this.case1 = ApiHelper.deserialize(jsonNode,
                MultiLevelAnyOfValueCase1.class);
        }

        @Override
        public String toString() {
            return case1.toString();
        }
    }

    /**
     * This is a custom deserializer class for MultiLevelAnyOfValue.
     */
    protected static class MultiLevelAnyOfValueDeserializer
        extends JsonDeserializer<MultiLevelAnyOfValue> {

        @Override
        public MultiLevelAnyOfValue deserialize(JsonParser jp, DeserializationContext ctxt)
                throws IOException, JsonProcessingException {
            ObjectCodec oc = jp.getCodec();
            JsonNode node = oc.readTree(jp);
            return ApiHelper.deserialize(node, Arrays.asList(PrecisionCase.class,
                    Case1.class), false);
        }
    }

}
