/*
 * AnyOfNonScalarEndpointsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package localhost3000.models.containers;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.io.IOException;
import java.util.Arrays;
import localhost3000.ApiHelper;
import localhost3000.annotations.TypeCombinatorsCaseMarker;
import localhost3000.models.Morning;

/**
 * This is a container class for any-of types.
 */
@JsonDeserialize(using = SendMultiLevelAnyofSession.SendMultiLevelAnyofSessionDeserializer.class)
public abstract class SendMultiLevelAnyofSession {
    
    /**
     * Any-of type initialization method.
     * @param morning Morning value for morning.
     * @return The MorningCase object.
     */
    public static SendMultiLevelAnyofSession fromMorning(Morning morning) {
        return new MorningCase(morning);
    }

    /**
     * Any-of type initialization method.
     * @param case1 SendMultiLevelAnyofSessionCase1 value for case1.
     * @return The Case1Case object.
     */
    public static SendMultiLevelAnyofSession fromCase1(SendMultiLevelAnyofSessionCase1 case1) {
        return new Case1(case1);
    }

    /**
     * Method to match from the provided any-of cases.
     * @param <R> The type to return after applying callback.
     * @param cases The any-of type cases callback.
     * @return The any-of matched case.
     */
    public abstract <R> R match(Cases<R> cases);

    /**
     * This is interface for any-of cases.
     * @param <R> The type to return after applying callback.
     */
    public interface Cases<R> {
        R morning(Morning morning);

        R case1(SendMultiLevelAnyofSessionCase1 case1);
    }

    /**
     * This is a implementation class for MorningCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorsCaseMarker
    private static class MorningCase extends SendMultiLevelAnyofSession {

        @JsonValue
        private Morning morning;

        MorningCase(Morning morning) {
            this.morning = morning;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.morning(this.morning);
        }

        @JsonCreator
        private MorningCase(JsonNode jsonNode) throws IOException {
            this.morning = ApiHelper.deserialize(jsonNode,
                Morning.class);
        }

        @Override
        public String toString() {
            return morning.toString();
        }
    }

    /**
     * This is a implementation class for Case1Case.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorsCaseMarker
    private static class Case1 extends SendMultiLevelAnyofSession {

        @JsonValue
        private SendMultiLevelAnyofSessionCase1 case1;

        Case1(SendMultiLevelAnyofSessionCase1 case1) {
            this.case1 = case1;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.case1(this.case1);
        }

        @JsonCreator
        private Case1(JsonNode jsonNode) throws IOException {
            this.case1 = ApiHelper.deserialize(jsonNode,
                SendMultiLevelAnyofSessionCase1.class);
        }

        @Override
        public String toString() {
            return case1.toString();
        }
    }

    /**
     * This is a custom deserializer class for SendMultiLevelAnyofSession.
     */
    protected static class SendMultiLevelAnyofSessionDeserializer
        extends JsonDeserializer<SendMultiLevelAnyofSession> {

        @Override
        public SendMultiLevelAnyofSession deserialize(JsonParser jp, DeserializationContext ctxt)
                throws IOException, JsonProcessingException {
            ObjectCodec oc = jp.getCodec();
            JsonNode node = oc.readTree(jp);
            return ApiHelper.deserialize(node, Arrays.asList(MorningCase.class,
                    Case1.class), false);
        }
    }

}
