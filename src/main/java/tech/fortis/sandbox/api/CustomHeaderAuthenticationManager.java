/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package tech.fortis.sandbox.api;

import java.util.concurrent.CompletableFuture;
import tech.fortis.sandbox.api.http.request.HttpRequest;

public class CustomHeaderAuthenticationManager implements AuthManager, CustomHeaderAuthenticationCredentials {

    private String userId;

    private String userApiKey;

    private String developerId;

    /**
     * Constructor that sets custom header parameters.
     */
    public CustomHeaderAuthenticationManager(String userId, String userApiKey, String developerId) {
        this.userId = userId;
        this.userApiKey = userApiKey;
        this.developerId = developerId;
    }

    /**
     * String value for userId.
     * @return userId
     */
    public String getUserId() {
        return userId;
    }

    /**
     * String value for userApiKey.
     * @return userApiKey
     */
    public String getUserApiKey() {
        return userApiKey;
    }

    /**
     * String value for developerId.
     * @return developerId
     */
    public String getDeveloperId() {
        return developerId;
    }

    /**
     * Checks if provided credentials matched with existing ones.
     * @param userId String value for credentials.
     * @param userApiKey String value for credentials.
     * @param developerId String value for credentials.
     * @return true if credentials matched.
     */
    public boolean equals(String userId, String userApiKey, String developerId) {
        return userId.equals(getUserId())
                && userApiKey.equals(getUserApiKey())
                && developerId.equals(getDeveloperId());
    }

    /**
     * Converts this CustomHeaderAuthenticationManager into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "CustomHeaderAuthenticationManager [" + "userId=" + userId + ", userApiKey="
                + userApiKey + ", developerId=" + developerId + "]";
    }

    /**
     * Adds custom header parameters (if present) to the given HttpRequest.
     */
    public HttpRequest apply(HttpRequest httpRequest) {
        httpRequest.getHeaders().add("user-id", userId);
        httpRequest.getHeaders().add("user-api-key", userApiKey);
        httpRequest.getHeaders().add("developer-id", developerId);
        return httpRequest;
    }

    /**
     * Adds custom header parameters (if present) to the given HttpRequest.
     */
    public CompletableFuture<HttpRequest> applyAsync(HttpRequest httpRequest) {
        return CompletableFuture.completedFuture(apply(httpRequest));
    }
}
