/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package tech.fortis.sandbox.api;

import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Consumer;
import tech.fortis.sandbox.api.controllers.AsyncProcessingController;
import tech.fortis.sandbox.api.controllers.BatchesController;
import tech.fortis.sandbox.api.controllers.ContactsController;
import tech.fortis.sandbox.api.controllers.DeviceTermsController;
import tech.fortis.sandbox.api.controllers.ElementsController;
import tech.fortis.sandbox.api.controllers.Level3DataController;
import tech.fortis.sandbox.api.controllers.LocationsController;
import tech.fortis.sandbox.api.controllers.OnBoardingController;
import tech.fortis.sandbox.api.controllers.QuickInvoicesController;
import tech.fortis.sandbox.api.controllers.RecurringController;
import tech.fortis.sandbox.api.controllers.SignaturesController;
import tech.fortis.sandbox.api.controllers.TagsController;
import tech.fortis.sandbox.api.controllers.TerminalsController;
import tech.fortis.sandbox.api.controllers.TokensController;
import tech.fortis.sandbox.api.controllers.TransactionsACHController;
import tech.fortis.sandbox.api.controllers.TransactionsCreditCardController;
import tech.fortis.sandbox.api.controllers.TransactionsReadController;
import tech.fortis.sandbox.api.controllers.TransactionsUpdatesController;
import tech.fortis.sandbox.api.controllers.UsersController;
import tech.fortis.sandbox.api.controllers.WebhooksController;
import tech.fortis.sandbox.api.http.client.HttpCallback;
import tech.fortis.sandbox.api.http.client.HttpClient;
import tech.fortis.sandbox.api.http.client.HttpClientConfiguration;
import tech.fortis.sandbox.api.http.client.OkClient;
import tech.fortis.sandbox.api.http.client.ReadonlyHttpClientConfiguration;

/**
 * Gateway class for the library.
 * This class acts as a factory for Controllers.
 * It holds the state of the SDK.
 */
public final class FortisAPIClient implements Configuration {

    /**
     * Private store for controllers.
     */
    private OnBoardingController onBoarding;
    private BatchesController batches;
    private ContactsController contacts;
    private DeviceTermsController deviceTerms;
    private LocationsController locations;
    private QuickInvoicesController quickInvoices;
    private RecurringController recurring;
    private SignaturesController signatures;
    private TagsController tags;
    private TerminalsController terminals;
    private TokensController tokens;
    private TransactionsACHController transactionsACH;
    private TransactionsCreditCardController transactionsCreditCard;
    private TransactionsUpdatesController transactionsUpdates;
    private TransactionsReadController transactionsRead;
    private Level3DataController level3Data;
    private UsersController users;
    private WebhooksController webhooks;
    private ElementsController elements;
    private AsyncProcessingController asyncProcessing;

    /**
     * Current API environment.
     */
    private final Environment environment;

    /**
     * The HTTP Client instance to use for making HTTP requests.
     */
    private final HttpClient httpClient;

    /**
     * Http Client Configuration instance.
     */
    private final ReadonlyHttpClientConfiguration httpClientConfig;

    /**
     * CustomHeaderAuthenticationManager.
     */
    private CustomHeaderAuthenticationManager customHeaderAuthenticationManager;

    /**
     * Map of authentication Managers.
     */
    private Map<String, AuthManager> authManagers;

    /**
     * Callback to be called before and after the HTTP call for an endpoint is made.
     */
    private final HttpCallback httpCallback;

    private FortisAPIClient(Environment environment, HttpClient httpClient,
            ReadonlyHttpClientConfiguration httpClientConfig, String customHeaderUserId,
            String customHeaderUserApiKey, String customHeaderDeveloperId,
            Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        this.environment = environment;
        this.httpClient = httpClient;
        this.httpClientConfig = httpClientConfig;
        this.httpCallback = httpCallback;

        this.authManagers = (authManagers == null) ? new HashMap<>() : new HashMap<>(authManagers);
        if (this.authManagers.containsKey("global")) {
            this.customHeaderAuthenticationManager =
                    (CustomHeaderAuthenticationManager) this.authManagers.get("global");
        }

        if (!this.authManagers.containsKey("global")
                || !getCustomHeaderAuthenticationCredentials().equals(customHeaderUserId,
                        customHeaderUserApiKey, customHeaderDeveloperId)) {
            this.customHeaderAuthenticationManager = new CustomHeaderAuthenticationManager(
                    customHeaderUserId, customHeaderUserApiKey, customHeaderDeveloperId);
            this.authManagers.put("global", customHeaderAuthenticationManager);
        }

        onBoarding = new OnBoardingController(this, this.httpClient, this.authManagers,
                this.httpCallback);
        batches = new BatchesController(this, this.httpClient, this.authManagers,
                this.httpCallback);
        contacts = new ContactsController(this, this.httpClient, this.authManagers,
                this.httpCallback);
        deviceTerms = new DeviceTermsController(this, this.httpClient, this.authManagers,
                this.httpCallback);
        locations = new LocationsController(this, this.httpClient, this.authManagers,
                this.httpCallback);
        quickInvoices = new QuickInvoicesController(this, this.httpClient, this.authManagers,
                this.httpCallback);
        recurring = new RecurringController(this, this.httpClient, this.authManagers,
                this.httpCallback);
        signatures = new SignaturesController(this, this.httpClient, this.authManagers,
                this.httpCallback);
        tags = new TagsController(this, this.httpClient, this.authManagers, this.httpCallback);
        terminals = new TerminalsController(this, this.httpClient, this.authManagers,
                this.httpCallback);
        tokens = new TokensController(this, this.httpClient, this.authManagers, this.httpCallback);
        transactionsACH = new TransactionsACHController(this, this.httpClient, this.authManagers,
                this.httpCallback);
        transactionsCreditCard = new TransactionsCreditCardController(this, this.httpClient,
                this.authManagers, this.httpCallback);
        transactionsUpdates = new TransactionsUpdatesController(this, this.httpClient,
                this.authManagers, this.httpCallback);
        transactionsRead = new TransactionsReadController(this, this.httpClient, this.authManagers,
                this.httpCallback);
        level3Data = new Level3DataController(this, this.httpClient, this.authManagers,
                this.httpCallback);
        users = new UsersController(this, this.httpClient, this.authManagers, this.httpCallback);
        webhooks = new WebhooksController(this, this.httpClient, this.authManagers,
                this.httpCallback);
        elements = new ElementsController(this, this.httpClient, this.authManagers,
                this.httpCallback);
        asyncProcessing = new AsyncProcessingController(this, this.httpClient, this.authManagers,
                this.httpCallback);
    }

    /**
     * Shutdown the underlying HttpClient instance.
     */
    public static void shutdown() {
        OkClient.shutdown();
    }

    /**
     * Get the instance of OnBoardingController.
     * @return onBoarding
     */
    public OnBoardingController getOnBoardingController() {
        return onBoarding;
    }

    /**
     * Get the instance of BatchesController.
     * @return batches
     */
    public BatchesController getBatchesController() {
        return batches;
    }

    /**
     * Get the instance of ContactsController.
     * @return contacts
     */
    public ContactsController getContactsController() {
        return contacts;
    }

    /**
     * Get the instance of DeviceTermsController.
     * @return deviceTerms
     */
    public DeviceTermsController getDeviceTermsController() {
        return deviceTerms;
    }

    /**
     * Get the instance of LocationsController.
     * @return locations
     */
    public LocationsController getLocationsController() {
        return locations;
    }

    /**
     * Get the instance of QuickInvoicesController.
     * @return quickInvoices
     */
    public QuickInvoicesController getQuickInvoicesController() {
        return quickInvoices;
    }

    /**
     * Get the instance of RecurringController.
     * @return recurring
     */
    public RecurringController getRecurringController() {
        return recurring;
    }

    /**
     * Get the instance of SignaturesController.
     * @return signatures
     */
    public SignaturesController getSignaturesController() {
        return signatures;
    }

    /**
     * Get the instance of TagsController.
     * @return tags
     */
    public TagsController getTagsController() {
        return tags;
    }

    /**
     * Get the instance of TerminalsController.
     * @return terminals
     */
    public TerminalsController getTerminalsController() {
        return terminals;
    }

    /**
     * Get the instance of TokensController.
     * @return tokens
     */
    public TokensController getTokensController() {
        return tokens;
    }

    /**
     * Get the instance of TransactionsACHController.
     * @return transactionsACH
     */
    public TransactionsACHController getTransactionsACHController() {
        return transactionsACH;
    }

    /**
     * Get the instance of TransactionsCreditCardController.
     * @return transactionsCreditCard
     */
    public TransactionsCreditCardController getTransactionsCreditCardController() {
        return transactionsCreditCard;
    }

    /**
     * Get the instance of TransactionsUpdatesController.
     * @return transactionsUpdates
     */
    public TransactionsUpdatesController getTransactionsUpdatesController() {
        return transactionsUpdates;
    }

    /**
     * Get the instance of TransactionsReadController.
     * @return transactionsRead
     */
    public TransactionsReadController getTransactionsReadController() {
        return transactionsRead;
    }

    /**
     * Get the instance of Level3DataController.
     * @return level3Data
     */
    public Level3DataController getLevel3DataController() {
        return level3Data;
    }

    /**
     * Get the instance of UsersController.
     * @return users
     */
    public UsersController getUsersController() {
        return users;
    }

    /**
     * Get the instance of WebhooksController.
     * @return webhooks
     */
    public WebhooksController getWebhooksController() {
        return webhooks;
    }

    /**
     * Get the instance of ElementsController.
     * @return elements
     */
    public ElementsController getElementsController() {
        return elements;
    }

    /**
     * Get the instance of AsyncProcessingController.
     * @return asyncProcessing
     */
    public AsyncProcessingController getAsyncProcessingController() {
        return asyncProcessing;
    }

    /**
     * Current API environment.
     * @return environment
     */
    public Environment getEnvironment() {
        return environment;
    }

    /**
     * The HTTP Client instance to use for making HTTP requests.
     * @return httpClient
     */
    private HttpClient getHttpClient() {
        return httpClient;
    }

    /**
     * Http Client Configuration instance.
     * @return httpClientConfig
     */
    public ReadonlyHttpClientConfiguration getHttpClientConfig() {
        return httpClientConfig;
    }

    /**
     * The credentials to use with CustomHeaderAuthentication.
     * @return customHeaderAuthenticationCredentials
     */
    public CustomHeaderAuthenticationCredentials getCustomHeaderAuthenticationCredentials() {
        return customHeaderAuthenticationManager;
    }

    /**
     * The timeout to use for making HTTP requests.
     * @deprecated This method will be removed in a future version. Use
     *             {@link #getHttpClientConfig()} instead.
     *
     * @return timeout
     */
    @Deprecated
    public long timeout() {
        return httpClientConfig.getTimeout();
    }

    /**
     * Get base URI by current environment.
     * @param server Server for which to get the base URI
     * @return Processed base URI
     */
    public String getBaseUri(Server server) {
        Map<String, SimpleEntry<Object, Boolean>> parameters = new HashMap<>();
        StringBuilder baseUrl = new StringBuilder(environmentMapper(environment, server));
        ApiHelper.appendUrlWithTemplateParameters(baseUrl, parameters);
        return baseUrl.toString();
    }

    /**
     * Get base URI by current environment.
     * @return Processed base URI
     */
    public String getBaseUri() {
        return getBaseUri(Server.ENUM_DEFAULT);
    }

    /**
     * Base URLs by environment and server aliases.
     * @param environment Environment for which to get the base URI
     * @param server Server for which to get the base URI
     * @return base URL
     */
    private static String environmentMapper(Environment environment, Server server) {
        if (environment.equals(Environment.SANDBOX)) {
            if (server.equals(Server.ENUM_DEFAULT)) {
                return "https://api.sandbox.fortis.tech";
            }
        }
        if (environment.equals(Environment.PRODUCTION)) {
            if (server.equals(Server.ENUM_DEFAULT)) {
                return "https://api.fortis.tech";
            }
        }
        return "https://api.sandbox.fortis.tech";
    }

    /**
     * Converts this FortisAPIClient into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "FortisAPIClient [" + "environment=" + environment + ", httpClientConfig="
                + httpClientConfig + ", authManagers=" + authManagers + "]";
    }

    /**
     * Builds a new {@link FortisAPIClient.Builder} object.
     * Creates the instance with the state of the current client.
     * @return a new {@link FortisAPIClient.Builder} object
     */
    public Builder newBuilder() {
        Builder builder = new Builder();
        builder.environment = getEnvironment();
        builder.httpClient = getHttpClient();
        builder.customHeaderUserId = getCustomHeaderAuthenticationCredentials().getUserId();
        builder.customHeaderUserApiKey = getCustomHeaderAuthenticationCredentials().getUserApiKey();
        builder.customHeaderDeveloperId =
                getCustomHeaderAuthenticationCredentials().getDeveloperId();
        builder.authManagers = authManagers;
        builder.httpCallback = httpCallback;
        builder.httpClientConfig(configBldr -> configBldr =
                ((HttpClientConfiguration) httpClientConfig).newBuilder());
        return builder;
    }

    /**
     * Class to build instances of {@link FortisAPIClient}.
     */
    public static class Builder {

        private Environment environment = Environment.SANDBOX;
        private HttpClient httpClient;
        private String customHeaderUserId = "TODO: Replace";
        private String customHeaderUserApiKey = "TODO: Replace";
        private String customHeaderDeveloperId = "TODO: Replace";
        private Map<String, AuthManager> authManagers = null;
        private HttpCallback httpCallback = null;
        private HttpClientConfiguration.Builder httpClientConfigBuilder =
                new HttpClientConfiguration.Builder();


        /**
         * Credentials setter for CustomHeaderAuthentication.
         * @param userId String value for customHeaderUserId.
         * @param userApiKey String value for customHeaderUserApiKey.
         * @param developerId String value for customHeaderDeveloperId.
         * @return Builder
         */
        public Builder customHeaderAuthenticationCredentials(String userId, String userApiKey,
                String developerId) {
            if (userId == null) {
                throw new NullPointerException("UserId cannot be null.");
            }
            if (userApiKey == null) {
                throw new NullPointerException("UserApiKey cannot be null.");
            }
            if (developerId == null) {
                throw new NullPointerException("DeveloperId cannot be null.");
            }
            this.customHeaderUserId = userId;
            this.customHeaderUserApiKey = userApiKey;
            this.customHeaderDeveloperId = developerId;
            return this;
        }

        /**
         * Current API environment.
         * @param environment The environment for client.
         * @return Builder
         */
        public Builder environment(Environment environment) {
            this.environment = environment;
            return this;
        }

        /**
         * The timeout to use for making HTTP requests.
         * @deprecated This method will be removed in a future version. Use
         *             {@link #httpClientConfig(Consumer) httpClientConfig} instead.
         * @param timeout must be greater then 0.
         * @return Builder
         */
        @Deprecated
        public Builder timeout(long timeout) {
            this.httpClientConfigBuilder.timeout(timeout);
            return this;
        }

        /**
         * HttpCallback.
         * @param httpCallback Callback to be called before and after the HTTP call.
         * @return Builder
         */
        public Builder httpCallback(HttpCallback httpCallback) {
            this.httpCallback = httpCallback;
            return this;
        }

        /**
         * Setter for the Builder of httpClientConfiguration, takes in an operation to be performed
         * on the builder instance of HTTP client configuration.
         * 
         * @param action Consumer for the builder of httpClientConfiguration.
         * @return Builder
         */
        public Builder httpClientConfig(Consumer<HttpClientConfiguration.Builder> action) {
            action.accept(httpClientConfigBuilder);
            return this;
        }

        /**
         * Builds a new FortisAPIClient object using the set fields.
         * @return FortisAPIClient
         */
        public FortisAPIClient build() {
            HttpClientConfiguration httpClientConfig = httpClientConfigBuilder.build();
            httpClient = new OkClient(httpClientConfig);

            return new FortisAPIClient(environment, httpClient, httpClientConfig,
                    customHeaderUserId, customHeaderUserApiKey, customHeaderDeveloperId,
                    authManagers, httpCallback);
        }
    }
}