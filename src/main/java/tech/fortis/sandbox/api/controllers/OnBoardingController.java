/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package tech.fortis.sandbox.api.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import java.io.IOException;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import tech.fortis.sandbox.api.ApiHelper;
import tech.fortis.sandbox.api.AuthManager;
import tech.fortis.sandbox.api.Configuration;
import tech.fortis.sandbox.api.exceptions.ApiException;
import tech.fortis.sandbox.api.exceptions.Response401tokenException;
import tech.fortis.sandbox.api.exceptions.Response412Exception;
import tech.fortis.sandbox.api.http.Headers;
import tech.fortis.sandbox.api.http.client.HttpCallback;
import tech.fortis.sandbox.api.http.client.HttpClient;
import tech.fortis.sandbox.api.http.client.HttpContext;
import tech.fortis.sandbox.api.http.request.HttpRequest;
import tech.fortis.sandbox.api.http.response.HttpResponse;
import tech.fortis.sandbox.api.http.response.HttpStringResponse;
import tech.fortis.sandbox.api.models.ResponseOnboarding;
import tech.fortis.sandbox.api.models.V1OnboardingRequest;

/**
 * This class lists all the endpoints of the groups.
 */
public final class OnBoardingController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public OnBoardingController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }

    /**
     * Initializes the controller with HTTPCallback.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     * @param httpCallback    Callback to be called before and after the HTTP call.
     */
    public OnBoardingController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        super(config, httpClient, authManagers, httpCallback);
    }

    /**
     * This method can be used to pre-populate data on the Merchant Processing Application (MPA), a
     * form that prospective merchants must complete and sign prior to approval. Using this method
     * will reduce the effort required by the merchant at boarding time, in scenarios where data
     * about the prospective merchant has already been collected. This method will return an
     * Application ID, which can be sent to a prospective merchant to obtain and complete the
     * pre-filled application. Properties that are marked "Required" indicate the minimum required
     * data for creating and saving an MPA. When using this method, you must provide data for each
     * "Required" property, or you will not receive an Application ID. Properties that are marked
     * "Required for completion" are those which need to be provided to Fortis before the Merchant
     * Processing Application can be approved. These properties may be omitted or left blank when
     * using this method, however, the merchant will be required to provide this data before the
     * application can be submitted. Properties that are marked "Conditionally Required" may be
     * required for completion of the Merchant Processing Application, depending on the values
     * provided for other fields. See the description for each of these properties for more
     * information about their requirement criteria.
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseOnboarding response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseOnboarding merchantBoarding(
            final V1OnboardingRequest body) throws ApiException, IOException {
        HttpRequest request = buildMerchantBoardingRequest(body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleMerchantBoardingResponse(context);
    }

    /**
     * This method can be used to pre-populate data on the Merchant Processing Application (MPA), a
     * form that prospective merchants must complete and sign prior to approval. Using this method
     * will reduce the effort required by the merchant at boarding time, in scenarios where data
     * about the prospective merchant has already been collected. This method will return an
     * Application ID, which can be sent to a prospective merchant to obtain and complete the
     * pre-filled application. Properties that are marked "Required" indicate the minimum required
     * data for creating and saving an MPA. When using this method, you must provide data for each
     * "Required" property, or you will not receive an Application ID. Properties that are marked
     * "Required for completion" are those which need to be provided to Fortis before the Merchant
     * Processing Application can be approved. These properties may be omitted or left blank when
     * using this method, however, the merchant will be required to provide this data before the
     * application can be submitted. Properties that are marked "Conditionally Required" may be
     * required for completion of the Merchant Processing Application, depending on the values
     * provided for other fields. See the description for each of these properties for more
     * information about their requirement criteria.
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseOnboarding response from the API call
     */
    public CompletableFuture<ResponseOnboarding> merchantBoardingAsync(
            final V1OnboardingRequest body) {
        return makeHttpCallAsync(() -> buildMerchantBoardingRequest(body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleMerchantBoardingResponse(context));
    }

    /**
     * Builds the HttpRequest object for merchantBoarding.
     */
    private HttpRequest buildMerchantBoardingRequest(
            final V1OnboardingRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/onboarding");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for merchantBoarding.
     * @return An object of type ResponseOnboarding
     */
    private ResponseOnboarding handleMerchantBoardingResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        if (responseCode == 412) {
            throw new Response412Exception("Precondition Failed", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseOnboarding result = ApiHelper.deserialize(responseBody,
                ResponseOnboarding.class);

        return result;
    }

}