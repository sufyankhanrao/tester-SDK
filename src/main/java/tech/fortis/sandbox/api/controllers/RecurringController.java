/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package tech.fortis.sandbox.api.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import java.io.IOException;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import tech.fortis.sandbox.api.ApiHelper;
import tech.fortis.sandbox.api.AuthManager;
import tech.fortis.sandbox.api.Configuration;
import tech.fortis.sandbox.api.exceptions.ApiException;
import tech.fortis.sandbox.api.exceptions.Response401tokenException;
import tech.fortis.sandbox.api.exceptions.Response412Exception;
import tech.fortis.sandbox.api.http.Headers;
import tech.fortis.sandbox.api.http.client.HttpCallback;
import tech.fortis.sandbox.api.http.client.HttpClient;
import tech.fortis.sandbox.api.http.client.HttpContext;
import tech.fortis.sandbox.api.http.request.HttpRequest;
import tech.fortis.sandbox.api.http.response.HttpResponse;
import tech.fortis.sandbox.api.http.response.HttpStringResponse;
import tech.fortis.sandbox.api.models.Filter6;
import tech.fortis.sandbox.api.models.Page;
import tech.fortis.sandbox.api.models.ResponseRecurring;
import tech.fortis.sandbox.api.models.ResponseRecurringsCollection;
import tech.fortis.sandbox.api.models.Sort6;
import tech.fortis.sandbox.api.models.V1RecurringsDeferPaymentRequest;
import tech.fortis.sandbox.api.models.V1RecurringsRequest;
import tech.fortis.sandbox.api.models.V1RecurringsRequest1;
import tech.fortis.sandbox.api.models.V1RecurringsSkipPaymentRequest;

/**
 * This class lists all the endpoints of the groups.
 */
public final class RecurringController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public RecurringController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }

    /**
     * Initializes the controller with HTTPCallback.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     * @param httpCallback    Callback to be called before and after the HTTP call.
     */
    public RecurringController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        super(config, httpClient, authManagers, httpCallback);
    }

    /**
     * Create a new recurring record.
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseRecurring response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseRecurring createANewRecurringRecord(
            final V1RecurringsRequest body) throws ApiException, IOException {
        HttpRequest request = buildCreateANewRecurringRecordRequest(body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleCreateANewRecurringRecordResponse(context);
    }

    /**
     * Create a new recurring record.
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseRecurring response from the API call
     */
    public CompletableFuture<ResponseRecurring> createANewRecurringRecordAsync(
            final V1RecurringsRequest body) {
        return makeHttpCallAsync(() -> buildCreateANewRecurringRecordRequest(body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleCreateANewRecurringRecordResponse(context));
    }

    /**
     * Builds the HttpRequest object for createANewRecurringRecord.
     */
    private HttpRequest buildCreateANewRecurringRecordRequest(
            final V1RecurringsRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/recurrings");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for createANewRecurringRecord.
     * @return An object of type ResponseRecurring
     */
    private ResponseRecurring handleCreateANewRecurringRecordResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        if (responseCode == 412) {
            throw new Response412Exception("Precondition Failed", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseRecurring result = ApiHelper.deserialize(responseBody,
                ResponseRecurring.class);

        return result;
    }

    /**
     * List all recurring record.
     * @param  page  Optional parameter: Use this field to specify paginate your results, by using
     *         page size and number. You can use one of the following methods: &gt;/endpoint?page={
     *         "number": 1, "size": 50 } &gt; &gt;/endpoint?page[number]=1&page[size]=50
     * @param  sort  Optional parameter: You can use any `field_name` from this endpoint results,
     *         and you can combine more than one field for more complex sorting. You can use one of
     *         the following methods: &gt;/endpoint?sort={ "field_name": "asc", "field_name2": "desc" }
     *         &gt; &gt;/endpoint?sort[field_name]=asc&sort[field_name2]=desc
     * @param  filter  Optional parameter: You can use any `field_name` from this endpoint results
     *         as a filter, and you can also use more than one field to create AND conditions. You
     *         can use one of the following methods: &gt;/endpoint?filter={ "field_name": "Value" } &gt;
     *         &gt;/endpoint?filter[field_name]=Value
     * @return    Returns the ResponseRecurringsCollection response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseRecurringsCollection listAllRecurringRecord(
            final Page page,
            final Sort6 sort,
            final Filter6 filter) throws ApiException, IOException {
        HttpRequest request = buildListAllRecurringRecordRequest(page, sort, filter);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleListAllRecurringRecordResponse(context);
    }

    /**
     * List all recurring record.
     * @param  page  Optional parameter: Use this field to specify paginate your results, by using
     *         page size and number. You can use one of the following methods: &gt;/endpoint?page={
     *         "number": 1, "size": 50 } &gt; &gt;/endpoint?page[number]=1&page[size]=50
     * @param  sort  Optional parameter: You can use any `field_name` from this endpoint results,
     *         and you can combine more than one field for more complex sorting. You can use one of
     *         the following methods: &gt;/endpoint?sort={ "field_name": "asc", "field_name2": "desc" }
     *         &gt; &gt;/endpoint?sort[field_name]=asc&sort[field_name2]=desc
     * @param  filter  Optional parameter: You can use any `field_name` from this endpoint results
     *         as a filter, and you can also use more than one field to create AND conditions. You
     *         can use one of the following methods: &gt;/endpoint?filter={ "field_name": "Value" } &gt;
     *         &gt;/endpoint?filter[field_name]=Value
     * @return    Returns the ResponseRecurringsCollection response from the API call
     */
    public CompletableFuture<ResponseRecurringsCollection> listAllRecurringRecordAsync(
            final Page page,
            final Sort6 sort,
            final Filter6 filter) {
        return makeHttpCallAsync(() -> buildListAllRecurringRecordRequest(page, sort, filter),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleListAllRecurringRecordResponse(context));
    }

    /**
     * Builds the HttpRequest object for listAllRecurringRecord.
     */
    private HttpRequest buildListAllRecurringRecordRequest(
            final Page page,
            final Sort6 sort,
            final Filter6 filter) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/recurrings");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("page", page);
        queryParameters.put("sort", sort);
        queryParameters.put("filter", filter);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for listAllRecurringRecord.
     * @return An object of type ResponseRecurringsCollection
     */
    private ResponseRecurringsCollection handleListAllRecurringRecordResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseRecurringsCollection result = ApiHelper.deserialize(responseBody,
                ResponseRecurringsCollection.class);

        return result;
    }

    /**
     * Delete recurring record.
     * @param  recurringId  Required parameter: Recurring ID
     * @return    Returns the ResponseRecurring response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseRecurring deleteRecurringRecord(
            final String recurringId) throws ApiException, IOException {
        HttpRequest request = buildDeleteRecurringRecordRequest(recurringId);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleDeleteRecurringRecordResponse(context);
    }

    /**
     * Delete recurring record.
     * @param  recurringId  Required parameter: Recurring ID
     * @return    Returns the ResponseRecurring response from the API call
     */
    public CompletableFuture<ResponseRecurring> deleteRecurringRecordAsync(
            final String recurringId) {
        return makeHttpCallAsync(() -> buildDeleteRecurringRecordRequest(recurringId),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleDeleteRecurringRecordResponse(context));
    }

    /**
     * Builds the HttpRequest object for deleteRecurringRecord.
     */
    private HttpRequest buildDeleteRecurringRecordRequest(
            final String recurringId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/recurrings/{recurring_id}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("recurring_id",
                new SimpleEntry<Object, Boolean>(recurringId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().delete(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for deleteRecurringRecord.
     * @return An object of type ResponseRecurring
     */
    private ResponseRecurring handleDeleteRecurringRecordResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseRecurring result = ApiHelper.deserialize(responseBody,
                ResponseRecurring.class);

        return result;
    }

    /**
     * View single recurring record.
     * @param  recurringId  Required parameter: Recurring ID
     * @return    Returns the ResponseRecurring response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseRecurring viewSingleRecurringRecord(
            final String recurringId) throws ApiException, IOException {
        HttpRequest request = buildViewSingleRecurringRecordRequest(recurringId);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleViewSingleRecurringRecordResponse(context);
    }

    /**
     * View single recurring record.
     * @param  recurringId  Required parameter: Recurring ID
     * @return    Returns the ResponseRecurring response from the API call
     */
    public CompletableFuture<ResponseRecurring> viewSingleRecurringRecordAsync(
            final String recurringId) {
        return makeHttpCallAsync(() -> buildViewSingleRecurringRecordRequest(recurringId),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleViewSingleRecurringRecordResponse(context));
    }

    /**
     * Builds the HttpRequest object for viewSingleRecurringRecord.
     */
    private HttpRequest buildViewSingleRecurringRecordRequest(
            final String recurringId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/recurrings/{recurring_id}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("recurring_id",
                new SimpleEntry<Object, Boolean>(recurringId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for viewSingleRecurringRecord.
     * @return An object of type ResponseRecurring
     */
    private ResponseRecurring handleViewSingleRecurringRecordResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseRecurring result = ApiHelper.deserialize(responseBody,
                ResponseRecurring.class);

        return result;
    }

    /**
     * Update recurring payment.
     * @param  recurringId  Required parameter: Recurring ID
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseRecurring response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseRecurring updateRecurringPayment(
            final String recurringId,
            final V1RecurringsRequest1 body) throws ApiException, IOException {
        HttpRequest request = buildUpdateRecurringPaymentRequest(recurringId, body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleUpdateRecurringPaymentResponse(context);
    }

    /**
     * Update recurring payment.
     * @param  recurringId  Required parameter: Recurring ID
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseRecurring response from the API call
     */
    public CompletableFuture<ResponseRecurring> updateRecurringPaymentAsync(
            final String recurringId,
            final V1RecurringsRequest1 body) {
        return makeHttpCallAsync(() -> buildUpdateRecurringPaymentRequest(recurringId, body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleUpdateRecurringPaymentResponse(context));
    }

    /**
     * Builds the HttpRequest object for updateRecurringPayment.
     */
    private HttpRequest buildUpdateRecurringPaymentRequest(
            final String recurringId,
            final V1RecurringsRequest1 body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/recurrings/{recurring_id}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("recurring_id",
                new SimpleEntry<Object, Boolean>(recurringId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().patchBody(queryBuilder, headers, null,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for updateRecurringPayment.
     * @return An object of type ResponseRecurring
     */
    private ResponseRecurring handleUpdateRecurringPaymentResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        if (responseCode == 412) {
            throw new Response412Exception("Precondition Failed", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseRecurring result = ApiHelper.deserialize(responseBody,
                ResponseRecurring.class);

        return result;
    }

    /**
     * Activate recurring payment.
     * @param  recurringId  Required parameter: Recurring ID
     * @return    Returns the ResponseRecurring response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseRecurring activateRecurringPayment(
            final String recurringId) throws ApiException, IOException {
        HttpRequest request = buildActivateRecurringPaymentRequest(recurringId);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleActivateRecurringPaymentResponse(context);
    }

    /**
     * Activate recurring payment.
     * @param  recurringId  Required parameter: Recurring ID
     * @return    Returns the ResponseRecurring response from the API call
     */
    public CompletableFuture<ResponseRecurring> activateRecurringPaymentAsync(
            final String recurringId) {
        return makeHttpCallAsync(() -> buildActivateRecurringPaymentRequest(recurringId),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleActivateRecurringPaymentResponse(context));
    }

    /**
     * Builds the HttpRequest object for activateRecurringPayment.
     */
    private HttpRequest buildActivateRecurringPaymentRequest(
            final String recurringId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/recurrings/{recurring_id}/activate");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("recurring_id",
                new SimpleEntry<Object, Boolean>(recurringId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().put(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for activateRecurringPayment.
     * @return An object of type ResponseRecurring
     */
    private ResponseRecurring handleActivateRecurringPaymentResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseRecurring result = ApiHelper.deserialize(responseBody,
                ResponseRecurring.class);

        return result;
    }

    /**
     * Defer recurring payment.
     * @param  recurringId  Required parameter: Recurring ID
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseRecurring response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseRecurring deferRecurringPayment(
            final String recurringId,
            final V1RecurringsDeferPaymentRequest body) throws ApiException, IOException {
        HttpRequest request = buildDeferRecurringPaymentRequest(recurringId, body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleDeferRecurringPaymentResponse(context);
    }

    /**
     * Defer recurring payment.
     * @param  recurringId  Required parameter: Recurring ID
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseRecurring response from the API call
     */
    public CompletableFuture<ResponseRecurring> deferRecurringPaymentAsync(
            final String recurringId,
            final V1RecurringsDeferPaymentRequest body) {
        return makeHttpCallAsync(() -> buildDeferRecurringPaymentRequest(recurringId, body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleDeferRecurringPaymentResponse(context));
    }

    /**
     * Builds the HttpRequest object for deferRecurringPayment.
     */
    private HttpRequest buildDeferRecurringPaymentRequest(
            final String recurringId,
            final V1RecurringsDeferPaymentRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/recurrings/{recurring_id}/defer-payment");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("recurring_id",
                new SimpleEntry<Object, Boolean>(recurringId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().putBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for deferRecurringPayment.
     * @return An object of type ResponseRecurring
     */
    private ResponseRecurring handleDeferRecurringPaymentResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        if (responseCode == 412) {
            throw new Response412Exception("Precondition Failed", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseRecurring result = ApiHelper.deserialize(responseBody,
                ResponseRecurring.class);

        return result;
    }

    /**
     * Place on hold recurring payment.
     * @param  recurringId  Required parameter: Recurring ID
     * @return    Returns the ResponseRecurring response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseRecurring placeOnHoldRecurringPayment(
            final String recurringId) throws ApiException, IOException {
        HttpRequest request = buildPlaceOnHoldRecurringPaymentRequest(recurringId);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handlePlaceOnHoldRecurringPaymentResponse(context);
    }

    /**
     * Place on hold recurring payment.
     * @param  recurringId  Required parameter: Recurring ID
     * @return    Returns the ResponseRecurring response from the API call
     */
    public CompletableFuture<ResponseRecurring> placeOnHoldRecurringPaymentAsync(
            final String recurringId) {
        return makeHttpCallAsync(() -> buildPlaceOnHoldRecurringPaymentRequest(recurringId),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handlePlaceOnHoldRecurringPaymentResponse(context));
    }

    /**
     * Builds the HttpRequest object for placeOnHoldRecurringPayment.
     */
    private HttpRequest buildPlaceOnHoldRecurringPaymentRequest(
            final String recurringId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/recurrings/{recurring_id}/place-on-hold");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("recurring_id",
                new SimpleEntry<Object, Boolean>(recurringId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().put(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for placeOnHoldRecurringPayment.
     * @return An object of type ResponseRecurring
     */
    private ResponseRecurring handlePlaceOnHoldRecurringPaymentResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseRecurring result = ApiHelper.deserialize(responseBody,
                ResponseRecurring.class);

        return result;
    }

    /**
     * Skip recurring payment.
     * @param  recurringId  Required parameter: Recurring ID
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseRecurring response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseRecurring skipRecurringPayment(
            final String recurringId,
            final V1RecurringsSkipPaymentRequest body) throws ApiException, IOException {
        HttpRequest request = buildSkipRecurringPaymentRequest(recurringId, body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSkipRecurringPaymentResponse(context);
    }

    /**
     * Skip recurring payment.
     * @param  recurringId  Required parameter: Recurring ID
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseRecurring response from the API call
     */
    public CompletableFuture<ResponseRecurring> skipRecurringPaymentAsync(
            final String recurringId,
            final V1RecurringsSkipPaymentRequest body) {
        return makeHttpCallAsync(() -> buildSkipRecurringPaymentRequest(recurringId, body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleSkipRecurringPaymentResponse(context));
    }

    /**
     * Builds the HttpRequest object for skipRecurringPayment.
     */
    private HttpRequest buildSkipRecurringPaymentRequest(
            final String recurringId,
            final V1RecurringsSkipPaymentRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/recurrings/{recurring_id}/skip-payment");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("recurring_id",
                new SimpleEntry<Object, Boolean>(recurringId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().putBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for skipRecurringPayment.
     * @return An object of type ResponseRecurring
     */
    private ResponseRecurring handleSkipRecurringPaymentResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        if (responseCode == 412) {
            throw new Response412Exception("Precondition Failed", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseRecurring result = ApiHelper.deserialize(responseBody,
                ResponseRecurring.class);

        return result;
    }

}