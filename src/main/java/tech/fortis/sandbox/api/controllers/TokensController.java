/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package tech.fortis.sandbox.api.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import java.io.IOException;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import tech.fortis.sandbox.api.ApiHelper;
import tech.fortis.sandbox.api.AuthManager;
import tech.fortis.sandbox.api.Configuration;
import tech.fortis.sandbox.api.exceptions.ApiException;
import tech.fortis.sandbox.api.exceptions.Response401tokenException;
import tech.fortis.sandbox.api.exceptions.Response412Exception;
import tech.fortis.sandbox.api.http.Headers;
import tech.fortis.sandbox.api.http.client.HttpCallback;
import tech.fortis.sandbox.api.http.client.HttpClient;
import tech.fortis.sandbox.api.http.client.HttpContext;
import tech.fortis.sandbox.api.http.request.HttpRequest;
import tech.fortis.sandbox.api.http.response.HttpResponse;
import tech.fortis.sandbox.api.http.response.HttpStringResponse;
import tech.fortis.sandbox.api.models.Filter10;
import tech.fortis.sandbox.api.models.Page;
import tech.fortis.sandbox.api.models.ResponseToken;
import tech.fortis.sandbox.api.models.ResponseTokensCollection;
import tech.fortis.sandbox.api.models.Sort10;
import tech.fortis.sandbox.api.models.V1TokensAchRequest;
import tech.fortis.sandbox.api.models.V1TokensAchRequest1;
import tech.fortis.sandbox.api.models.V1TokensCcRequest;
import tech.fortis.sandbox.api.models.V1TokensCcRequest1;
import tech.fortis.sandbox.api.models.V1TokensPreviousTransactionRequest;
import tech.fortis.sandbox.api.models.V1TokensTerminalRequest;
import tech.fortis.sandbox.api.models.V1TokensTicketRequest;

/**
 * This class lists all the endpoints of the groups.
 */
public final class TokensController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public TokensController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }

    /**
     * Initializes the controller with HTTPCallback.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     * @param httpCallback    Callback to be called before and after the HTTP call.
     */
    public TokensController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        super(config, httpClient, authManagers, httpCallback);
    }

    /**
     * Create a new ACH Token.
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseToken response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseToken createANewACHToken(
            final V1TokensAchRequest body) throws ApiException, IOException {
        HttpRequest request = buildCreateANewACHTokenRequest(body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleCreateANewACHTokenResponse(context);
    }

    /**
     * Create a new ACH Token.
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseToken response from the API call
     */
    public CompletableFuture<ResponseToken> createANewACHTokenAsync(
            final V1TokensAchRequest body) {
        return makeHttpCallAsync(() -> buildCreateANewACHTokenRequest(body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleCreateANewACHTokenResponse(context));
    }

    /**
     * Builds the HttpRequest object for createANewACHToken.
     */
    private HttpRequest buildCreateANewACHTokenRequest(
            final V1TokensAchRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/tokens/ach");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for createANewACHToken.
     * @return An object of type ResponseToken
     */
    private ResponseToken handleCreateANewACHTokenResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        if (responseCode == 412) {
            throw new Response412Exception("Precondition Failed", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseToken result = ApiHelper.deserialize(responseBody,
                ResponseToken.class);

        return result;
    }

    /**
     * Create a new Credit Card Token.
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseToken response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseToken createANewCreditCardToken(
            final V1TokensCcRequest body) throws ApiException, IOException {
        HttpRequest request = buildCreateANewCreditCardTokenRequest(body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleCreateANewCreditCardTokenResponse(context);
    }

    /**
     * Create a new Credit Card Token.
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseToken response from the API call
     */
    public CompletableFuture<ResponseToken> createANewCreditCardTokenAsync(
            final V1TokensCcRequest body) {
        return makeHttpCallAsync(() -> buildCreateANewCreditCardTokenRequest(body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleCreateANewCreditCardTokenResponse(context));
    }

    /**
     * Builds the HttpRequest object for createANewCreditCardToken.
     */
    private HttpRequest buildCreateANewCreditCardTokenRequest(
            final V1TokensCcRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/tokens/cc");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for createANewCreditCardToken.
     * @return An object of type ResponseToken
     */
    private ResponseToken handleCreateANewCreditCardTokenResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        if (responseCode == 412) {
            throw new Response412Exception("Precondition Failed", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseToken result = ApiHelper.deserialize(responseBody,
                ResponseToken.class);

        return result;
    }

    /**
     * Create a new Previous Transaction Token.
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseToken response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseToken createANewPreviousTransactionToken(
            final V1TokensPreviousTransactionRequest body) throws ApiException, IOException {
        HttpRequest request = buildCreateANewPreviousTransactionTokenRequest(body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleCreateANewPreviousTransactionTokenResponse(context);
    }

    /**
     * Create a new Previous Transaction Token.
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseToken response from the API call
     */
    public CompletableFuture<ResponseToken> createANewPreviousTransactionTokenAsync(
            final V1TokensPreviousTransactionRequest body) {
        return makeHttpCallAsync(() -> buildCreateANewPreviousTransactionTokenRequest(body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleCreateANewPreviousTransactionTokenResponse(context));
    }

    /**
     * Builds the HttpRequest object for createANewPreviousTransactionToken.
     */
    private HttpRequest buildCreateANewPreviousTransactionTokenRequest(
            final V1TokensPreviousTransactionRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/tokens/previous-transaction");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for createANewPreviousTransactionToken.
     * @return An object of type ResponseToken
     */
    private ResponseToken handleCreateANewPreviousTransactionTokenResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        if (responseCode == 412) {
            throw new Response412Exception("Precondition Failed", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseToken result = ApiHelper.deserialize(responseBody,
                ResponseToken.class);

        return result;
    }

    /**
     * Create a new Terminal Token.
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseToken response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseToken createANewTerminalToken(
            final V1TokensTerminalRequest body) throws ApiException, IOException {
        HttpRequest request = buildCreateANewTerminalTokenRequest(body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleCreateANewTerminalTokenResponse(context);
    }

    /**
     * Create a new Terminal Token.
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseToken response from the API call
     */
    public CompletableFuture<ResponseToken> createANewTerminalTokenAsync(
            final V1TokensTerminalRequest body) {
        return makeHttpCallAsync(() -> buildCreateANewTerminalTokenRequest(body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleCreateANewTerminalTokenResponse(context));
    }

    /**
     * Builds the HttpRequest object for createANewTerminalToken.
     */
    private HttpRequest buildCreateANewTerminalTokenRequest(
            final V1TokensTerminalRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/tokens/terminal");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for createANewTerminalToken.
     * @return An object of type ResponseToken
     */
    private ResponseToken handleCreateANewTerminalTokenResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        if (responseCode == 412) {
            throw new Response412Exception("Precondition Failed", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseToken result = ApiHelper.deserialize(responseBody,
                ResponseToken.class);

        return result;
    }

    /**
     * Create a new Ticket Token.
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseToken response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseToken createANewTicketToken(
            final V1TokensTicketRequest body) throws ApiException, IOException {
        HttpRequest request = buildCreateANewTicketTokenRequest(body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleCreateANewTicketTokenResponse(context);
    }

    /**
     * Create a new Ticket Token.
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseToken response from the API call
     */
    public CompletableFuture<ResponseToken> createANewTicketTokenAsync(
            final V1TokensTicketRequest body) {
        return makeHttpCallAsync(() -> buildCreateANewTicketTokenRequest(body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleCreateANewTicketTokenResponse(context));
    }

    /**
     * Builds the HttpRequest object for createANewTicketToken.
     */
    private HttpRequest buildCreateANewTicketTokenRequest(
            final V1TokensTicketRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/tokens/ticket");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for createANewTicketToken.
     * @return An object of type ResponseToken
     */
    private ResponseToken handleCreateANewTicketTokenResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        if (responseCode == 412) {
            throw new Response412Exception("Precondition Failed", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseToken result = ApiHelper.deserialize(responseBody,
                ResponseToken.class);

        return result;
    }

    /**
     * Delete a single token record.
     * @param  tokenId  Required parameter: A unique, system-generated identifier for the Token.
     * @return    Returns the ResponseToken response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseToken deleteASingleTokenRecord(
            final String tokenId) throws ApiException, IOException {
        HttpRequest request = buildDeleteASingleTokenRecordRequest(tokenId);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleDeleteASingleTokenRecordResponse(context);
    }

    /**
     * Delete a single token record.
     * @param  tokenId  Required parameter: A unique, system-generated identifier for the Token.
     * @return    Returns the ResponseToken response from the API call
     */
    public CompletableFuture<ResponseToken> deleteASingleTokenRecordAsync(
            final String tokenId) {
        return makeHttpCallAsync(() -> buildDeleteASingleTokenRecordRequest(tokenId),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleDeleteASingleTokenRecordResponse(context));
    }

    /**
     * Builds the HttpRequest object for deleteASingleTokenRecord.
     */
    private HttpRequest buildDeleteASingleTokenRecordRequest(
            final String tokenId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/tokens/{token_id}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("token_id",
                new SimpleEntry<Object, Boolean>(tokenId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().delete(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for deleteASingleTokenRecord.
     * @return An object of type ResponseToken
     */
    private ResponseToken handleDeleteASingleTokenRecordResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseToken result = ApiHelper.deserialize(responseBody,
                ResponseToken.class);

        return result;
    }

    /**
     * View single token record.
     * @param  tokenId  Required parameter: A unique, system-generated identifier for the Token.
     * @return    Returns the ResponseToken response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseToken viewSingleTokenRecord(
            final String tokenId) throws ApiException, IOException {
        HttpRequest request = buildViewSingleTokenRecordRequest(tokenId);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleViewSingleTokenRecordResponse(context);
    }

    /**
     * View single token record.
     * @param  tokenId  Required parameter: A unique, system-generated identifier for the Token.
     * @return    Returns the ResponseToken response from the API call
     */
    public CompletableFuture<ResponseToken> viewSingleTokenRecordAsync(
            final String tokenId) {
        return makeHttpCallAsync(() -> buildViewSingleTokenRecordRequest(tokenId),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleViewSingleTokenRecordResponse(context));
    }

    /**
     * Builds the HttpRequest object for viewSingleTokenRecord.
     */
    private HttpRequest buildViewSingleTokenRecordRequest(
            final String tokenId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/tokens/{token_id}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("token_id",
                new SimpleEntry<Object, Boolean>(tokenId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for viewSingleTokenRecord.
     * @return An object of type ResponseToken
     */
    private ResponseToken handleViewSingleTokenRecordResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseToken result = ApiHelper.deserialize(responseBody,
                ResponseToken.class);

        return result;
    }

    /**
     * List all tokens related.
     * @param  page  Optional parameter: Use this field to specify paginate your results, by using
     *         page size and number. You can use one of the following methods: &gt;/endpoint?page={
     *         "number": 1, "size": 50 } &gt; &gt;/endpoint?page[number]=1&page[size]=50
     * @param  sort  Optional parameter: You can use any `field_name` from this endpoint results,
     *         and you can combine more than one field for more complex sorting. You can use one of
     *         the following methods: &gt;/endpoint?sort={ "field_name": "asc", "field_name2": "desc" }
     *         &gt; &gt;/endpoint?sort[field_name]=asc&sort[field_name2]=desc
     * @param  filter  Optional parameter: You can use any `field_name` from this endpoint results
     *         as a filter, and you can also use more than one field to create AND conditions. You
     *         can use one of the following methods: &gt;/endpoint?filter={ "field_name": "Value" } &gt;
     *         &gt;/endpoint?filter[field_name]=Value
     * @return    Returns the ResponseTokensCollection response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseTokensCollection listAllTokensRelated(
            final Page page,
            final Sort10 sort,
            final Filter10 filter) throws ApiException, IOException {
        HttpRequest request = buildListAllTokensRelatedRequest(page, sort, filter);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleListAllTokensRelatedResponse(context);
    }

    /**
     * List all tokens related.
     * @param  page  Optional parameter: Use this field to specify paginate your results, by using
     *         page size and number. You can use one of the following methods: &gt;/endpoint?page={
     *         "number": 1, "size": 50 } &gt; &gt;/endpoint?page[number]=1&page[size]=50
     * @param  sort  Optional parameter: You can use any `field_name` from this endpoint results,
     *         and you can combine more than one field for more complex sorting. You can use one of
     *         the following methods: &gt;/endpoint?sort={ "field_name": "asc", "field_name2": "desc" }
     *         &gt; &gt;/endpoint?sort[field_name]=asc&sort[field_name2]=desc
     * @param  filter  Optional parameter: You can use any `field_name` from this endpoint results
     *         as a filter, and you can also use more than one field to create AND conditions. You
     *         can use one of the following methods: &gt;/endpoint?filter={ "field_name": "Value" } &gt;
     *         &gt;/endpoint?filter[field_name]=Value
     * @return    Returns the ResponseTokensCollection response from the API call
     */
    public CompletableFuture<ResponseTokensCollection> listAllTokensRelatedAsync(
            final Page page,
            final Sort10 sort,
            final Filter10 filter) {
        return makeHttpCallAsync(() -> buildListAllTokensRelatedRequest(page, sort, filter),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleListAllTokensRelatedResponse(context));
    }

    /**
     * Builds the HttpRequest object for listAllTokensRelated.
     */
    private HttpRequest buildListAllTokensRelatedRequest(
            final Page page,
            final Sort10 sort,
            final Filter10 filter) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/tokens");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("page", page);
        queryParameters.put("sort", sort);
        queryParameters.put("filter", filter);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for listAllTokensRelated.
     * @return An object of type ResponseTokensCollection
     */
    private ResponseTokensCollection handleListAllTokensRelatedResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseTokensCollection result = ApiHelper.deserialize(responseBody,
                ResponseTokensCollection.class);

        return result;
    }

    /**
     * Update ACH Token.
     * @param  tokenId  Required parameter: A unique, system-generated identifier for the Token.
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseToken response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseToken updateACHToken(
            final String tokenId,
            final V1TokensAchRequest1 body) throws ApiException, IOException {
        HttpRequest request = buildUpdateACHTokenRequest(tokenId, body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleUpdateACHTokenResponse(context);
    }

    /**
     * Update ACH Token.
     * @param  tokenId  Required parameter: A unique, system-generated identifier for the Token.
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseToken response from the API call
     */
    public CompletableFuture<ResponseToken> updateACHTokenAsync(
            final String tokenId,
            final V1TokensAchRequest1 body) {
        return makeHttpCallAsync(() -> buildUpdateACHTokenRequest(tokenId, body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleUpdateACHTokenResponse(context));
    }

    /**
     * Builds the HttpRequest object for updateACHToken.
     */
    private HttpRequest buildUpdateACHTokenRequest(
            final String tokenId,
            final V1TokensAchRequest1 body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/tokens/{token_id}/ach");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("token_id",
                new SimpleEntry<Object, Boolean>(tokenId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().patchBody(queryBuilder, headers, null,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for updateACHToken.
     * @return An object of type ResponseToken
     */
    private ResponseToken handleUpdateACHTokenResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        if (responseCode == 412) {
            throw new Response412Exception("Precondition Failed", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseToken result = ApiHelper.deserialize(responseBody,
                ResponseToken.class);

        return result;
    }

    /**
     * Update CC Token.
     * @param  tokenId  Required parameter: A unique, system-generated identifier for the Token.
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseToken response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseToken updateCCToken(
            final String tokenId,
            final V1TokensCcRequest1 body) throws ApiException, IOException {
        HttpRequest request = buildUpdateCCTokenRequest(tokenId, body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleUpdateCCTokenResponse(context);
    }

    /**
     * Update CC Token.
     * @param  tokenId  Required parameter: A unique, system-generated identifier for the Token.
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseToken response from the API call
     */
    public CompletableFuture<ResponseToken> updateCCTokenAsync(
            final String tokenId,
            final V1TokensCcRequest1 body) {
        return makeHttpCallAsync(() -> buildUpdateCCTokenRequest(tokenId, body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleUpdateCCTokenResponse(context));
    }

    /**
     * Builds the HttpRequest object for updateCCToken.
     */
    private HttpRequest buildUpdateCCTokenRequest(
            final String tokenId,
            final V1TokensCcRequest1 body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/tokens/{token_id}/cc");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("token_id",
                new SimpleEntry<Object, Boolean>(tokenId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().patchBody(queryBuilder, headers, null,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for updateCCToken.
     * @return An object of type ResponseToken
     */
    private ResponseToken handleUpdateCCTokenResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        if (responseCode == 412) {
            throw new Response412Exception("Precondition Failed", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseToken result = ApiHelper.deserialize(responseBody,
                ResponseToken.class);

        return result;
    }

}