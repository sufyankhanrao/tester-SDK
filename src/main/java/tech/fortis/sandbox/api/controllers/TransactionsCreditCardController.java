/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package tech.fortis.sandbox.api.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import java.io.IOException;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import tech.fortis.sandbox.api.ApiHelper;
import tech.fortis.sandbox.api.AuthManager;
import tech.fortis.sandbox.api.Configuration;
import tech.fortis.sandbox.api.exceptions.ApiException;
import tech.fortis.sandbox.api.exceptions.Response401tokenException;
import tech.fortis.sandbox.api.exceptions.Response412Exception;
import tech.fortis.sandbox.api.http.Headers;
import tech.fortis.sandbox.api.http.client.HttpCallback;
import tech.fortis.sandbox.api.http.client.HttpClient;
import tech.fortis.sandbox.api.http.client.HttpContext;
import tech.fortis.sandbox.api.http.request.HttpRequest;
import tech.fortis.sandbox.api.http.response.HttpResponse;
import tech.fortis.sandbox.api.http.response.HttpStringResponse;
import tech.fortis.sandbox.api.models.ResponseTransaction;
import tech.fortis.sandbox.api.models.ResponseTransactionProcessing;
import tech.fortis.sandbox.api.models.V1TransactionsCcAuthOnlyKeyedRequest;
import tech.fortis.sandbox.api.models.V1TransactionsCcAuthOnlyTokenRequest;
import tech.fortis.sandbox.api.models.V1TransactionsCcAvsOnlyKeyedRequest;
import tech.fortis.sandbox.api.models.V1TransactionsCcAvsOnlyTokenRequest;
import tech.fortis.sandbox.api.models.V1TransactionsCcForceKeyedRequest;
import tech.fortis.sandbox.api.models.V1TransactionsCcForceTokenRequest;
import tech.fortis.sandbox.api.models.V1TransactionsCcRefundKeyedRequest;
import tech.fortis.sandbox.api.models.V1TransactionsCcRefundTokenRequest;
import tech.fortis.sandbox.api.models.V1TransactionsCcSaleKeyedRequest;
import tech.fortis.sandbox.api.models.V1TransactionsCcSaleTerminalRequest;
import tech.fortis.sandbox.api.models.V1TransactionsCcSaleTokenRequest;

/**
 * This class lists all the endpoints of the groups.
 */
public final class TransactionsCreditCardController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public TransactionsCreditCardController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }

    /**
     * Initializes the controller with HTTPCallback.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     * @param httpCallback    Callback to be called before and after the HTTP call.
     */
    public TransactionsCreditCardController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        super(config, httpClient, authManagers, httpCallback);
    }

    /**
     * Create a new keyed Credit Card authorization only transaction.
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseTransaction response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseTransaction cCAuthOnly(
            final V1TransactionsCcAuthOnlyKeyedRequest body) throws ApiException, IOException {
        HttpRequest request = buildCCAuthOnlyRequest(body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleCCAuthOnlyResponse(context);
    }

    /**
     * Create a new keyed Credit Card authorization only transaction.
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseTransaction response from the API call
     */
    public CompletableFuture<ResponseTransaction> cCAuthOnlyAsync(
            final V1TransactionsCcAuthOnlyKeyedRequest body) {
        return makeHttpCallAsync(() -> buildCCAuthOnlyRequest(body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleCCAuthOnlyResponse(context));
    }

    /**
     * Builds the HttpRequest object for cCAuthOnly.
     */
    private HttpRequest buildCCAuthOnlyRequest(
            final V1TransactionsCcAuthOnlyKeyedRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/transactions/cc/auth-only/keyed");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for cCAuthOnly.
     * @return An object of type ResponseTransaction
     */
    private ResponseTransaction handleCCAuthOnlyResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        if (responseCode == 412) {
            throw new Response412Exception("Precondition Failed", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseTransaction result = ApiHelper.deserialize(responseBody,
                ResponseTransaction.class);

        return result;
    }

    /**
     * Create a new tokenized Credit Card authorization only transaction.
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseTransaction response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseTransaction cCAuthOnlyTokenized(
            final V1TransactionsCcAuthOnlyTokenRequest body) throws ApiException, IOException {
        HttpRequest request = buildCCAuthOnlyTokenizedRequest(body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleCCAuthOnlyTokenizedResponse(context);
    }

    /**
     * Create a new tokenized Credit Card authorization only transaction.
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseTransaction response from the API call
     */
    public CompletableFuture<ResponseTransaction> cCAuthOnlyTokenizedAsync(
            final V1TransactionsCcAuthOnlyTokenRequest body) {
        return makeHttpCallAsync(() -> buildCCAuthOnlyTokenizedRequest(body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleCCAuthOnlyTokenizedResponse(context));
    }

    /**
     * Builds the HttpRequest object for cCAuthOnlyTokenized.
     */
    private HttpRequest buildCCAuthOnlyTokenizedRequest(
            final V1TransactionsCcAuthOnlyTokenRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/transactions/cc/auth-only/token");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for cCAuthOnlyTokenized.
     * @return An object of type ResponseTransaction
     */
    private ResponseTransaction handleCCAuthOnlyTokenizedResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        if (responseCode == 412) {
            throw new Response412Exception("Precondition Failed", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseTransaction result = ApiHelper.deserialize(responseBody,
                ResponseTransaction.class);

        return result;
    }

    /**
     * Create a new keyed Credit Card AVS only transaction.
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseTransaction response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseTransaction cCAVS(
            final V1TransactionsCcAvsOnlyKeyedRequest body) throws ApiException, IOException {
        HttpRequest request = buildCCAVSRequest(body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleCCAVSResponse(context);
    }

    /**
     * Create a new keyed Credit Card AVS only transaction.
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseTransaction response from the API call
     */
    public CompletableFuture<ResponseTransaction> cCAVSAsync(
            final V1TransactionsCcAvsOnlyKeyedRequest body) {
        return makeHttpCallAsync(() -> buildCCAVSRequest(body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleCCAVSResponse(context));
    }

    /**
     * Builds the HttpRequest object for cCAVS.
     */
    private HttpRequest buildCCAVSRequest(
            final V1TransactionsCcAvsOnlyKeyedRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/transactions/cc/avs-only/keyed");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for cCAVS.
     * @return An object of type ResponseTransaction
     */
    private ResponseTransaction handleCCAVSResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        if (responseCode == 412) {
            throw new Response412Exception("Precondition Failed", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseTransaction result = ApiHelper.deserialize(responseBody,
                ResponseTransaction.class);

        return result;
    }

    /**
     * Create a new tokenized Credit Card AVS only transaction.
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseTransaction response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseTransaction cCAVSTokenized(
            final V1TransactionsCcAvsOnlyTokenRequest body) throws ApiException, IOException {
        HttpRequest request = buildCCAVSTokenizedRequest(body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleCCAVSTokenizedResponse(context);
    }

    /**
     * Create a new tokenized Credit Card AVS only transaction.
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseTransaction response from the API call
     */
    public CompletableFuture<ResponseTransaction> cCAVSTokenizedAsync(
            final V1TransactionsCcAvsOnlyTokenRequest body) {
        return makeHttpCallAsync(() -> buildCCAVSTokenizedRequest(body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleCCAVSTokenizedResponse(context));
    }

    /**
     * Builds the HttpRequest object for cCAVSTokenized.
     */
    private HttpRequest buildCCAVSTokenizedRequest(
            final V1TransactionsCcAvsOnlyTokenRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/transactions/cc/avs-only/token");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for cCAVSTokenized.
     * @return An object of type ResponseTransaction
     */
    private ResponseTransaction handleCCAVSTokenizedResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        if (responseCode == 412) {
            throw new Response412Exception("Precondition Failed", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseTransaction result = ApiHelper.deserialize(responseBody,
                ResponseTransaction.class);

        return result;
    }

    /**
     * Create a new keyed Credit Card force transaction.
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseTransaction response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseTransaction cCForce(
            final V1TransactionsCcForceKeyedRequest body) throws ApiException, IOException {
        HttpRequest request = buildCCForceRequest(body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleCCForceResponse(context);
    }

    /**
     * Create a new keyed Credit Card force transaction.
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseTransaction response from the API call
     */
    public CompletableFuture<ResponseTransaction> cCForceAsync(
            final V1TransactionsCcForceKeyedRequest body) {
        return makeHttpCallAsync(() -> buildCCForceRequest(body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleCCForceResponse(context));
    }

    /**
     * Builds the HttpRequest object for cCForce.
     */
    private HttpRequest buildCCForceRequest(
            final V1TransactionsCcForceKeyedRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/transactions/cc/force/keyed");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for cCForce.
     * @return An object of type ResponseTransaction
     */
    private ResponseTransaction handleCCForceResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        if (responseCode == 412) {
            throw new Response412Exception("Precondition Failed", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseTransaction result = ApiHelper.deserialize(responseBody,
                ResponseTransaction.class);

        return result;
    }

    /**
     * Create a new tokenized Credit Card force transaction.
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseTransaction response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseTransaction cCForceTokenized(
            final V1TransactionsCcForceTokenRequest body) throws ApiException, IOException {
        HttpRequest request = buildCCForceTokenizedRequest(body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleCCForceTokenizedResponse(context);
    }

    /**
     * Create a new tokenized Credit Card force transaction.
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseTransaction response from the API call
     */
    public CompletableFuture<ResponseTransaction> cCForceTokenizedAsync(
            final V1TransactionsCcForceTokenRequest body) {
        return makeHttpCallAsync(() -> buildCCForceTokenizedRequest(body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleCCForceTokenizedResponse(context));
    }

    /**
     * Builds the HttpRequest object for cCForceTokenized.
     */
    private HttpRequest buildCCForceTokenizedRequest(
            final V1TransactionsCcForceTokenRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/transactions/cc/force/token");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for cCForceTokenized.
     * @return An object of type ResponseTransaction
     */
    private ResponseTransaction handleCCForceTokenizedResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        if (responseCode == 412) {
            throw new Response412Exception("Precondition Failed", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseTransaction result = ApiHelper.deserialize(responseBody,
                ResponseTransaction.class);

        return result;
    }

    /**
     * Create a new keyed Credit Card refund transaction.
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseTransaction response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseTransaction cCRefund(
            final V1TransactionsCcRefundKeyedRequest body) throws ApiException, IOException {
        HttpRequest request = buildCCRefundRequest(body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleCCRefundResponse(context);
    }

    /**
     * Create a new keyed Credit Card refund transaction.
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseTransaction response from the API call
     */
    public CompletableFuture<ResponseTransaction> cCRefundAsync(
            final V1TransactionsCcRefundKeyedRequest body) {
        return makeHttpCallAsync(() -> buildCCRefundRequest(body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleCCRefundResponse(context));
    }

    /**
     * Builds the HttpRequest object for cCRefund.
     */
    private HttpRequest buildCCRefundRequest(
            final V1TransactionsCcRefundKeyedRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/transactions/cc/refund/keyed");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for cCRefund.
     * @return An object of type ResponseTransaction
     */
    private ResponseTransaction handleCCRefundResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        if (responseCode == 412) {
            throw new Response412Exception("Precondition Failed", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseTransaction result = ApiHelper.deserialize(responseBody,
                ResponseTransaction.class);

        return result;
    }

    /**
     * Create a new tokenized Credit Card refund transaction.
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseTransaction response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseTransaction cCRefundTokenized(
            final V1TransactionsCcRefundTokenRequest body) throws ApiException, IOException {
        HttpRequest request = buildCCRefundTokenizedRequest(body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleCCRefundTokenizedResponse(context);
    }

    /**
     * Create a new tokenized Credit Card refund transaction.
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseTransaction response from the API call
     */
    public CompletableFuture<ResponseTransaction> cCRefundTokenizedAsync(
            final V1TransactionsCcRefundTokenRequest body) {
        return makeHttpCallAsync(() -> buildCCRefundTokenizedRequest(body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleCCRefundTokenizedResponse(context));
    }

    /**
     * Builds the HttpRequest object for cCRefundTokenized.
     */
    private HttpRequest buildCCRefundTokenizedRequest(
            final V1TransactionsCcRefundTokenRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/transactions/cc/refund/token");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for cCRefundTokenized.
     * @return An object of type ResponseTransaction
     */
    private ResponseTransaction handleCCRefundTokenizedResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        if (responseCode == 412) {
            throw new Response412Exception("Precondition Failed", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseTransaction result = ApiHelper.deserialize(responseBody,
                ResponseTransaction.class);

        return result;
    }

    /**
     * Create a new keyed Credit Card sale transaction.
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseTransaction response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseTransaction cCSale(
            final V1TransactionsCcSaleKeyedRequest body) throws ApiException, IOException {
        HttpRequest request = buildCCSaleRequest(body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleCCSaleResponse(context);
    }

    /**
     * Create a new keyed Credit Card sale transaction.
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseTransaction response from the API call
     */
    public CompletableFuture<ResponseTransaction> cCSaleAsync(
            final V1TransactionsCcSaleKeyedRequest body) {
        return makeHttpCallAsync(() -> buildCCSaleRequest(body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleCCSaleResponse(context));
    }

    /**
     * Builds the HttpRequest object for cCSale.
     */
    private HttpRequest buildCCSaleRequest(
            final V1TransactionsCcSaleKeyedRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/transactions/cc/sale/keyed");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for cCSale.
     * @return An object of type ResponseTransaction
     */
    private ResponseTransaction handleCCSaleResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        if (responseCode == 412) {
            throw new Response412Exception("Precondition Failed", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseTransaction result = ApiHelper.deserialize(responseBody,
                ResponseTransaction.class);

        return result;
    }

    /**
     * Create a new terminal Credit Card sale transaction.
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseTransactionProcessing response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseTransactionProcessing cCSaleTerminal(
            final V1TransactionsCcSaleTerminalRequest body) throws ApiException, IOException {
        HttpRequest request = buildCCSaleTerminalRequest(body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleCCSaleTerminalResponse(context);
    }

    /**
     * Create a new terminal Credit Card sale transaction.
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseTransactionProcessing response from the API call
     */
    public CompletableFuture<ResponseTransactionProcessing> cCSaleTerminalAsync(
            final V1TransactionsCcSaleTerminalRequest body) {
        return makeHttpCallAsync(() -> buildCCSaleTerminalRequest(body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleCCSaleTerminalResponse(context));
    }

    /**
     * Builds the HttpRequest object for cCSaleTerminal.
     */
    private HttpRequest buildCCSaleTerminalRequest(
            final V1TransactionsCcSaleTerminalRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/transactions/cc/sale/terminal");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for cCSaleTerminal.
     * @return An object of type ResponseTransactionProcessing
     */
    private ResponseTransactionProcessing handleCCSaleTerminalResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        if (responseCode == 412) {
            throw new Response412Exception("Precondition Failed", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseTransactionProcessing result = ApiHelper.deserialize(responseBody,
                ResponseTransactionProcessing.class);

        return result;
    }

    /**
     * Create a new tokenized Credit Card sale transaction.
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseTransaction response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseTransaction cCSaleTokenized(
            final V1TransactionsCcSaleTokenRequest body) throws ApiException, IOException {
        HttpRequest request = buildCCSaleTokenizedRequest(body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleCCSaleTokenizedResponse(context);
    }

    /**
     * Create a new tokenized Credit Card sale transaction.
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseTransaction response from the API call
     */
    public CompletableFuture<ResponseTransaction> cCSaleTokenizedAsync(
            final V1TransactionsCcSaleTokenRequest body) {
        return makeHttpCallAsync(() -> buildCCSaleTokenizedRequest(body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleCCSaleTokenizedResponse(context));
    }

    /**
     * Builds the HttpRequest object for cCSaleTokenized.
     */
    private HttpRequest buildCCSaleTokenizedRequest(
            final V1TransactionsCcSaleTokenRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/transactions/cc/sale/token");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for cCSaleTokenized.
     * @return An object of type ResponseTransaction
     */
    private ResponseTransaction handleCCSaleTokenizedResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        if (responseCode == 412) {
            throw new Response412Exception("Precondition Failed", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseTransaction result = ApiHelper.deserialize(responseBody,
                ResponseTransaction.class);

        return result;
    }

}