/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package tech.fortis.sandbox.api.controllers;

import java.io.IOException;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import tech.fortis.sandbox.api.ApiHelper;
import tech.fortis.sandbox.api.AuthManager;
import tech.fortis.sandbox.api.Configuration;
import tech.fortis.sandbox.api.exceptions.ApiException;
import tech.fortis.sandbox.api.exceptions.Response401tokenException;
import tech.fortis.sandbox.api.http.Headers;
import tech.fortis.sandbox.api.http.client.HttpCallback;
import tech.fortis.sandbox.api.http.client.HttpClient;
import tech.fortis.sandbox.api.http.client.HttpContext;
import tech.fortis.sandbox.api.http.request.HttpRequest;
import tech.fortis.sandbox.api.http.response.HttpResponse;
import tech.fortis.sandbox.api.http.response.HttpStringResponse;
import tech.fortis.sandbox.api.models.Filter11;
import tech.fortis.sandbox.api.models.Page;
import tech.fortis.sandbox.api.models.ResponseTransaction;
import tech.fortis.sandbox.api.models.ResponseTransactionsCollection;
import tech.fortis.sandbox.api.models.Sort11;

/**
 * This class lists all the endpoints of the groups.
 */
public final class TransactionsReadController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public TransactionsReadController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }

    /**
     * Initializes the controller with HTTPCallback.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     * @param httpCallback    Callback to be called before and after the HTTP call.
     */
    public TransactionsReadController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        super(config, httpClient, authManagers, httpCallback);
    }

    /**
     * Get BIN info record associated with a transaction.
     * @param  transactionId  Required parameter: Transaction ID
     * @return    Returns the ResponseTransaction response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseTransaction getBINInfo(
            final String transactionId) throws ApiException, IOException {
        HttpRequest request = buildGetBINInfoRequest(transactionId);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetBINInfoResponse(context);
    }

    /**
     * Get BIN info record associated with a transaction.
     * @param  transactionId  Required parameter: Transaction ID
     * @return    Returns the ResponseTransaction response from the API call
     */
    public CompletableFuture<ResponseTransaction> getBINInfoAsync(
            final String transactionId) {
        return makeHttpCallAsync(() -> buildGetBINInfoRequest(transactionId),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleGetBINInfoResponse(context));
    }

    /**
     * Builds the HttpRequest object for getBINInfo.
     */
    private HttpRequest buildGetBINInfoRequest(
            final String transactionId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/transactions/{transaction_id}/bin-info");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("transaction_id",
                new SimpleEntry<Object, Boolean>(transactionId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getBINInfo.
     * @return An object of type ResponseTransaction
     */
    private ResponseTransaction handleGetBINInfoResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseTransaction result = ApiHelper.deserialize(responseBody,
                ResponseTransaction.class);

        return result;
    }

    /**
     * Get single transaction record.
     * @param  transactionId  Required parameter: Transaction ID
     * @return    Returns the ResponseTransaction response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseTransaction getTransaction(
            final String transactionId) throws ApiException, IOException {
        HttpRequest request = buildGetTransactionRequest(transactionId);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetTransactionResponse(context);
    }

    /**
     * Get single transaction record.
     * @param  transactionId  Required parameter: Transaction ID
     * @return    Returns the ResponseTransaction response from the API call
     */
    public CompletableFuture<ResponseTransaction> getTransactionAsync(
            final String transactionId) {
        return makeHttpCallAsync(() -> buildGetTransactionRequest(transactionId),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleGetTransactionResponse(context));
    }

    /**
     * Builds the HttpRequest object for getTransaction.
     */
    private HttpRequest buildGetTransactionRequest(
            final String transactionId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/transactions/{transaction_id}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("transaction_id",
                new SimpleEntry<Object, Boolean>(transactionId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getTransaction.
     * @return An object of type ResponseTransaction
     */
    private ResponseTransaction handleGetTransactionResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseTransaction result = ApiHelper.deserialize(responseBody,
                ResponseTransaction.class);

        return result;
    }

    /**
     * List transactions.
     * @param  page  Optional parameter: Use this field to specify paginate your results, by using
     *         page size and number. You can use one of the following methods: &gt;/endpoint?page={
     *         "number": 1, "size": 50 } &gt; &gt;/endpoint?page[number]=1&page[size]=50
     * @param  sort  Optional parameter: You can use any `field_name` from this endpoint results,
     *         and you can combine more than one field for more complex sorting. You can use one of
     *         the following methods: &gt;/endpoint?sort={ "field_name": "asc", "field_name2": "desc" }
     *         &gt; &gt;/endpoint?sort[field_name]=asc&sort[field_name2]=desc
     * @param  filter  Optional parameter: You can use any `field_name` from this endpoint results
     *         as a filter, and you can also use more than one field to create AND conditions. You
     *         can use one of the following methods: &gt;/endpoint?filter={ "field_name": "Value" } &gt;
     *         &gt;/endpoint?filter[field_name]=Value
     * @return    Returns the ResponseTransactionsCollection response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseTransactionsCollection listTransactions(
            final Page page,
            final Sort11 sort,
            final Filter11 filter) throws ApiException, IOException {
        HttpRequest request = buildListTransactionsRequest(page, sort, filter);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleListTransactionsResponse(context);
    }

    /**
     * List transactions.
     * @param  page  Optional parameter: Use this field to specify paginate your results, by using
     *         page size and number. You can use one of the following methods: &gt;/endpoint?page={
     *         "number": 1, "size": 50 } &gt; &gt;/endpoint?page[number]=1&page[size]=50
     * @param  sort  Optional parameter: You can use any `field_name` from this endpoint results,
     *         and you can combine more than one field for more complex sorting. You can use one of
     *         the following methods: &gt;/endpoint?sort={ "field_name": "asc", "field_name2": "desc" }
     *         &gt; &gt;/endpoint?sort[field_name]=asc&sort[field_name2]=desc
     * @param  filter  Optional parameter: You can use any `field_name` from this endpoint results
     *         as a filter, and you can also use more than one field to create AND conditions. You
     *         can use one of the following methods: &gt;/endpoint?filter={ "field_name": "Value" } &gt;
     *         &gt;/endpoint?filter[field_name]=Value
     * @return    Returns the ResponseTransactionsCollection response from the API call
     */
    public CompletableFuture<ResponseTransactionsCollection> listTransactionsAsync(
            final Page page,
            final Sort11 sort,
            final Filter11 filter) {
        return makeHttpCallAsync(() -> buildListTransactionsRequest(page, sort, filter),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleListTransactionsResponse(context));
    }

    /**
     * Builds the HttpRequest object for listTransactions.
     */
    private HttpRequest buildListTransactionsRequest(
            final Page page,
            final Sort11 sort,
            final Filter11 filter) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/transactions");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("page", page);
        queryParameters.put("sort", sort);
        queryParameters.put("filter", filter);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for listTransactions.
     * @return An object of type ResponseTransactionsCollection
     */
    private ResponseTransactionsCollection handleListTransactionsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseTransactionsCollection result = ApiHelper.deserialize(responseBody,
                ResponseTransactionsCollection.class);

        return result;
    }

}