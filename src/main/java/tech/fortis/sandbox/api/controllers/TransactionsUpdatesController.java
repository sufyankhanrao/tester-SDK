/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package tech.fortis.sandbox.api.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import java.io.IOException;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import tech.fortis.sandbox.api.ApiHelper;
import tech.fortis.sandbox.api.AuthManager;
import tech.fortis.sandbox.api.Configuration;
import tech.fortis.sandbox.api.exceptions.ApiException;
import tech.fortis.sandbox.api.exceptions.Response401tokenException;
import tech.fortis.sandbox.api.exceptions.Response412Exception;
import tech.fortis.sandbox.api.http.Headers;
import tech.fortis.sandbox.api.http.client.HttpCallback;
import tech.fortis.sandbox.api.http.client.HttpClient;
import tech.fortis.sandbox.api.http.client.HttpContext;
import tech.fortis.sandbox.api.http.request.HttpRequest;
import tech.fortis.sandbox.api.http.response.HttpResponse;
import tech.fortis.sandbox.api.http.response.HttpStringResponse;
import tech.fortis.sandbox.api.models.ResponseTransaction;
import tech.fortis.sandbox.api.models.V1TransactionsAuthCompleteRequest;
import tech.fortis.sandbox.api.models.V1TransactionsAuthIncrementRequest;
import tech.fortis.sandbox.api.models.V1TransactionsPartialReversalRequest;
import tech.fortis.sandbox.api.models.V1TransactionsRefundRequest;
import tech.fortis.sandbox.api.models.V1TransactionsTipAdjustRequest;

/**
 * This class lists all the endpoints of the groups.
 */
public final class TransactionsUpdatesController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public TransactionsUpdatesController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }

    /**
     * Initializes the controller with HTTPCallback.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     * @param httpCallback    Callback to be called before and after the HTTP call.
     */
    public TransactionsUpdatesController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        super(config, httpClient, authManagers, httpCallback);
    }

    /**
     * Perform an auth complete transaction.
     * @param  transactionId  Required parameter: Transaction ID
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseTransaction response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseTransaction authComplete(
            final String transactionId,
            final V1TransactionsAuthCompleteRequest body) throws ApiException, IOException {
        HttpRequest request = buildAuthCompleteRequest(transactionId, body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleAuthCompleteResponse(context);
    }

    /**
     * Perform an auth complete transaction.
     * @param  transactionId  Required parameter: Transaction ID
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseTransaction response from the API call
     */
    public CompletableFuture<ResponseTransaction> authCompleteAsync(
            final String transactionId,
            final V1TransactionsAuthCompleteRequest body) {
        return makeHttpCallAsync(() -> buildAuthCompleteRequest(transactionId, body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleAuthCompleteResponse(context));
    }

    /**
     * Builds the HttpRequest object for authComplete.
     */
    private HttpRequest buildAuthCompleteRequest(
            final String transactionId,
            final V1TransactionsAuthCompleteRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/transactions/{transaction_id}/auth-complete");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("transaction_id",
                new SimpleEntry<Object, Boolean>(transactionId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().patchBody(queryBuilder, headers, null,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for authComplete.
     * @return An object of type ResponseTransaction
     */
    private ResponseTransaction handleAuthCompleteResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        if (responseCode == 412) {
            throw new Response412Exception("Precondition Failed", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseTransaction result = ApiHelper.deserialize(responseBody,
                ResponseTransaction.class);

        return result;
    }

    /**
     * Perform an auth increment transaction.
     * @param  transactionId  Required parameter: Transaction ID
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseTransaction response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseTransaction authIncrement(
            final String transactionId,
            final V1TransactionsAuthIncrementRequest body) throws ApiException, IOException {
        HttpRequest request = buildAuthIncrementRequest(transactionId, body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleAuthIncrementResponse(context);
    }

    /**
     * Perform an auth increment transaction.
     * @param  transactionId  Required parameter: Transaction ID
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseTransaction response from the API call
     */
    public CompletableFuture<ResponseTransaction> authIncrementAsync(
            final String transactionId,
            final V1TransactionsAuthIncrementRequest body) {
        return makeHttpCallAsync(() -> buildAuthIncrementRequest(transactionId, body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleAuthIncrementResponse(context));
    }

    /**
     * Builds the HttpRequest object for authIncrement.
     */
    private HttpRequest buildAuthIncrementRequest(
            final String transactionId,
            final V1TransactionsAuthIncrementRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/transactions/{transaction_id}/auth-increment");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("transaction_id",
                new SimpleEntry<Object, Boolean>(transactionId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().patchBody(queryBuilder, headers, null,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for authIncrement.
     * @return An object of type ResponseTransaction
     */
    private ResponseTransaction handleAuthIncrementResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        if (responseCode == 412) {
            throw new Response412Exception("Precondition Failed", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseTransaction result = ApiHelper.deserialize(responseBody,
                ResponseTransaction.class);

        return result;
    }

    /**
     * Perform a partial reversal.
     * @param  transactionId  Required parameter: Transaction ID
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseTransaction response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseTransaction partialReversal(
            final String transactionId,
            final V1TransactionsPartialReversalRequest body) throws ApiException, IOException {
        HttpRequest request = buildPartialReversalRequest(transactionId, body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handlePartialReversalResponse(context);
    }

    /**
     * Perform a partial reversal.
     * @param  transactionId  Required parameter: Transaction ID
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseTransaction response from the API call
     */
    public CompletableFuture<ResponseTransaction> partialReversalAsync(
            final String transactionId,
            final V1TransactionsPartialReversalRequest body) {
        return makeHttpCallAsync(() -> buildPartialReversalRequest(transactionId, body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handlePartialReversalResponse(context));
    }

    /**
     * Builds the HttpRequest object for partialReversal.
     */
    private HttpRequest buildPartialReversalRequest(
            final String transactionId,
            final V1TransactionsPartialReversalRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/transactions/{transaction_id}/partial-reversal");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("transaction_id",
                new SimpleEntry<Object, Boolean>(transactionId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().patchBody(queryBuilder, headers, null,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for partialReversal.
     * @return An object of type ResponseTransaction
     */
    private ResponseTransaction handlePartialReversalResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        if (responseCode == 412) {
            throw new Response412Exception("Precondition Failed", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseTransaction result = ApiHelper.deserialize(responseBody,
                ResponseTransaction.class);

        return result;
    }

    /**
     * Perform a refund transaction.
     * @param  transactionId  Required parameter: Transaction ID
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseTransaction response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseTransaction refundTransaction(
            final String transactionId,
            final V1TransactionsRefundRequest body) throws ApiException, IOException {
        HttpRequest request = buildRefundTransactionRequest(transactionId, body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleRefundTransactionResponse(context);
    }

    /**
     * Perform a refund transaction.
     * @param  transactionId  Required parameter: Transaction ID
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseTransaction response from the API call
     */
    public CompletableFuture<ResponseTransaction> refundTransactionAsync(
            final String transactionId,
            final V1TransactionsRefundRequest body) {
        return makeHttpCallAsync(() -> buildRefundTransactionRequest(transactionId, body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleRefundTransactionResponse(context));
    }

    /**
     * Builds the HttpRequest object for refundTransaction.
     */
    private HttpRequest buildRefundTransactionRequest(
            final String transactionId,
            final V1TransactionsRefundRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/transactions/{transaction_id}/refund");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("transaction_id",
                new SimpleEntry<Object, Boolean>(transactionId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().patchBody(queryBuilder, headers, null,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for refundTransaction.
     * @return An object of type ResponseTransaction
     */
    private ResponseTransaction handleRefundTransactionResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        if (responseCode == 412) {
            throw new Response412Exception("Precondition Failed", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseTransaction result = ApiHelper.deserialize(responseBody,
                ResponseTransaction.class);

        return result;
    }

    /**
     * Increment the authorized transaction amount to include a tip.
     * @param  transactionId  Required parameter: Transaction ID
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseTransaction response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseTransaction tipAdjustment(
            final String transactionId,
            final V1TransactionsTipAdjustRequest body) throws ApiException, IOException {
        HttpRequest request = buildTipAdjustmentRequest(transactionId, body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleTipAdjustmentResponse(context);
    }

    /**
     * Increment the authorized transaction amount to include a tip.
     * @param  transactionId  Required parameter: Transaction ID
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseTransaction response from the API call
     */
    public CompletableFuture<ResponseTransaction> tipAdjustmentAsync(
            final String transactionId,
            final V1TransactionsTipAdjustRequest body) {
        return makeHttpCallAsync(() -> buildTipAdjustmentRequest(transactionId, body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleTipAdjustmentResponse(context));
    }

    /**
     * Builds the HttpRequest object for tipAdjustment.
     */
    private HttpRequest buildTipAdjustmentRequest(
            final String transactionId,
            final V1TransactionsTipAdjustRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/transactions/{transaction_id}/tip-adjust");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("transaction_id",
                new SimpleEntry<Object, Boolean>(transactionId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().patchBody(queryBuilder, headers, null,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for tipAdjustment.
     * @return An object of type ResponseTransaction
     */
    private ResponseTransaction handleTipAdjustmentResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        if (responseCode == 412) {
            throw new Response412Exception("Precondition Failed", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseTransaction result = ApiHelper.deserialize(responseBody,
                ResponseTransaction.class);

        return result;
    }

    /**
     * Void a transaction.
     * @param  transactionId  Required parameter: Transaction ID
     * @return    Returns the ResponseTransaction response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseTransaction void_(
            final String transactionId) throws ApiException, IOException {
        HttpRequest request = buildVoidRequest(transactionId);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleVoidResponse(context);
    }

    /**
     * Void a transaction.
     * @param  transactionId  Required parameter: Transaction ID
     * @return    Returns the ResponseTransaction response from the API call
     */
    public CompletableFuture<ResponseTransaction> voidAsync(
            final String transactionId) {
        return makeHttpCallAsync(() -> buildVoidRequest(transactionId),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleVoidResponse(context));
    }

    /**
     * Builds the HttpRequest object for void.
     */
    private HttpRequest buildVoidRequest(
            final String transactionId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/transactions/{transaction_id}/void");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("transaction_id",
                new SimpleEntry<Object, Boolean>(transactionId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().patch(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for void.
     * @return An object of type ResponseTransaction
     */
    private ResponseTransaction handleVoidResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseTransaction result = ApiHelper.deserialize(responseBody,
                ResponseTransaction.class);

        return result;
    }

}