/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package tech.fortis.sandbox.api.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import java.io.IOException;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import tech.fortis.sandbox.api.ApiHelper;
import tech.fortis.sandbox.api.AuthManager;
import tech.fortis.sandbox.api.Configuration;
import tech.fortis.sandbox.api.exceptions.ApiException;
import tech.fortis.sandbox.api.exceptions.Response401tokenException;
import tech.fortis.sandbox.api.exceptions.Response412Exception;
import tech.fortis.sandbox.api.http.Headers;
import tech.fortis.sandbox.api.http.client.HttpCallback;
import tech.fortis.sandbox.api.http.client.HttpClient;
import tech.fortis.sandbox.api.http.client.HttpContext;
import tech.fortis.sandbox.api.http.request.HttpRequest;
import tech.fortis.sandbox.api.http.response.HttpResponse;
import tech.fortis.sandbox.api.http.response.HttpStringResponse;
import tech.fortis.sandbox.api.models.Filter12;
import tech.fortis.sandbox.api.models.Page;
import tech.fortis.sandbox.api.models.ResponseUser;
import tech.fortis.sandbox.api.models.ResponseUsersCollection;
import tech.fortis.sandbox.api.models.Sort12;
import tech.fortis.sandbox.api.models.V1UsersRequest;
import tech.fortis.sandbox.api.models.V1UsersRequest1;

/**
 * This class lists all the endpoints of the groups.
 */
public final class UsersController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public UsersController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }

    /**
     * Initializes the controller with HTTPCallback.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     * @param httpCallback    Callback to be called before and after the HTTP call.
     */
    public UsersController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        super(config, httpClient, authManagers, httpCallback);
    }

    /**
     * Create a new API key.
     * @param  userId  Required parameter: User ID
     * @return    Returns the ResponseUser response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseUser createANewAPIKey(
            final String userId) throws ApiException, IOException {
        HttpRequest request = buildCreateANewAPIKeyRequest(userId);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleCreateANewAPIKeyResponse(context);
    }

    /**
     * Create a new API key.
     * @param  userId  Required parameter: User ID
     * @return    Returns the ResponseUser response from the API call
     */
    public CompletableFuture<ResponseUser> createANewAPIKeyAsync(
            final String userId) {
        return makeHttpCallAsync(() -> buildCreateANewAPIKeyRequest(userId),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleCreateANewAPIKeyResponse(context));
    }

    /**
     * Builds the HttpRequest object for createANewAPIKey.
     */
    private HttpRequest buildCreateANewAPIKeyRequest(
            final String userId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/users/{user_id}/api-key");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("user_id",
                new SimpleEntry<Object, Boolean>(userId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().post(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for createANewAPIKey.
     * @return An object of type ResponseUser
     */
    private ResponseUser handleCreateANewAPIKeyResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseUser result = ApiHelper.deserialize(responseBody,
                ResponseUser.class);

        return result;
    }

    /**
     * Create a new user.
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseUser response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseUser createANewUser(
            final V1UsersRequest body) throws ApiException, IOException {
        HttpRequest request = buildCreateANewUserRequest(body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleCreateANewUserResponse(context);
    }

    /**
     * Create a new user.
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseUser response from the API call
     */
    public CompletableFuture<ResponseUser> createANewUserAsync(
            final V1UsersRequest body) {
        return makeHttpCallAsync(() -> buildCreateANewUserRequest(body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleCreateANewUserResponse(context));
    }

    /**
     * Builds the HttpRequest object for createANewUser.
     */
    private HttpRequest buildCreateANewUserRequest(
            final V1UsersRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/users");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for createANewUser.
     * @return An object of type ResponseUser
     */
    private ResponseUser handleCreateANewUserResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        if (responseCode == 412) {
            throw new Response412Exception("Precondition Failed", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseUser result = ApiHelper.deserialize(responseBody,
                ResponseUser.class);

        return result;
    }

    /**
     * List all user related.
     * @param  page  Optional parameter: Use this field to specify paginate your results, by using
     *         page size and number. You can use one of the following methods: &gt;/endpoint?page={
     *         "number": 1, "size": 50 } &gt; &gt;/endpoint?page[number]=1&page[size]=50
     * @param  sort  Optional parameter: You can use any `field_name` from this endpoint results,
     *         and you can combine more than one field for more complex sorting. You can use one of
     *         the following methods: &gt;/endpoint?sort={ "field_name": "asc", "field_name2": "desc" }
     *         &gt; &gt;/endpoint?sort[field_name]=asc&sort[field_name2]=desc
     * @param  filter  Optional parameter: You can use any `field_name` from this endpoint results
     *         as a filter, and you can also use more than one field to create AND conditions. You
     *         can use one of the following methods: &gt;/endpoint?filter={ "field_name": "Value" } &gt;
     *         &gt;/endpoint?filter[field_name]=Value
     * @return    Returns the ResponseUsersCollection response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseUsersCollection listAllUserRelated(
            final Page page,
            final Sort12 sort,
            final Filter12 filter) throws ApiException, IOException {
        HttpRequest request = buildListAllUserRelatedRequest(page, sort, filter);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleListAllUserRelatedResponse(context);
    }

    /**
     * List all user related.
     * @param  page  Optional parameter: Use this field to specify paginate your results, by using
     *         page size and number. You can use one of the following methods: &gt;/endpoint?page={
     *         "number": 1, "size": 50 } &gt; &gt;/endpoint?page[number]=1&page[size]=50
     * @param  sort  Optional parameter: You can use any `field_name` from this endpoint results,
     *         and you can combine more than one field for more complex sorting. You can use one of
     *         the following methods: &gt;/endpoint?sort={ "field_name": "asc", "field_name2": "desc" }
     *         &gt; &gt;/endpoint?sort[field_name]=asc&sort[field_name2]=desc
     * @param  filter  Optional parameter: You can use any `field_name` from this endpoint results
     *         as a filter, and you can also use more than one field to create AND conditions. You
     *         can use one of the following methods: &gt;/endpoint?filter={ "field_name": "Value" } &gt;
     *         &gt;/endpoint?filter[field_name]=Value
     * @return    Returns the ResponseUsersCollection response from the API call
     */
    public CompletableFuture<ResponseUsersCollection> listAllUserRelatedAsync(
            final Page page,
            final Sort12 sort,
            final Filter12 filter) {
        return makeHttpCallAsync(() -> buildListAllUserRelatedRequest(page, sort, filter),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleListAllUserRelatedResponse(context));
    }

    /**
     * Builds the HttpRequest object for listAllUserRelated.
     */
    private HttpRequest buildListAllUserRelatedRequest(
            final Page page,
            final Sort12 sort,
            final Filter12 filter) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/users");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("page", page);
        queryParameters.put("sort", sort);
        queryParameters.put("filter", filter);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for listAllUserRelated.
     * @return An object of type ResponseUsersCollection
     */
    private ResponseUsersCollection handleListAllUserRelatedResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseUsersCollection result = ApiHelper.deserialize(responseBody,
                ResponseUsersCollection.class);

        return result;
    }

    /**
     * Delete a user record.
     * @param  userId  Required parameter: Example:
     * @return    Returns the ResponseUser response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseUser deleteAUserRecord(
            final String userId) throws ApiException, IOException {
        HttpRequest request = buildDeleteAUserRecordRequest(userId);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleDeleteAUserRecordResponse(context);
    }

    /**
     * Delete a user record.
     * @param  userId  Required parameter: Example:
     * @return    Returns the ResponseUser response from the API call
     */
    public CompletableFuture<ResponseUser> deleteAUserRecordAsync(
            final String userId) {
        return makeHttpCallAsync(() -> buildDeleteAUserRecordRequest(userId),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleDeleteAUserRecordResponse(context));
    }

    /**
     * Builds the HttpRequest object for deleteAUserRecord.
     */
    private HttpRequest buildDeleteAUserRecordRequest(
            final String userId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/users/{user_id}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("user_id",
                new SimpleEntry<Object, Boolean>(userId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().delete(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for deleteAUserRecord.
     * @return An object of type ResponseUser
     */
    private ResponseUser handleDeleteAUserRecordResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseUser result = ApiHelper.deserialize(responseBody,
                ResponseUser.class);

        return result;
    }

    /**
     * View single user record.
     * @param  userId  Required parameter: User ID
     * @return    Returns the ResponseUser response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseUser viewSingleUserRecord(
            final String userId) throws ApiException, IOException {
        HttpRequest request = buildViewSingleUserRecordRequest(userId);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleViewSingleUserRecordResponse(context);
    }

    /**
     * View single user record.
     * @param  userId  Required parameter: User ID
     * @return    Returns the ResponseUser response from the API call
     */
    public CompletableFuture<ResponseUser> viewSingleUserRecordAsync(
            final String userId) {
        return makeHttpCallAsync(() -> buildViewSingleUserRecordRequest(userId),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleViewSingleUserRecordResponse(context));
    }

    /**
     * Builds the HttpRequest object for viewSingleUserRecord.
     */
    private HttpRequest buildViewSingleUserRecordRequest(
            final String userId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/users/{user_id}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("user_id",
                new SimpleEntry<Object, Boolean>(userId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for viewSingleUserRecord.
     * @return An object of type ResponseUser
     */
    private ResponseUser handleViewSingleUserRecordResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseUser result = ApiHelper.deserialize(responseBody,
                ResponseUser.class);

        return result;
    }

    /**
     * Update a user record.
     * @param  userId  Required parameter: User ID
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseUser response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseUser updateAUserRecord(
            final String userId,
            final V1UsersRequest1 body) throws ApiException, IOException {
        HttpRequest request = buildUpdateAUserRecordRequest(userId, body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleUpdateAUserRecordResponse(context);
    }

    /**
     * Update a user record.
     * @param  userId  Required parameter: User ID
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseUser response from the API call
     */
    public CompletableFuture<ResponseUser> updateAUserRecordAsync(
            final String userId,
            final V1UsersRequest1 body) {
        return makeHttpCallAsync(() -> buildUpdateAUserRecordRequest(userId, body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleUpdateAUserRecordResponse(context));
    }

    /**
     * Builds the HttpRequest object for updateAUserRecord.
     */
    private HttpRequest buildUpdateAUserRecordRequest(
            final String userId,
            final V1UsersRequest1 body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/users/{user_id}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("user_id",
                new SimpleEntry<Object, Boolean>(userId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().patchBody(queryBuilder, headers, null,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for updateAUserRecord.
     * @return An object of type ResponseUser
     */
    private ResponseUser handleUpdateAUserRecordResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        if (responseCode == 412) {
            throw new Response412Exception("Precondition Failed", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseUser result = ApiHelper.deserialize(responseBody,
                ResponseUser.class);

        return result;
    }

    /**
     * View self record.
     * @return    Returns the ResponseUser response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseUser viewSelfRecord() throws ApiException, IOException {
        HttpRequest request = buildViewSelfRecordRequest();
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleViewSelfRecordResponse(context);
    }

    /**
     * View self record.
     * @return    Returns the ResponseUser response from the API call
     */
    public CompletableFuture<ResponseUser> viewSelfRecordAsync() {
        return makeHttpCallAsync(() -> buildViewSelfRecordRequest(),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleViewSelfRecordResponse(context));
    }

    /**
     * Builds the HttpRequest object for viewSelfRecord.
     */
    private HttpRequest buildViewSelfRecordRequest() {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/users/me");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for viewSelfRecord.
     * @return An object of type ResponseUser
     */
    private ResponseUser handleViewSelfRecordResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseUser result = ApiHelper.deserialize(responseBody,
                ResponseUser.class);

        return result;
    }

}