/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package tech.fortis.sandbox.api.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import java.io.IOException;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import tech.fortis.sandbox.api.ApiHelper;
import tech.fortis.sandbox.api.AuthManager;
import tech.fortis.sandbox.api.Configuration;
import tech.fortis.sandbox.api.exceptions.ApiException;
import tech.fortis.sandbox.api.exceptions.Response401tokenException;
import tech.fortis.sandbox.api.exceptions.Response412Exception;
import tech.fortis.sandbox.api.http.Headers;
import tech.fortis.sandbox.api.http.client.HttpCallback;
import tech.fortis.sandbox.api.http.client.HttpClient;
import tech.fortis.sandbox.api.http.client.HttpContext;
import tech.fortis.sandbox.api.http.request.HttpRequest;
import tech.fortis.sandbox.api.http.response.HttpResponse;
import tech.fortis.sandbox.api.http.response.HttpStringResponse;
import tech.fortis.sandbox.api.models.ResponseWebhook;
import tech.fortis.sandbox.api.models.V1WebhooksBatchRequest;
import tech.fortis.sandbox.api.models.V1WebhooksBatchRequest1;
import tech.fortis.sandbox.api.models.V1WebhooksContactRequest;
import tech.fortis.sandbox.api.models.V1WebhooksContactRequest1;
import tech.fortis.sandbox.api.models.V1WebhooksTransactionRequest;
import tech.fortis.sandbox.api.models.V1WebhooksTransactionRequest1;

/**
 * This class lists all the endpoints of the groups.
 */
public final class WebhooksController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public WebhooksController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }

    /**
     * Initializes the controller with HTTPCallback.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     * @param httpCallback    Callback to be called before and after the HTTP call.
     */
    public WebhooksController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        super(config, httpClient, authManagers, httpCallback);
    }

    /**
     * Create a new transaction batch postback config.
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseWebhook response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseWebhook createANewTransactionBatchPostbackConfig(
            final V1WebhooksBatchRequest body) throws ApiException, IOException {
        HttpRequest request = buildCreateANewTransactionBatchPostbackConfigRequest(body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleCreateANewTransactionBatchPostbackConfigResponse(context);
    }

    /**
     * Create a new transaction batch postback config.
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseWebhook response from the API call
     */
    public CompletableFuture<ResponseWebhook> createANewTransactionBatchPostbackConfigAsync(
            final V1WebhooksBatchRequest body) {
        return makeHttpCallAsync(() -> buildCreateANewTransactionBatchPostbackConfigRequest(body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleCreateANewTransactionBatchPostbackConfigResponse(context));
    }

    /**
     * Builds the HttpRequest object for createANewTransactionBatchPostbackConfig.
     */
    private HttpRequest buildCreateANewTransactionBatchPostbackConfigRequest(
            final V1WebhooksBatchRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/webhooks/batch");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for createANewTransactionBatchPostbackConfig.
     * @return An object of type ResponseWebhook
     */
    private ResponseWebhook handleCreateANewTransactionBatchPostbackConfigResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        if (responseCode == 412) {
            throw new Response412Exception("Precondition Failed", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseWebhook result = ApiHelper.deserialize(responseBody,
                ResponseWebhook.class);

        return result;
    }

    /**
     * Create a new contact postback config.
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseWebhook response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseWebhook createANewContactPostbackConfig(
            final V1WebhooksContactRequest body) throws ApiException, IOException {
        HttpRequest request = buildCreateANewContactPostbackConfigRequest(body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleCreateANewContactPostbackConfigResponse(context);
    }

    /**
     * Create a new contact postback config.
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseWebhook response from the API call
     */
    public CompletableFuture<ResponseWebhook> createANewContactPostbackConfigAsync(
            final V1WebhooksContactRequest body) {
        return makeHttpCallAsync(() -> buildCreateANewContactPostbackConfigRequest(body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleCreateANewContactPostbackConfigResponse(context));
    }

    /**
     * Builds the HttpRequest object for createANewContactPostbackConfig.
     */
    private HttpRequest buildCreateANewContactPostbackConfigRequest(
            final V1WebhooksContactRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/webhooks/contact");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for createANewContactPostbackConfig.
     * @return An object of type ResponseWebhook
     */
    private ResponseWebhook handleCreateANewContactPostbackConfigResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        if (responseCode == 412) {
            throw new Response412Exception("Precondition Failed", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseWebhook result = ApiHelper.deserialize(responseBody,
                ResponseWebhook.class);

        return result;
    }

    /**
     * Create a new transaction postback config.
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseWebhook response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseWebhook createANewTransactionPostbackConfig(
            final V1WebhooksTransactionRequest body) throws ApiException, IOException {
        HttpRequest request = buildCreateANewTransactionPostbackConfigRequest(body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleCreateANewTransactionPostbackConfigResponse(context);
    }

    /**
     * Create a new transaction postback config.
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseWebhook response from the API call
     */
    public CompletableFuture<ResponseWebhook> createANewTransactionPostbackConfigAsync(
            final V1WebhooksTransactionRequest body) {
        return makeHttpCallAsync(() -> buildCreateANewTransactionPostbackConfigRequest(body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleCreateANewTransactionPostbackConfigResponse(context));
    }

    /**
     * Builds the HttpRequest object for createANewTransactionPostbackConfig.
     */
    private HttpRequest buildCreateANewTransactionPostbackConfigRequest(
            final V1WebhooksTransactionRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/webhooks/transaction");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for createANewTransactionPostbackConfig.
     * @return An object of type ResponseWebhook
     */
    private ResponseWebhook handleCreateANewTransactionPostbackConfigResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        if (responseCode == 412) {
            throw new Response412Exception("Precondition Failed", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseWebhook result = ApiHelper.deserialize(responseBody,
                ResponseWebhook.class);

        return result;
    }

    /**
     * Delete a postback config.
     * @param  webhookId  Required parameter: Postback Config ID
     * @return    Returns the ResponseWebhook response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseWebhook deleteAPostbackConfig(
            final String webhookId) throws ApiException, IOException {
        HttpRequest request = buildDeleteAPostbackConfigRequest(webhookId);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleDeleteAPostbackConfigResponse(context);
    }

    /**
     * Delete a postback config.
     * @param  webhookId  Required parameter: Postback Config ID
     * @return    Returns the ResponseWebhook response from the API call
     */
    public CompletableFuture<ResponseWebhook> deleteAPostbackConfigAsync(
            final String webhookId) {
        return makeHttpCallAsync(() -> buildDeleteAPostbackConfigRequest(webhookId),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleDeleteAPostbackConfigResponse(context));
    }

    /**
     * Builds the HttpRequest object for deleteAPostbackConfig.
     */
    private HttpRequest buildDeleteAPostbackConfigRequest(
            final String webhookId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/webhooks/{webhook_id}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("webhook_id",
                new SimpleEntry<Object, Boolean>(webhookId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().delete(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for deleteAPostbackConfig.
     * @return An object of type ResponseWebhook
     */
    private ResponseWebhook handleDeleteAPostbackConfigResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseWebhook result = ApiHelper.deserialize(responseBody,
                ResponseWebhook.class);

        return result;
    }

    /**
     * Update transaction batch postback config.
     * @param  webhookId  Required parameter: Postback Config ID
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseWebhook response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseWebhook updateTransactionBatchPostbackConfig(
            final String webhookId,
            final V1WebhooksBatchRequest1 body) throws ApiException, IOException {
        HttpRequest request = buildUpdateTransactionBatchPostbackConfigRequest(webhookId, body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleUpdateTransactionBatchPostbackConfigResponse(context);
    }

    /**
     * Update transaction batch postback config.
     * @param  webhookId  Required parameter: Postback Config ID
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseWebhook response from the API call
     */
    public CompletableFuture<ResponseWebhook> updateTransactionBatchPostbackConfigAsync(
            final String webhookId,
            final V1WebhooksBatchRequest1 body) {
        return makeHttpCallAsync(() -> buildUpdateTransactionBatchPostbackConfigRequest(webhookId,
                body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleUpdateTransactionBatchPostbackConfigResponse(context));
    }

    /**
     * Builds the HttpRequest object for updateTransactionBatchPostbackConfig.
     */
    private HttpRequest buildUpdateTransactionBatchPostbackConfigRequest(
            final String webhookId,
            final V1WebhooksBatchRequest1 body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/webhooks/{webhook_id}/batch");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("webhook_id",
                new SimpleEntry<Object, Boolean>(webhookId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().patchBody(queryBuilder, headers, null,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for updateTransactionBatchPostbackConfig.
     * @return An object of type ResponseWebhook
     */
    private ResponseWebhook handleUpdateTransactionBatchPostbackConfigResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        if (responseCode == 412) {
            throw new Response412Exception("Precondition Failed", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseWebhook result = ApiHelper.deserialize(responseBody,
                ResponseWebhook.class);

        return result;
    }

    /**
     * Update contact postback config.
     * @param  webhookId  Required parameter: Postback Config ID
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseWebhook response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseWebhook updateContactPostbackConfig(
            final String webhookId,
            final V1WebhooksContactRequest1 body) throws ApiException, IOException {
        HttpRequest request = buildUpdateContactPostbackConfigRequest(webhookId, body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleUpdateContactPostbackConfigResponse(context);
    }

    /**
     * Update contact postback config.
     * @param  webhookId  Required parameter: Postback Config ID
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseWebhook response from the API call
     */
    public CompletableFuture<ResponseWebhook> updateContactPostbackConfigAsync(
            final String webhookId,
            final V1WebhooksContactRequest1 body) {
        return makeHttpCallAsync(() -> buildUpdateContactPostbackConfigRequest(webhookId, body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleUpdateContactPostbackConfigResponse(context));
    }

    /**
     * Builds the HttpRequest object for updateContactPostbackConfig.
     */
    private HttpRequest buildUpdateContactPostbackConfigRequest(
            final String webhookId,
            final V1WebhooksContactRequest1 body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/webhooks/{webhook_id}/contact");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("webhook_id",
                new SimpleEntry<Object, Boolean>(webhookId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().patchBody(queryBuilder, headers, null,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for updateContactPostbackConfig.
     * @return An object of type ResponseWebhook
     */
    private ResponseWebhook handleUpdateContactPostbackConfigResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        if (responseCode == 412) {
            throw new Response412Exception("Precondition Failed", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseWebhook result = ApiHelper.deserialize(responseBody,
                ResponseWebhook.class);

        return result;
    }

    /**
     * Update transaction postback config.
     * @param  webhookId  Required parameter: Postback Config ID
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseWebhook response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ResponseWebhook updateTransactionPostbackConfig(
            final String webhookId,
            final V1WebhooksTransactionRequest1 body) throws ApiException, IOException {
        HttpRequest request = buildUpdateTransactionPostbackConfigRequest(webhookId, body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleUpdateTransactionPostbackConfigResponse(context);
    }

    /**
     * Update transaction postback config.
     * @param  webhookId  Required parameter: Postback Config ID
     * @param  body  Required parameter: Example:
     * @return    Returns the ResponseWebhook response from the API call
     */
    public CompletableFuture<ResponseWebhook> updateTransactionPostbackConfigAsync(
            final String webhookId,
            final V1WebhooksTransactionRequest1 body) {
        return makeHttpCallAsync(() -> buildUpdateTransactionPostbackConfigRequest(webhookId, body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleUpdateTransactionPostbackConfigResponse(context));
    }

    /**
     * Builds the HttpRequest object for updateTransactionPostbackConfig.
     */
    private HttpRequest buildUpdateTransactionPostbackConfigRequest(
            final String webhookId,
            final V1WebhooksTransactionRequest1 body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/webhooks/{webhook_id}/transaction");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("webhook_id",
                new SimpleEntry<Object, Boolean>(webhookId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().patchBody(queryBuilder, headers, null,
                bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for updateTransactionPostbackConfig.
     * @return An object of type ResponseWebhook
     */
    private ResponseWebhook handleUpdateTransactionPostbackConfigResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new Response401tokenException("Unauthorized", context);
        }
        if (responseCode == 412) {
            throw new Response412Exception("Precondition Failed", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ResponseWebhook result = ApiHelper.deserialize(responseBody,
                ResponseWebhook.class);

        return result;
    }

}