/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package tech.fortis.sandbox.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import java.util.UUID;

/**
 * This is a model class for Data type.
 */
public class Data {
    private UUID code;
    private String type;
    private String id;
    private int progress;
    private String error;
    private long ttl;

    /**
     * Default constructor.
     */
    public Data() {
    }

    /**
     * Initialization constructor.
     * @param  code  UUID value for code.
     * @param  type  String value for type.
     * @param  id  String value for id.
     * @param  progress  int value for progress.
     * @param  ttl  long value for ttl.
     * @param  error  String value for error.
     */
    public Data(
            UUID code,
            String type,
            String id,
            int progress,
            long ttl,
            String error) {
        this.code = code;
        this.type = type;
        this.id = id;
        this.progress = progress;
        this.error = error;
        this.ttl = ttl;
    }

    /**
     * Getter for Code.
     * A [UUID v4](https://datatracker.ietf.org/doc/html/rfc4122) that's unique for the Async
     * Request
     * @return Returns the UUID
     */
    @JsonGetter("code")
    public UUID getCode() {
        return code;
    }

    /**
     * Setter for Code.
     * A [UUID v4](https://datatracker.ietf.org/doc/html/rfc4122) that's unique for the Async
     * Request
     * @param code Value for UUID
     */
    @JsonSetter("code")
    public void setCode(UUID code) {
        this.code = code;
    }

    /**
     * Getter for Type.
     * The @type from the original request.
     * @return Returns the String
     */
    @JsonGetter("type")
    public String getType() {
        return type;
    }

    /**
     * Setter for Type.
     * The @type from the original request.
     * @param type Value for String
     */
    @JsonSetter("type")
    public void setType(String type) {
        this.type = type;
    }

    /**
     * Getter for Id.
     * After a sucessfully processing, the system will fill with the final ID for the document
     * @return Returns the String
     */
    @JsonGetter("id")
    public String getId() {
        return id;
    }

    /**
     * Setter for Id.
     * After a sucessfully processing, the system will fill with the final ID for the document
     * @param id Value for String
     */
    @JsonSetter("id")
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Getter for Progress.
     * The current percentage progress
     * @return Returns the int
     */
    @JsonGetter("progress")
    public int getProgress() {
        return progress;
    }

    /**
     * Setter for Progress.
     * The current percentage progress
     * @param progress Value for int
     */
    @JsonSetter("progress")
    public void setProgress(int progress) {
        this.progress = progress;
    }

    /**
     * Getter for Error.
     * In case of error processing, it will contain the error details
     * @return Returns the String
     */
    @JsonGetter("error")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getError() {
        return error;
    }

    /**
     * Setter for Error.
     * In case of error processing, it will contain the error details
     * @param error Value for String
     */
    @JsonSetter("error")
    public void setError(String error) {
        this.error = error;
    }

    /**
     * Getter for Ttl.
     * The date (in [Epoch Time](https://en.wikipedia.org/wiki/Unix_time)) this status register is
     * set to expire. Usually 30 days after the request.
     * @return Returns the long
     */
    @JsonGetter("ttl")
    public long getTtl() {
        return ttl;
    }

    /**
     * Setter for Ttl.
     * The date (in [Epoch Time](https://en.wikipedia.org/wiki/Unix_time)) this status register is
     * set to expire. Usually 30 days after the request.
     * @param ttl Value for long
     */
    @JsonSetter("ttl")
    public void setTtl(long ttl) {
        this.ttl = ttl;
    }

    /**
     * Converts this Data into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Data [" + "code=" + code + ", type=" + type + ", id=" + id + ", progress="
                + progress + ", ttl=" + ttl + ", error=" + error + "]";
    }

    /**
     * Builds a new {@link Data.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Data.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(code, type, id, progress, ttl)
                .error(getError());
        return builder;
    }

    /**
     * Class to build instances of {@link Data}.
     */
    public static class Builder {
        private UUID code;
        private String type;
        private String id;
        private int progress;
        private long ttl;
        private String error;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  code  UUID value for code.
         * @param  type  String value for type.
         * @param  id  String value for id.
         * @param  progress  int value for progress.
         * @param  ttl  long value for ttl.
         */
        public Builder(UUID code, String type, String id, int progress, long ttl) {
            this.code = code;
            this.type = type;
            this.id = id;
            this.progress = progress;
            this.ttl = ttl;
        }

        /**
         * Setter for code.
         * @param  code  UUID value for code.
         * @return Builder
         */
        public Builder code(UUID code) {
            this.code = code;
            return this;
        }

        /**
         * Setter for type.
         * @param  type  String value for type.
         * @return Builder
         */
        public Builder type(String type) {
            this.type = type;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  String value for id.
         * @return Builder
         */
        public Builder id(String id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for progress.
         * @param  progress  int value for progress.
         * @return Builder
         */
        public Builder progress(int progress) {
            this.progress = progress;
            return this;
        }

        /**
         * Setter for ttl.
         * @param  ttl  long value for ttl.
         * @return Builder
         */
        public Builder ttl(long ttl) {
            this.ttl = ttl;
            return this;
        }

        /**
         * Setter for error.
         * @param  error  String value for error.
         * @return Builder
         */
        public Builder error(String error) {
            this.error = error;
            return this;
        }

        /**
         * Builds a new {@link Data} object using the set fields.
         * @return {@link Data}
         */
        public Data build() {
            return new Data(code, type, id, progress, ttl, error);
        }
    }
}
