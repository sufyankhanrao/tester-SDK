/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package tech.fortis.sandbox.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import java.util.List;

/**
 * This is a model class for Data4 type.
 */
public class Data4 {
    private ActionEnum action;
    private List<Method> methods;
    private int amount;
    private Integer taxAmount;
    private String currency;
    private String locationId;
    private String clientToken;

    /**
     * Default constructor.
     */
    public Data4() {
        currency = "usd";
        action = ActionEnum.SALE;
    }

    /**
     * Initialization constructor.
     * @param  amount  int value for amount.
     * @param  currency  String value for currency.
     * @param  clientToken  String value for clientToken.
     * @param  action  ActionEnum value for action.
     * @param  methods  List of Method value for methods.
     * @param  taxAmount  Integer value for taxAmount.
     * @param  locationId  String value for locationId.
     */
    public Data4(
            int amount,
            String currency,
            String clientToken,
            ActionEnum action,
            List<Method> methods,
            Integer taxAmount,
            String locationId) {
        this.action = action;
        this.methods = methods;
        this.amount = amount;
        this.taxAmount = taxAmount;
        this.currency = currency;
        this.locationId = locationId;
        this.clientToken = clientToken;
    }

    /**
     * Getter for Action.
     * The action to be performed
     * @return Returns the ActionEnum
     */
    @JsonGetter("action")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ActionEnum getAction() {
        return action;
    }

    /**
     * Setter for Action.
     * The action to be performed
     * @param action Value for ActionEnum
     */
    @JsonSetter("action")
    public void setAction(ActionEnum action) {
        this.action = action;
    }

    /**
     * Getter for Methods.
     * Byt default the system will try to offer all the availables payment methods from your
     * account. But if you like, you can specify exactly what services you want to use.
     * @return Returns the List of Method
     */
    @JsonGetter("methods")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<Method> getMethods() {
        return methods;
    }

    /**
     * Setter for Methods.
     * Byt default the system will try to offer all the availables payment methods from your
     * account. But if you like, you can specify exactly what services you want to use.
     * @param methods Value for List of Method
     */
    @JsonSetter("methods")
    public void setMethods(List<Method> methods) {
        this.methods = methods;
    }

    /**
     * Getter for Amount.
     * The total amount to be charged
     * @return Returns the int
     */
    @JsonGetter("amount")
    public int getAmount() {
        return amount;
    }

    /**
     * Setter for Amount.
     * The total amount to be charged
     * @param amount Value for int
     */
    @JsonSetter("amount")
    public void setAmount(int amount) {
        this.amount = amount;
    }

    /**
     * Getter for TaxAmount.
     * Amount of Sales Tax. If supplied, this amount should be already included in the transaction
     * amount.
     * @return Returns the Integer
     */
    @JsonGetter("tax_amount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getTaxAmount() {
        return taxAmount;
    }

    /**
     * Setter for TaxAmount.
     * Amount of Sales Tax. If supplied, this amount should be already included in the transaction
     * amount.
     * @param taxAmount Value for Integer
     */
    @JsonSetter("tax_amount")
    public void setTaxAmount(Integer taxAmount) {
        this.taxAmount = taxAmount;
    }

    /**
     * Getter for Currency.
     * The currency for the transaction
     * @return Returns the String
     */
    @JsonGetter("currency")
    public String getCurrency() {
        return currency;
    }

    /**
     * Setter for Currency.
     * The currency for the transaction
     * @param currency Value for String
     */
    @JsonSetter("currency")
    private void setCurrency(String currency) {
        this.currency = currency;
    }

    /**
     * Getter for LocationId.
     * Location ID
     * @return Returns the String
     */
    @JsonGetter("location_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getLocationId() {
        return locationId;
    }

    /**
     * Setter for LocationId.
     * Location ID
     * @param locationId Value for String
     */
    @JsonSetter("location_id")
    public void setLocationId(String locationId) {
        this.locationId = locationId;
    }

    /**
     * Getter for ClientToken.
     * A JWT to be used to create the elements.
     * @return Returns the String
     */
    @JsonGetter("client_token")
    public String getClientToken() {
        return clientToken;
    }

    /**
     * Setter for ClientToken.
     * A JWT to be used to create the elements.
     * @param clientToken Value for String
     */
    @JsonSetter("client_token")
    public void setClientToken(String clientToken) {
        this.clientToken = clientToken;
    }

    /**
     * Converts this Data4 into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Data4 [" + "amount=" + amount + ", currency=" + currency + ", clientToken="
                + clientToken + ", action=" + action + ", methods=" + methods + ", taxAmount="
                + taxAmount + ", locationId=" + locationId + "]";
    }

    /**
     * Builds a new {@link Data4.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Data4.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(amount, currency, clientToken)
                .action(getAction())
                .methods(getMethods())
                .taxAmount(getTaxAmount())
                .locationId(getLocationId());
        return builder;
    }

    /**
     * Class to build instances of {@link Data4}.
     */
    public static class Builder {
        private int amount;
        private String currency = "usd";
        private String clientToken;
        private ActionEnum action = ActionEnum.SALE;
        private List<Method> methods;
        private Integer taxAmount;
        private String locationId;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  amount  int value for amount.
         * @param  currency  String value for currency.
         * @param  clientToken  String value for clientToken.
         */
        public Builder(int amount, String currency, String clientToken) {
            this.amount = amount;
            this.currency = currency;
            this.clientToken = clientToken;
        }

        /**
         * Setter for amount.
         * @param  amount  int value for amount.
         * @return Builder
         */
        public Builder amount(int amount) {
            this.amount = amount;
            return this;
        }

        /**
         * Setter for currency.
         * @param  currency  String value for currency.
         * @return Builder
         */
        public Builder currency(String currency) {
            this.currency = currency;
            return this;
        }

        /**
         * Setter for clientToken.
         * @param  clientToken  String value for clientToken.
         * @return Builder
         */
        public Builder clientToken(String clientToken) {
            this.clientToken = clientToken;
            return this;
        }

        /**
         * Setter for action.
         * @param  action  ActionEnum value for action.
         * @return Builder
         */
        public Builder action(ActionEnum action) {
            this.action = action;
            return this;
        }

        /**
         * Setter for methods.
         * @param  methods  List of Method value for methods.
         * @return Builder
         */
        public Builder methods(List<Method> methods) {
            this.methods = methods;
            return this;
        }

        /**
         * Setter for taxAmount.
         * @param  taxAmount  Integer value for taxAmount.
         * @return Builder
         */
        public Builder taxAmount(Integer taxAmount) {
            this.taxAmount = taxAmount;
            return this;
        }

        /**
         * Setter for locationId.
         * @param  locationId  String value for locationId.
         * @return Builder
         */
        public Builder locationId(String locationId) {
            this.locationId = locationId;
            return this;
        }

        /**
         * Builds a new {@link Data4} object using the set fields.
         * @return {@link Data4}
         */
        public Data4 build() {
            return new Data4(amount, currency, clientToken, action, methods, taxAmount, locationId);
        }
    }
}
