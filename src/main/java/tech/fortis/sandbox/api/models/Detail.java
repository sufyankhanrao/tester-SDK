/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package tech.fortis.sandbox.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import java.util.List;

/**
 * This is a model class for Detail type.
 */
public class Detail {
    private String message;
    private List<String> path;
    private String type;
    private Context context;

    /**
     * Default constructor.
     */
    public Detail() {
    }

    /**
     * Initialization constructor.
     * @param  message  String value for message.
     * @param  path  List of String value for path.
     * @param  type  String value for type.
     * @param  context  Context value for context.
     */
    public Detail(
            String message,
            List<String> path,
            String type,
            Context context) {
        this.message = message;
        this.path = path;
        this.type = type;
        this.context = context;
    }

    /**
     * Getter for Message.
     * @return Returns the String
     */
    @JsonGetter("message")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getMessage() {
        return message;
    }

    /**
     * Setter for Message.
     * @param message Value for String
     */
    @JsonSetter("message")
    public void setMessage(String message) {
        this.message = message;
    }

    /**
     * Getter for Path.
     * @return Returns the List of String
     */
    @JsonGetter("path")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<String> getPath() {
        return path;
    }

    /**
     * Setter for Path.
     * @param path Value for List of String
     */
    @JsonSetter("path")
    public void setPath(List<String> path) {
        this.path = path;
    }

    /**
     * Getter for Type.
     * @return Returns the String
     */
    @JsonGetter("type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getType() {
        return type;
    }

    /**
     * Setter for Type.
     * @param type Value for String
     */
    @JsonSetter("type")
    public void setType(String type) {
        this.type = type;
    }

    /**
     * Getter for Context.
     * @return Returns the Context
     */
    @JsonGetter("context")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Context getContext() {
        return context;
    }

    /**
     * Setter for Context.
     * @param context Value for Context
     */
    @JsonSetter("context")
    public void setContext(Context context) {
        this.context = context;
    }

    /**
     * Converts this Detail into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Detail [" + "message=" + message + ", path=" + path + ", type=" + type
                + ", context=" + context + "]";
    }

    /**
     * Builds a new {@link Detail.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Detail.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .message(getMessage())
                .path(getPath())
                .type(getType())
                .context(getContext());
        return builder;
    }

    /**
     * Class to build instances of {@link Detail}.
     */
    public static class Builder {
        private String message;
        private List<String> path;
        private String type;
        private Context context;



        /**
         * Setter for message.
         * @param  message  String value for message.
         * @return Builder
         */
        public Builder message(String message) {
            this.message = message;
            return this;
        }

        /**
         * Setter for path.
         * @param  path  List of String value for path.
         * @return Builder
         */
        public Builder path(List<String> path) {
            this.path = path;
            return this;
        }

        /**
         * Setter for type.
         * @param  type  String value for type.
         * @return Builder
         */
        public Builder type(String type) {
            this.type = type;
            return this;
        }

        /**
         * Setter for context.
         * @param  context  Context value for context.
         * @return Builder
         */
        public Builder context(Context context) {
            this.context = context;
            return this;
        }

        /**
         * Builds a new {@link Detail} object using the set fields.
         * @return {@link Detail}
         */
        public Detail build() {
            return new Detail(message, path, type, context);
        }
    }
}
