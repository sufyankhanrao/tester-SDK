/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package tech.fortis.sandbox.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for LineItem type.
 */
public class LineItem {
    private String alternateTaxId;
    private DebitCreditEnum debitCredit;
    private String description;
    private Double discountAmount;
    private Double discountRate;
    private String productCode;
    private Double quantity;
    private Double taxAmount;
    private Double taxRate;
    private String taxTypeApplied;
    private String taxTypeId;
    private String unitCode;
    private double unitCost;

    /**
     * Default constructor.
     */
    public LineItem() {
    }

    /**
     * Initialization constructor.
     * @param  description  String value for description.
     * @param  productCode  String value for productCode.
     * @param  unitCode  String value for unitCode.
     * @param  unitCost  double value for unitCost.
     * @param  alternateTaxId  String value for alternateTaxId.
     * @param  debitCredit  DebitCreditEnum value for debitCredit.
     * @param  discountAmount  Double value for discountAmount.
     * @param  discountRate  Double value for discountRate.
     * @param  quantity  Double value for quantity.
     * @param  taxAmount  Double value for taxAmount.
     * @param  taxRate  Double value for taxRate.
     * @param  taxTypeApplied  String value for taxTypeApplied.
     * @param  taxTypeId  String value for taxTypeId.
     */
    public LineItem(
            String description,
            String productCode,
            String unitCode,
            double unitCost,
            String alternateTaxId,
            DebitCreditEnum debitCredit,
            Double discountAmount,
            Double discountRate,
            Double quantity,
            Double taxAmount,
            Double taxRate,
            String taxTypeApplied,
            String taxTypeId) {
        this.alternateTaxId = alternateTaxId;
        this.debitCredit = debitCredit;
        this.description = description;
        this.discountAmount = discountAmount;
        this.discountRate = discountRate;
        this.productCode = productCode;
        this.quantity = quantity;
        this.taxAmount = taxAmount;
        this.taxRate = taxRate;
        this.taxTypeApplied = taxTypeApplied;
        this.taxTypeId = taxTypeId;
        this.unitCode = unitCode;
        this.unitCost = unitCost;
    }

    /**
     * Getter for AlternateTaxId.
     * Tax identification number of the merchant that reported the alternate tax amount.
     * @return Returns the String
     */
    @JsonGetter("alternate_tax_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getAlternateTaxId() {
        return alternateTaxId;
    }

    /**
     * Setter for AlternateTaxId.
     * Tax identification number of the merchant that reported the alternate tax amount.
     * @param alternateTaxId Value for String
     */
    @JsonSetter("alternate_tax_id")
    public void setAlternateTaxId(String alternateTaxId) {
        this.alternateTaxId = alternateTaxId;
    }

    /**
     * Getter for DebitCredit.
     * Indicator used to reflect debit (D) or credit (C) transaction. Allowed values: “D”, “C”.
     * @return Returns the DebitCreditEnum
     */
    @JsonGetter("debit_credit")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public DebitCreditEnum getDebitCredit() {
        return debitCredit;
    }

    /**
     * Setter for DebitCredit.
     * Indicator used to reflect debit (D) or credit (C) transaction. Allowed values: “D”, “C”.
     * @param debitCredit Value for DebitCreditEnum
     */
    @JsonSetter("debit_credit")
    public void setDebitCredit(DebitCreditEnum debitCredit) {
        this.debitCredit = debitCredit;
    }

    /**
     * Getter for Description.
     * Description of the item.
     * @return Returns the String
     */
    @JsonGetter("description")
    public String getDescription() {
        return description;
    }

    /**
     * Setter for Description.
     * Description of the item.
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Getter for DiscountAmount.
     * Total discount amount applied against the line item total ,Can accept Two (2) decimal places.
     * @return Returns the Double
     */
    @JsonGetter("discount_amount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getDiscountAmount() {
        return discountAmount;
    }

    /**
     * Setter for DiscountAmount.
     * Total discount amount applied against the line item total ,Can accept Two (2) decimal places.
     * @param discountAmount Value for Double
     */
    @JsonSetter("discount_amount")
    public void setDiscountAmount(Double discountAmount) {
        this.discountAmount = discountAmount;
    }

    /**
     * Getter for DiscountRate.
     * Discount rate for the line item ,Can accept Two (2) decimal places.
     * @return Returns the Double
     */
    @JsonGetter("discount_rate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getDiscountRate() {
        return discountRate;
    }

    /**
     * Setter for DiscountRate.
     * Discount rate for the line item ,Can accept Two (2) decimal places.
     * @param discountRate Value for Double
     */
    @JsonSetter("discount_rate")
    public void setDiscountRate(Double discountRate) {
        this.discountRate = discountRate;
    }

    /**
     * Getter for ProductCode.
     * Merchant-defined description code of the item.
     * @return Returns the String
     */
    @JsonGetter("product_code")
    public String getProductCode() {
        return productCode;
    }

    /**
     * Setter for ProductCode.
     * Merchant-defined description code of the item.
     * @param productCode Value for String
     */
    @JsonSetter("product_code")
    public void setProductCode(String productCode) {
        this.productCode = productCode;
    }

    /**
     * Getter for Quantity.
     * Quantity of the item, can accept Four (4) decimal places.
     * @return Returns the Double
     */
    @JsonGetter("quantity")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getQuantity() {
        return quantity;
    }

    /**
     * Setter for Quantity.
     * Quantity of the item, can accept Four (4) decimal places.
     * @param quantity Value for Double
     */
    @JsonSetter("quantity")
    public void setQuantity(Double quantity) {
        this.quantity = quantity;
    }

    /**
     * Getter for TaxAmount.
     * Amount of any value added taxes, can accept Two (2) decimal places.
     * @return Returns the Double
     */
    @JsonGetter("tax_amount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getTaxAmount() {
        return taxAmount;
    }

    /**
     * Setter for TaxAmount.
     * Amount of any value added taxes, can accept Two (2) decimal places.
     * @param taxAmount Value for Double
     */
    @JsonSetter("tax_amount")
    public void setTaxAmount(Double taxAmount) {
        this.taxAmount = taxAmount;
    }

    /**
     * Getter for TaxRate.
     * Tax rate used to calculate the sales tax amount, can accept 2 decimal places.
     * @return Returns the Double
     */
    @JsonGetter("tax_rate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getTaxRate() {
        return taxRate;
    }

    /**
     * Setter for TaxRate.
     * Tax rate used to calculate the sales tax amount, can accept 2 decimal places.
     * @param taxRate Value for Double
     */
    @JsonSetter("tax_rate")
    public void setTaxRate(Double taxRate) {
        this.taxRate = taxRate;
    }

    /**
     * Getter for TaxTypeApplied.
     * Type of value-added taxes that are being used (Conditional If tax amount is supplied)
     * @return Returns the String
     */
    @JsonGetter("tax_type_applied")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getTaxTypeApplied() {
        return taxTypeApplied;
    }

    /**
     * Setter for TaxTypeApplied.
     * Type of value-added taxes that are being used (Conditional If tax amount is supplied)
     * @param taxTypeApplied Value for String
     */
    @JsonSetter("tax_type_applied")
    public void setTaxTypeApplied(String taxTypeApplied) {
        this.taxTypeApplied = taxTypeApplied;
    }

    /**
     * Getter for TaxTypeId.
     * Indicates the type of tax collected in relationship to a specific tax amount (Conditional If
     * tax amount is supplied)
     * @return Returns the String
     */
    @JsonGetter("tax_type_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getTaxTypeId() {
        return taxTypeId;
    }

    /**
     * Setter for TaxTypeId.
     * Indicates the type of tax collected in relationship to a specific tax amount (Conditional If
     * tax amount is supplied)
     * @param taxTypeId Value for String
     */
    @JsonSetter("tax_type_id")
    public void setTaxTypeId(String taxTypeId) {
        this.taxTypeId = taxTypeId;
    }

    /**
     * Getter for UnitCode.
     * Units of measurement as used in international trade. (See Codes for Units of Measurement
     * below for unit code abbreviations)
     * @return Returns the String
     */
    @JsonGetter("unit_code")
    public String getUnitCode() {
        return unitCode;
    }

    /**
     * Setter for UnitCode.
     * Units of measurement as used in international trade. (See Codes for Units of Measurement
     * below for unit code abbreviations)
     * @param unitCode Value for String
     */
    @JsonSetter("unit_code")
    public void setUnitCode(String unitCode) {
        this.unitCode = unitCode;
    }

    /**
     * Getter for UnitCost.
     * Unit cost of the item ,Can accept Four (4) decimal places.
     * @return Returns the double
     */
    @JsonGetter("unit_cost")
    public double getUnitCost() {
        return unitCost;
    }

    /**
     * Setter for UnitCost.
     * Unit cost of the item ,Can accept Four (4) decimal places.
     * @param unitCost Value for double
     */
    @JsonSetter("unit_cost")
    public void setUnitCost(double unitCost) {
        this.unitCost = unitCost;
    }

    /**
     * Converts this LineItem into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "LineItem [" + "description=" + description + ", productCode=" + productCode
                + ", unitCode=" + unitCode + ", unitCost=" + unitCost + ", alternateTaxId="
                + alternateTaxId + ", debitCredit=" + debitCredit + ", discountAmount="
                + discountAmount + ", discountRate=" + discountRate + ", quantity=" + quantity
                + ", taxAmount=" + taxAmount + ", taxRate=" + taxRate + ", taxTypeApplied="
                + taxTypeApplied + ", taxTypeId=" + taxTypeId + "]";
    }

    /**
     * Builds a new {@link LineItem.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link LineItem.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(description, productCode, unitCode, unitCost)
                .alternateTaxId(getAlternateTaxId())
                .debitCredit(getDebitCredit())
                .discountAmount(getDiscountAmount())
                .discountRate(getDiscountRate())
                .quantity(getQuantity())
                .taxAmount(getTaxAmount())
                .taxRate(getTaxRate())
                .taxTypeApplied(getTaxTypeApplied())
                .taxTypeId(getTaxTypeId());
        return builder;
    }

    /**
     * Class to build instances of {@link LineItem}.
     */
    public static class Builder {
        private String description;
        private String productCode;
        private String unitCode;
        private double unitCost;
        private String alternateTaxId;
        private DebitCreditEnum debitCredit;
        private Double discountAmount;
        private Double discountRate;
        private Double quantity;
        private Double taxAmount;
        private Double taxRate;
        private String taxTypeApplied;
        private String taxTypeId;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  description  String value for description.
         * @param  productCode  String value for productCode.
         * @param  unitCode  String value for unitCode.
         * @param  unitCost  double value for unitCost.
         */
        public Builder(String description, String productCode, String unitCode, double unitCost) {
            this.description = description;
            this.productCode = productCode;
            this.unitCode = unitCode;
            this.unitCost = unitCost;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = description;
            return this;
        }

        /**
         * Setter for productCode.
         * @param  productCode  String value for productCode.
         * @return Builder
         */
        public Builder productCode(String productCode) {
            this.productCode = productCode;
            return this;
        }

        /**
         * Setter for unitCode.
         * @param  unitCode  String value for unitCode.
         * @return Builder
         */
        public Builder unitCode(String unitCode) {
            this.unitCode = unitCode;
            return this;
        }

        /**
         * Setter for unitCost.
         * @param  unitCost  double value for unitCost.
         * @return Builder
         */
        public Builder unitCost(double unitCost) {
            this.unitCost = unitCost;
            return this;
        }

        /**
         * Setter for alternateTaxId.
         * @param  alternateTaxId  String value for alternateTaxId.
         * @return Builder
         */
        public Builder alternateTaxId(String alternateTaxId) {
            this.alternateTaxId = alternateTaxId;
            return this;
        }

        /**
         * Setter for debitCredit.
         * @param  debitCredit  DebitCreditEnum value for debitCredit.
         * @return Builder
         */
        public Builder debitCredit(DebitCreditEnum debitCredit) {
            this.debitCredit = debitCredit;
            return this;
        }

        /**
         * Setter for discountAmount.
         * @param  discountAmount  Double value for discountAmount.
         * @return Builder
         */
        public Builder discountAmount(Double discountAmount) {
            this.discountAmount = discountAmount;
            return this;
        }

        /**
         * Setter for discountRate.
         * @param  discountRate  Double value for discountRate.
         * @return Builder
         */
        public Builder discountRate(Double discountRate) {
            this.discountRate = discountRate;
            return this;
        }

        /**
         * Setter for quantity.
         * @param  quantity  Double value for quantity.
         * @return Builder
         */
        public Builder quantity(Double quantity) {
            this.quantity = quantity;
            return this;
        }

        /**
         * Setter for taxAmount.
         * @param  taxAmount  Double value for taxAmount.
         * @return Builder
         */
        public Builder taxAmount(Double taxAmount) {
            this.taxAmount = taxAmount;
            return this;
        }

        /**
         * Setter for taxRate.
         * @param  taxRate  Double value for taxRate.
         * @return Builder
         */
        public Builder taxRate(Double taxRate) {
            this.taxRate = taxRate;
            return this;
        }

        /**
         * Setter for taxTypeApplied.
         * @param  taxTypeApplied  String value for taxTypeApplied.
         * @return Builder
         */
        public Builder taxTypeApplied(String taxTypeApplied) {
            this.taxTypeApplied = taxTypeApplied;
            return this;
        }

        /**
         * Setter for taxTypeId.
         * @param  taxTypeId  String value for taxTypeId.
         * @return Builder
         */
        public Builder taxTypeId(String taxTypeId) {
            this.taxTypeId = taxTypeId;
            return this;
        }

        /**
         * Builds a new {@link LineItem} object using the set fields.
         * @return {@link LineItem}
         */
        public LineItem build() {
            return new LineItem(description, productCode, unitCode, unitCost, alternateTaxId,
                    debitCredit, discountAmount, discountRate, quantity, taxAmount, taxRate,
                    taxTypeApplied, taxTypeId);
        }
    }
}
