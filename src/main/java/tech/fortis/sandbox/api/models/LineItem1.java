/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package tech.fortis.sandbox.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for LineItem1 type.
 */
public class LineItem1 {
    private String description;
    private String commodityCode;
    private Double discountAmount;
    private Double otherTaxAmount;
    private String productCode;
    private Double quantity;
    private Double taxAmount;
    private Double taxRate;
    private String unitCode;
    private double unitCost;

    /**
     * Default constructor.
     */
    public LineItem1() {
    }

    /**
     * Initialization constructor.
     * @param  description  String value for description.
     * @param  commodityCode  String value for commodityCode.
     * @param  productCode  String value for productCode.
     * @param  unitCode  String value for unitCode.
     * @param  unitCost  double value for unitCost.
     * @param  discountAmount  Double value for discountAmount.
     * @param  otherTaxAmount  Double value for otherTaxAmount.
     * @param  quantity  Double value for quantity.
     * @param  taxAmount  Double value for taxAmount.
     * @param  taxRate  Double value for taxRate.
     */
    public LineItem1(
            String description,
            String commodityCode,
            String productCode,
            String unitCode,
            double unitCost,
            Double discountAmount,
            Double otherTaxAmount,
            Double quantity,
            Double taxAmount,
            Double taxRate) {
        this.description = description;
        this.commodityCode = commodityCode;
        this.discountAmount = discountAmount;
        this.otherTaxAmount = otherTaxAmount;
        this.productCode = productCode;
        this.quantity = quantity;
        this.taxAmount = taxAmount;
        this.taxRate = taxRate;
        this.unitCode = unitCode;
        this.unitCost = unitCost;
    }

    /**
     * Getter for Description.
     * Description of the item.
     * @return Returns the String
     */
    @JsonGetter("description")
    public String getDescription() {
        return description;
    }

    /**
     * Setter for Description.
     * Description of the item.
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Getter for CommodityCode.
     * An international description code of the individual good or service being supplied.
     * @return Returns the String
     */
    @JsonGetter("commodity_code")
    public String getCommodityCode() {
        return commodityCode;
    }

    /**
     * Setter for CommodityCode.
     * An international description code of the individual good or service being supplied.
     * @param commodityCode Value for String
     */
    @JsonSetter("commodity_code")
    public void setCommodityCode(String commodityCode) {
        this.commodityCode = commodityCode;
    }

    /**
     * Getter for DiscountAmount.
     * Total discount amount applied against the line item total ,Can accept Two (2) decimal places.
     * @return Returns the Double
     */
    @JsonGetter("discount_amount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getDiscountAmount() {
        return discountAmount;
    }

    /**
     * Setter for DiscountAmount.
     * Total discount amount applied against the line item total ,Can accept Two (2) decimal places.
     * @param discountAmount Value for Double
     */
    @JsonSetter("discount_amount")
    public void setDiscountAmount(Double discountAmount) {
        this.discountAmount = discountAmount;
    }

    /**
     * Getter for OtherTaxAmount.
     * Used if city or multiple county taxes need to be broken out separately ,Can accept Two (2)
     * decimal places.
     * @return Returns the Double
     */
    @JsonGetter("other_tax_amount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getOtherTaxAmount() {
        return otherTaxAmount;
    }

    /**
     * Setter for OtherTaxAmount.
     * Used if city or multiple county taxes need to be broken out separately ,Can accept Two (2)
     * decimal places.
     * @param otherTaxAmount Value for Double
     */
    @JsonSetter("other_tax_amount")
    public void setOtherTaxAmount(Double otherTaxAmount) {
        this.otherTaxAmount = otherTaxAmount;
    }

    /**
     * Getter for ProductCode.
     * Merchant-defined description code of the item.
     * @return Returns the String
     */
    @JsonGetter("product_code")
    public String getProductCode() {
        return productCode;
    }

    /**
     * Setter for ProductCode.
     * Merchant-defined description code of the item.
     * @param productCode Value for String
     */
    @JsonSetter("product_code")
    public void setProductCode(String productCode) {
        this.productCode = productCode;
    }

    /**
     * Getter for Quantity.
     * Quantity of the item, can accept Four (4) decimal places.
     * @return Returns the Double
     */
    @JsonGetter("quantity")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getQuantity() {
        return quantity;
    }

    /**
     * Setter for Quantity.
     * Quantity of the item, can accept Four (4) decimal places.
     * @param quantity Value for Double
     */
    @JsonSetter("quantity")
    public void setQuantity(Double quantity) {
        this.quantity = quantity;
    }

    /**
     * Getter for TaxAmount.
     * Amount of any value added taxes, can accept Two (2) decimal places.
     * @return Returns the Double
     */
    @JsonGetter("tax_amount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getTaxAmount() {
        return taxAmount;
    }

    /**
     * Setter for TaxAmount.
     * Amount of any value added taxes, can accept Two (2) decimal places.
     * @param taxAmount Value for Double
     */
    @JsonSetter("tax_amount")
    public void setTaxAmount(Double taxAmount) {
        this.taxAmount = taxAmount;
    }

    /**
     * Getter for TaxRate.
     * Tax rate used to calculate the sales tax amount, can accept 2 decimal places.
     * @return Returns the Double
     */
    @JsonGetter("tax_rate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getTaxRate() {
        return taxRate;
    }

    /**
     * Setter for TaxRate.
     * Tax rate used to calculate the sales tax amount, can accept 2 decimal places.
     * @param taxRate Value for Double
     */
    @JsonSetter("tax_rate")
    public void setTaxRate(Double taxRate) {
        this.taxRate = taxRate;
    }

    /**
     * Getter for UnitCode.
     * Units of measurement as used in international trade. (See Codes for Units of Measurement
     * below for unit code abbreviations)
     * @return Returns the String
     */
    @JsonGetter("unit_code")
    public String getUnitCode() {
        return unitCode;
    }

    /**
     * Setter for UnitCode.
     * Units of measurement as used in international trade. (See Codes for Units of Measurement
     * below for unit code abbreviations)
     * @param unitCode Value for String
     */
    @JsonSetter("unit_code")
    public void setUnitCode(String unitCode) {
        this.unitCode = unitCode;
    }

    /**
     * Getter for UnitCost.
     * Unit cost of the item ,Can accept Four (4) decimal places.
     * @return Returns the double
     */
    @JsonGetter("unit_cost")
    public double getUnitCost() {
        return unitCost;
    }

    /**
     * Setter for UnitCost.
     * Unit cost of the item ,Can accept Four (4) decimal places.
     * @param unitCost Value for double
     */
    @JsonSetter("unit_cost")
    public void setUnitCost(double unitCost) {
        this.unitCost = unitCost;
    }

    /**
     * Converts this LineItem1 into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "LineItem1 [" + "description=" + description + ", commodityCode=" + commodityCode
                + ", productCode=" + productCode + ", unitCode=" + unitCode + ", unitCost="
                + unitCost + ", discountAmount=" + discountAmount + ", otherTaxAmount="
                + otherTaxAmount + ", quantity=" + quantity + ", taxAmount=" + taxAmount
                + ", taxRate=" + taxRate + "]";
    }

    /**
     * Builds a new {@link LineItem1.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link LineItem1.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(description, commodityCode, productCode, unitCode, unitCost)
                .discountAmount(getDiscountAmount())
                .otherTaxAmount(getOtherTaxAmount())
                .quantity(getQuantity())
                .taxAmount(getTaxAmount())
                .taxRate(getTaxRate());
        return builder;
    }

    /**
     * Class to build instances of {@link LineItem1}.
     */
    public static class Builder {
        private String description;
        private String commodityCode;
        private String productCode;
        private String unitCode;
        private double unitCost;
        private Double discountAmount;
        private Double otherTaxAmount;
        private Double quantity;
        private Double taxAmount;
        private Double taxRate;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  description  String value for description.
         * @param  commodityCode  String value for commodityCode.
         * @param  productCode  String value for productCode.
         * @param  unitCode  String value for unitCode.
         * @param  unitCost  double value for unitCost.
         */
        public Builder(String description, String commodityCode, String productCode,
                String unitCode, double unitCost) {
            this.description = description;
            this.commodityCode = commodityCode;
            this.productCode = productCode;
            this.unitCode = unitCode;
            this.unitCost = unitCost;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = description;
            return this;
        }

        /**
         * Setter for commodityCode.
         * @param  commodityCode  String value for commodityCode.
         * @return Builder
         */
        public Builder commodityCode(String commodityCode) {
            this.commodityCode = commodityCode;
            return this;
        }

        /**
         * Setter for productCode.
         * @param  productCode  String value for productCode.
         * @return Builder
         */
        public Builder productCode(String productCode) {
            this.productCode = productCode;
            return this;
        }

        /**
         * Setter for unitCode.
         * @param  unitCode  String value for unitCode.
         * @return Builder
         */
        public Builder unitCode(String unitCode) {
            this.unitCode = unitCode;
            return this;
        }

        /**
         * Setter for unitCost.
         * @param  unitCost  double value for unitCost.
         * @return Builder
         */
        public Builder unitCost(double unitCost) {
            this.unitCost = unitCost;
            return this;
        }

        /**
         * Setter for discountAmount.
         * @param  discountAmount  Double value for discountAmount.
         * @return Builder
         */
        public Builder discountAmount(Double discountAmount) {
            this.discountAmount = discountAmount;
            return this;
        }

        /**
         * Setter for otherTaxAmount.
         * @param  otherTaxAmount  Double value for otherTaxAmount.
         * @return Builder
         */
        public Builder otherTaxAmount(Double otherTaxAmount) {
            this.otherTaxAmount = otherTaxAmount;
            return this;
        }

        /**
         * Setter for quantity.
         * @param  quantity  Double value for quantity.
         * @return Builder
         */
        public Builder quantity(Double quantity) {
            this.quantity = quantity;
            return this;
        }

        /**
         * Setter for taxAmount.
         * @param  taxAmount  Double value for taxAmount.
         * @return Builder
         */
        public Builder taxAmount(Double taxAmount) {
            this.taxAmount = taxAmount;
            return this;
        }

        /**
         * Setter for taxRate.
         * @param  taxRate  Double value for taxRate.
         * @return Builder
         */
        public Builder taxRate(Double taxRate) {
            this.taxRate = taxRate;
            return this;
        }

        /**
         * Builds a new {@link LineItem1} object using the set fields.
         * @return {@link LineItem1}
         */
        public LineItem1 build() {
            return new LineItem1(description, commodityCode, productCode, unitCode, unitCost,
                    discountAmount, otherTaxAmount, quantity, taxAmount, taxRate);
        }
    }
}
