/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package tech.fortis.sandbox.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.LocalDateTime;
import java.util.List;
import tech.fortis.sandbox.api.DateTimeHelper;

/**
 * This is a model class for List10 type.
 */
public class List10 {
    private List<AdditionalAmount> additionalAmounts;
    private String billingCity;
    private String billingPhone;
    private String billingState;
    private String billingStreet;
    private String billingZip;
    private String checkinDate;
    private String checkoutDate;
    private String clerkNumber;
    private String contactApiId;
    private String contactId;
    private String customData;
    private String customerId;
    private String customerIp;
    private String description;
    private String dlNumber;
    private String dlState;
    private String dobYear;
    private Boolean iiasInd;
    private String imageFront;
    private String imageBack;
    private Boolean installment;
    private Double installmentNumber;
    private Double installmentCount;
    private String locationApiId;
    private String locationId;
    private Boolean noShow;
    private String notificationEmailAddress;
    private String orderNum;
    private String poNumber;
    private String previousTransactionId;
    private String productTransactionId;
    private String quickInvoiceId;
    private Boolean recurring;
    private Double recurringNumber;
    private String roomNum;
    private Double roomRate;
    private Boolean saveAccount;
    private String saveAccountTitle;
    private String settleDate;
    private Integer statusId;
    private Double subtotalAmount;
    private Double surchargeAmount;
    private String tags;
    private String safe;
    private Double tax;
    private String terminalId;
    private Integer termsAgree;
    private String termsAgreeIp;
    private Integer ticket;
    private Double tipAmount;
    private double transactionAmount;
    private String transactionApiId;
    private String transactionC1;
    private String transactionC2;
    private String transactionC3;
    private String transactionC4;
    private Integer trxSourceId;
    private String accountHolderName;
    private String accountNumber;
    private String accountType;
    private String accountVaultApiId;
    private String accountVaultId;
    private String achIdentifier;
    private AchSecCodeEnum achSecCode;
    private Boolean advanceDeposit;
    private Double authAmount;
    private String authCode;
    private AvsEnum avs;
    private String avsEnhanced;
    private Boolean cardholderPresent;
    private Boolean cardPresent;
    private String checkNumber;
    private LocalDateTime createdTs;
    private String cvv;
    private String cvvResponse;
    private EFormatEnum eFormat;
    private String eTrackData;
    private String eSerialNumber;
    private EntryModeIdEnum entryModeId;
    private String emvReceiptData;
    private String firstSix;
    private String id;
    private String lastFour;
    private LocalDateTime modifiedTs;
    private PaymentMethod4Enum paymentMethod;
    private String secureAuthData;
    private Integer secureProtocolVersion;
    private Integer secureCollectionIndicator;
    private String secureCrytogram;
    private String secureDirectoryServerTransactionId;
    private String secureEcommUrl;
    private String terminalSerialNumber;
    private Boolean threedsecure;
    private String trackData;
    private String transactionSettlementStatus;
    private String chargeBackDate;
    private Boolean isRecurring;
    private String notificationEmailSent;
    private String par;
    private Double reasonCodeId;
    private String recurringId;
    private String transactionBatchId;
    private TypeIdEnum typeId;
    private String verbiage;
    private LocalDateTime voidDate;
    private String batch;
    private String responseMessage;
    private String returnDate;

    /**
     * Default constructor.
     */
    public List10() {
    }

    /**
     * Initialization constructor.
     * @param  transactionAmount  double value for transactionAmount.
     * @param  createdTs  LocalDateTime value for createdTs.
     * @param  id  String value for id.
     * @param  modifiedTs  LocalDateTime value for modifiedTs.
     * @param  paymentMethod  PaymentMethod4Enum value for paymentMethod.
     * @param  additionalAmounts  List of AdditionalAmount value for additionalAmounts.
     * @param  billingCity  String value for billingCity.
     * @param  billingPhone  String value for billingPhone.
     * @param  billingState  String value for billingState.
     * @param  billingStreet  String value for billingStreet.
     * @param  billingZip  String value for billingZip.
     * @param  checkinDate  String value for checkinDate.
     * @param  checkoutDate  String value for checkoutDate.
     * @param  clerkNumber  String value for clerkNumber.
     * @param  contactApiId  String value for contactApiId.
     * @param  contactId  String value for contactId.
     * @param  customData  String value for customData.
     * @param  customerId  String value for customerId.
     * @param  customerIp  String value for customerIp.
     * @param  description  String value for description.
     * @param  dlNumber  String value for dlNumber.
     * @param  dlState  String value for dlState.
     * @param  dobYear  String value for dobYear.
     * @param  iiasInd  Boolean value for iiasInd.
     * @param  imageFront  String value for imageFront.
     * @param  imageBack  String value for imageBack.
     * @param  installment  Boolean value for installment.
     * @param  installmentNumber  Double value for installmentNumber.
     * @param  installmentCount  Double value for installmentCount.
     * @param  locationApiId  String value for locationApiId.
     * @param  locationId  String value for locationId.
     * @param  noShow  Boolean value for noShow.
     * @param  notificationEmailAddress  String value for notificationEmailAddress.
     * @param  orderNum  String value for orderNum.
     * @param  poNumber  String value for poNumber.
     * @param  previousTransactionId  String value for previousTransactionId.
     * @param  productTransactionId  String value for productTransactionId.
     * @param  quickInvoiceId  String value for quickInvoiceId.
     * @param  recurring  Boolean value for recurring.
     * @param  recurringNumber  Double value for recurringNumber.
     * @param  roomNum  String value for roomNum.
     * @param  roomRate  Double value for roomRate.
     * @param  saveAccount  Boolean value for saveAccount.
     * @param  saveAccountTitle  String value for saveAccountTitle.
     * @param  settleDate  String value for settleDate.
     * @param  statusId  Integer value for statusId.
     * @param  subtotalAmount  Double value for subtotalAmount.
     * @param  surchargeAmount  Double value for surchargeAmount.
     * @param  tags  String value for tags.
     * @param  safe  String value for safe.
     * @param  tax  Double value for tax.
     * @param  terminalId  String value for terminalId.
     * @param  termsAgree  Integer value for termsAgree.
     * @param  termsAgreeIp  String value for termsAgreeIp.
     * @param  ticket  Integer value for ticket.
     * @param  tipAmount  Double value for tipAmount.
     * @param  transactionApiId  String value for transactionApiId.
     * @param  transactionC1  String value for transactionC1.
     * @param  transactionC2  String value for transactionC2.
     * @param  transactionC3  String value for transactionC3.
     * @param  transactionC4  String value for transactionC4.
     * @param  trxSourceId  Integer value for trxSourceId.
     * @param  accountHolderName  String value for accountHolderName.
     * @param  accountNumber  String value for accountNumber.
     * @param  accountType  String value for accountType.
     * @param  accountVaultApiId  String value for accountVaultApiId.
     * @param  accountVaultId  String value for accountVaultId.
     * @param  achIdentifier  String value for achIdentifier.
     * @param  achSecCode  AchSecCodeEnum value for achSecCode.
     * @param  advanceDeposit  Boolean value for advanceDeposit.
     * @param  authAmount  Double value for authAmount.
     * @param  authCode  String value for authCode.
     * @param  avs  AvsEnum value for avs.
     * @param  avsEnhanced  String value for avsEnhanced.
     * @param  cardholderPresent  Boolean value for cardholderPresent.
     * @param  cardPresent  Boolean value for cardPresent.
     * @param  checkNumber  String value for checkNumber.
     * @param  cvv  String value for cvv.
     * @param  cvvResponse  String value for cvvResponse.
     * @param  eFormat  EFormatEnum value for eFormat.
     * @param  eTrackData  String value for eTrackData.
     * @param  eSerialNumber  String value for eSerialNumber.
     * @param  entryModeId  EntryModeIdEnum value for entryModeId.
     * @param  emvReceiptData  String value for emvReceiptData.
     * @param  firstSix  String value for firstSix.
     * @param  lastFour  String value for lastFour.
     * @param  secureAuthData  String value for secureAuthData.
     * @param  secureProtocolVersion  Integer value for secureProtocolVersion.
     * @param  secureCollectionIndicator  Integer value for secureCollectionIndicator.
     * @param  secureCrytogram  String value for secureCrytogram.
     * @param  secureDirectoryServerTransactionId  String value for
     *         secureDirectoryServerTransactionId.
     * @param  secureEcommUrl  String value for secureEcommUrl.
     * @param  terminalSerialNumber  String value for terminalSerialNumber.
     * @param  threedsecure  Boolean value for threedsecure.
     * @param  trackData  String value for trackData.
     * @param  transactionSettlementStatus  String value for transactionSettlementStatus.
     * @param  chargeBackDate  String value for chargeBackDate.
     * @param  isRecurring  Boolean value for isRecurring.
     * @param  notificationEmailSent  String value for notificationEmailSent.
     * @param  par  String value for par.
     * @param  reasonCodeId  Double value for reasonCodeId.
     * @param  recurringId  String value for recurringId.
     * @param  transactionBatchId  String value for transactionBatchId.
     * @param  typeId  TypeIdEnum value for typeId.
     * @param  verbiage  String value for verbiage.
     * @param  voidDate  LocalDateTime value for voidDate.
     * @param  batch  String value for batch.
     * @param  responseMessage  String value for responseMessage.
     * @param  returnDate  String value for returnDate.
     */
    public List10(
            double transactionAmount,
            LocalDateTime createdTs,
            String id,
            LocalDateTime modifiedTs,
            PaymentMethod4Enum paymentMethod,
            List<AdditionalAmount> additionalAmounts,
            String billingCity,
            String billingPhone,
            String billingState,
            String billingStreet,
            String billingZip,
            String checkinDate,
            String checkoutDate,
            String clerkNumber,
            String contactApiId,
            String contactId,
            String customData,
            String customerId,
            String customerIp,
            String description,
            String dlNumber,
            String dlState,
            String dobYear,
            Boolean iiasInd,
            String imageFront,
            String imageBack,
            Boolean installment,
            Double installmentNumber,
            Double installmentCount,
            String locationApiId,
            String locationId,
            Boolean noShow,
            String notificationEmailAddress,
            String orderNum,
            String poNumber,
            String previousTransactionId,
            String productTransactionId,
            String quickInvoiceId,
            Boolean recurring,
            Double recurringNumber,
            String roomNum,
            Double roomRate,
            Boolean saveAccount,
            String saveAccountTitle,
            String settleDate,
            Integer statusId,
            Double subtotalAmount,
            Double surchargeAmount,
            String tags,
            String safe,
            Double tax,
            String terminalId,
            Integer termsAgree,
            String termsAgreeIp,
            Integer ticket,
            Double tipAmount,
            String transactionApiId,
            String transactionC1,
            String transactionC2,
            String transactionC3,
            String transactionC4,
            Integer trxSourceId,
            String accountHolderName,
            String accountNumber,
            String accountType,
            String accountVaultApiId,
            String accountVaultId,
            String achIdentifier,
            AchSecCodeEnum achSecCode,
            Boolean advanceDeposit,
            Double authAmount,
            String authCode,
            AvsEnum avs,
            String avsEnhanced,
            Boolean cardholderPresent,
            Boolean cardPresent,
            String checkNumber,
            String cvv,
            String cvvResponse,
            EFormatEnum eFormat,
            String eTrackData,
            String eSerialNumber,
            EntryModeIdEnum entryModeId,
            String emvReceiptData,
            String firstSix,
            String lastFour,
            String secureAuthData,
            Integer secureProtocolVersion,
            Integer secureCollectionIndicator,
            String secureCrytogram,
            String secureDirectoryServerTransactionId,
            String secureEcommUrl,
            String terminalSerialNumber,
            Boolean threedsecure,
            String trackData,
            String transactionSettlementStatus,
            String chargeBackDate,
            Boolean isRecurring,
            String notificationEmailSent,
            String par,
            Double reasonCodeId,
            String recurringId,
            String transactionBatchId,
            TypeIdEnum typeId,
            String verbiage,
            LocalDateTime voidDate,
            String batch,
            String responseMessage,
            String returnDate) {
        this.additionalAmounts = additionalAmounts;
        this.billingCity = billingCity;
        this.billingPhone = billingPhone;
        this.billingState = billingState;
        this.billingStreet = billingStreet;
        this.billingZip = billingZip;
        this.checkinDate = checkinDate;
        this.checkoutDate = checkoutDate;
        this.clerkNumber = clerkNumber;
        this.contactApiId = contactApiId;
        this.contactId = contactId;
        this.customData = customData;
        this.customerId = customerId;
        this.customerIp = customerIp;
        this.description = description;
        this.dlNumber = dlNumber;
        this.dlState = dlState;
        this.dobYear = dobYear;
        this.iiasInd = iiasInd;
        this.imageFront = imageFront;
        this.imageBack = imageBack;
        this.installment = installment;
        this.installmentNumber = installmentNumber;
        this.installmentCount = installmentCount;
        this.locationApiId = locationApiId;
        this.locationId = locationId;
        this.noShow = noShow;
        this.notificationEmailAddress = notificationEmailAddress;
        this.orderNum = orderNum;
        this.poNumber = poNumber;
        this.previousTransactionId = previousTransactionId;
        this.productTransactionId = productTransactionId;
        this.quickInvoiceId = quickInvoiceId;
        this.recurring = recurring;
        this.recurringNumber = recurringNumber;
        this.roomNum = roomNum;
        this.roomRate = roomRate;
        this.saveAccount = saveAccount;
        this.saveAccountTitle = saveAccountTitle;
        this.settleDate = settleDate;
        this.statusId = statusId;
        this.subtotalAmount = subtotalAmount;
        this.surchargeAmount = surchargeAmount;
        this.tags = tags;
        this.safe = safe;
        this.tax = tax;
        this.terminalId = terminalId;
        this.termsAgree = termsAgree;
        this.termsAgreeIp = termsAgreeIp;
        this.ticket = ticket;
        this.tipAmount = tipAmount;
        this.transactionAmount = transactionAmount;
        this.transactionApiId = transactionApiId;
        this.transactionC1 = transactionC1;
        this.transactionC2 = transactionC2;
        this.transactionC3 = transactionC3;
        this.transactionC4 = transactionC4;
        this.trxSourceId = trxSourceId;
        this.accountHolderName = accountHolderName;
        this.accountNumber = accountNumber;
        this.accountType = accountType;
        this.accountVaultApiId = accountVaultApiId;
        this.accountVaultId = accountVaultId;
        this.achIdentifier = achIdentifier;
        this.achSecCode = achSecCode;
        this.advanceDeposit = advanceDeposit;
        this.authAmount = authAmount;
        this.authCode = authCode;
        this.avs = avs;
        this.avsEnhanced = avsEnhanced;
        this.cardholderPresent = cardholderPresent;
        this.cardPresent = cardPresent;
        this.checkNumber = checkNumber;
        this.createdTs = createdTs;
        this.cvv = cvv;
        this.cvvResponse = cvvResponse;
        this.eFormat = eFormat;
        this.eTrackData = eTrackData;
        this.eSerialNumber = eSerialNumber;
        this.entryModeId = entryModeId;
        this.emvReceiptData = emvReceiptData;
        this.firstSix = firstSix;
        this.id = id;
        this.lastFour = lastFour;
        this.modifiedTs = modifiedTs;
        this.paymentMethod = paymentMethod;
        this.secureAuthData = secureAuthData;
        this.secureProtocolVersion = secureProtocolVersion;
        this.secureCollectionIndicator = secureCollectionIndicator;
        this.secureCrytogram = secureCrytogram;
        this.secureDirectoryServerTransactionId = secureDirectoryServerTransactionId;
        this.secureEcommUrl = secureEcommUrl;
        this.terminalSerialNumber = terminalSerialNumber;
        this.threedsecure = threedsecure;
        this.trackData = trackData;
        this.transactionSettlementStatus = transactionSettlementStatus;
        this.chargeBackDate = chargeBackDate;
        this.isRecurring = isRecurring;
        this.notificationEmailSent = notificationEmailSent;
        this.par = par;
        this.reasonCodeId = reasonCodeId;
        this.recurringId = recurringId;
        this.transactionBatchId = transactionBatchId;
        this.typeId = typeId;
        this.verbiage = verbiage;
        this.voidDate = voidDate;
        this.batch = batch;
        this.responseMessage = responseMessage;
        this.returnDate = returnDate;
    }

    /**
     * Getter for AdditionalAmounts.
     * Additional amounts
     * @return Returns the List of AdditionalAmount
     */
    @JsonGetter("additional_amounts")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<AdditionalAmount> getAdditionalAmounts() {
        return additionalAmounts;
    }

    /**
     * Setter for AdditionalAmounts.
     * Additional amounts
     * @param additionalAmounts Value for List of AdditionalAmount
     */
    @JsonSetter("additional_amounts")
    public void setAdditionalAmounts(List<AdditionalAmount> additionalAmounts) {
        this.additionalAmounts = additionalAmounts;
    }

    /**
     * Getter for BillingCity.
     * The City portion of the address associated with the Credit Card (CC) or Bank Account (ACH).
     * @return Returns the String
     */
    @JsonGetter("billing_city")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getBillingCity() {
        return billingCity;
    }

    /**
     * Setter for BillingCity.
     * The City portion of the address associated with the Credit Card (CC) or Bank Account (ACH).
     * @param billingCity Value for String
     */
    @JsonSetter("billing_city")
    public void setBillingCity(String billingCity) {
        this.billingCity = billingCity;
    }

    /**
     * Getter for BillingPhone.
     * The Phone # to be used to contact Payer if there are any issues processing a transaction.
     * @return Returns the String
     */
    @JsonGetter("billing_phone")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getBillingPhone() {
        return billingPhone;
    }

    /**
     * Setter for BillingPhone.
     * The Phone # to be used to contact Payer if there are any issues processing a transaction.
     * @param billingPhone Value for String
     */
    @JsonSetter("billing_phone")
    public void setBillingPhone(String billingPhone) {
        this.billingPhone = billingPhone;
    }

    /**
     * Getter for BillingState.
     * The State portion of the address associated with the Credit Card (CC) or Bank Account (ACH).
     * @return Returns the String
     */
    @JsonGetter("billing_state")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getBillingState() {
        return billingState;
    }

    /**
     * Setter for BillingState.
     * The State portion of the address associated with the Credit Card (CC) or Bank Account (ACH).
     * @param billingState Value for String
     */
    @JsonSetter("billing_state")
    public void setBillingState(String billingState) {
        this.billingState = billingState;
    }

    /**
     * Getter for BillingStreet.
     * The Street portion of the address associated with the Credit Card (CC) or Bank Account (ACH).
     * @return Returns the String
     */
    @JsonGetter("billing_street")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getBillingStreet() {
        return billingStreet;
    }

    /**
     * Setter for BillingStreet.
     * The Street portion of the address associated with the Credit Card (CC) or Bank Account (ACH).
     * @param billingStreet Value for String
     */
    @JsonSetter("billing_street")
    public void setBillingStreet(String billingStreet) {
        this.billingStreet = billingStreet;
    }

    /**
     * Getter for BillingZip.
     * The Zip or 'Postal Code' portion of the address associated with the Credit Card (CC) or Bank
     * Account (ACH).
     * @return Returns the String
     */
    @JsonGetter("billing_zip")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getBillingZip() {
        return billingZip;
    }

    /**
     * Setter for BillingZip.
     * The Zip or 'Postal Code' portion of the address associated with the Credit Card (CC) or Bank
     * Account (ACH).
     * @param billingZip Value for String
     */
    @JsonSetter("billing_zip")
    public void setBillingZip(String billingZip) {
        this.billingZip = billingZip;
    }

    /**
     * Getter for CheckinDate.
     * Checkin Date - The time difference between checkin_date and checkout_date must be less than
     * or equal to 99 days.
     * @return Returns the String
     */
    @JsonGetter("checkin_date")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCheckinDate() {
        return checkinDate;
    }

    /**
     * Setter for CheckinDate.
     * Checkin Date - The time difference between checkin_date and checkout_date must be less than
     * or equal to 99 days.
     * @param checkinDate Value for String
     */
    @JsonSetter("checkin_date")
    public void setCheckinDate(String checkinDate) {
        this.checkinDate = checkinDate;
    }

    /**
     * Getter for CheckoutDate.
     * Checkout Date - The time difference between checkin_date and checkout_date must be less than
     * or equal to 99 days.
     * @return Returns the String
     */
    @JsonGetter("checkout_date")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCheckoutDate() {
        return checkoutDate;
    }

    /**
     * Setter for CheckoutDate.
     * Checkout Date - The time difference between checkin_date and checkout_date must be less than
     * or equal to 99 days.
     * @param checkoutDate Value for String
     */
    @JsonSetter("checkout_date")
    public void setCheckoutDate(String checkoutDate) {
        this.checkoutDate = checkoutDate;
    }

    /**
     * Getter for ClerkNumber.
     * Clerk or Employee Identifier
     * @return Returns the String
     */
    @JsonGetter("clerk_number")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getClerkNumber() {
        return clerkNumber;
    }

    /**
     * Setter for ClerkNumber.
     * Clerk or Employee Identifier
     * @param clerkNumber Value for String
     */
    @JsonSetter("clerk_number")
    public void setClerkNumber(String clerkNumber) {
        this.clerkNumber = clerkNumber;
    }

    /**
     * Getter for ContactApiId.
     * This can be supplied in place of contact_id if you would like to use a contact for the
     * transaction and are using your own custom api_id's to track contacts in the system.
     * @return Returns the String
     */
    @JsonGetter("contact_api_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getContactApiId() {
        return contactApiId;
    }

    /**
     * Setter for ContactApiId.
     * This can be supplied in place of contact_id if you would like to use a contact for the
     * transaction and are using your own custom api_id's to track contacts in the system.
     * @param contactApiId Value for String
     */
    @JsonSetter("contact_api_id")
    public void setContactApiId(String contactApiId) {
        this.contactApiId = contactApiId;
    }

    /**
     * Getter for ContactId.
     * If contact_id is provided, ensure it belongs to the same location as the transaction. You
     * cannot move transaction across locations.
     * @return Returns the String
     */
    @JsonGetter("contact_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getContactId() {
        return contactId;
    }

    /**
     * Setter for ContactId.
     * If contact_id is provided, ensure it belongs to the same location as the transaction. You
     * cannot move transaction across locations.
     * @param contactId Value for String
     */
    @JsonSetter("contact_id")
    public void setContactId(String contactId) {
        this.contactId = contactId;
    }

    /**
     * Getter for CustomData.
     * A field that allows custom JSON to be entered to store extra data.
     * @return Returns the String
     */
    @JsonGetter("custom_data")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCustomData() {
        return customData;
    }

    /**
     * Setter for CustomData.
     * A field that allows custom JSON to be entered to store extra data.
     * @param customData Value for String
     */
    @JsonSetter("custom_data")
    public void setCustomData(String customData) {
        this.customData = customData;
    }

    /**
     * Getter for CustomerId.
     * Can be used by Merchants to identify Contacts in our system by an ID from another system.
     * @return Returns the String
     */
    @JsonGetter("customer_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCustomerId() {
        return customerId;
    }

    /**
     * Setter for CustomerId.
     * Can be used by Merchants to identify Contacts in our system by an ID from another system.
     * @param customerId Value for String
     */
    @JsonSetter("customer_id")
    public void setCustomerId(String customerId) {
        this.customerId = customerId;
    }

    /**
     * Getter for CustomerIp.
     * Can be used to store customer IP Address
     * @return Returns the String
     */
    @JsonGetter("customer_ip")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCustomerIp() {
        return customerIp;
    }

    /**
     * Setter for CustomerIp.
     * Can be used to store customer IP Address
     * @param customerIp Value for String
     */
    @JsonSetter("customer_ip")
    public void setCustomerIp(String customerIp) {
        this.customerIp = customerIp;
    }

    /**
     * Getter for Description.
     * Description
     * @return Returns the String
     */
    @JsonGetter("description")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getDescription() {
        return description;
    }

    /**
     * Setter for Description.
     * Description
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Getter for DlNumber.
     * Used for certain ACH transactions where Driver's License is required by the terminal being
     * used.
     * @return Returns the String
     */
    @JsonGetter("dl_number")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getDlNumber() {
        return dlNumber;
    }

    /**
     * Setter for DlNumber.
     * Used for certain ACH transactions where Driver's License is required by the terminal being
     * used.
     * @param dlNumber Value for String
     */
    @JsonSetter("dl_number")
    public void setDlNumber(String dlNumber) {
        this.dlNumber = dlNumber;
    }

    /**
     * Getter for DlState.
     * Used for certain ACH transactions where Driver's License is required by the terminal being
     * used.
     * @return Returns the String
     */
    @JsonGetter("dl_state")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getDlState() {
        return dlState;
    }

    /**
     * Setter for DlState.
     * Used for certain ACH transactions where Driver's License is required by the terminal being
     * used.
     * @param dlState Value for String
     */
    @JsonSetter("dl_state")
    public void setDlState(String dlState) {
        this.dlState = dlState;
    }

    /**
     * Getter for DobYear.
     * Required for certain ACH transactions where Identity Verification has been enabled for the
     * terminal.  Either ssn4 or dob_year will need to be passed in this scenario but NOT BOTH.
     * @return Returns the String
     */
    @JsonGetter("dob_year")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getDobYear() {
        return dobYear;
    }

    /**
     * Setter for DobYear.
     * Required for certain ACH transactions where Identity Verification has been enabled for the
     * terminal.  Either ssn4 or dob_year will need to be passed in this scenario but NOT BOTH.
     * @param dobYear Value for String
     */
    @JsonSetter("dob_year")
    public void setDobYear(String dobYear) {
        this.dobYear = dobYear;
    }

    /**
     * Getter for IiasInd.
     * Possible values are '0', '1','2'
     * @return Returns the Boolean
     */
    @JsonGetter("iias_ind")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIiasInd() {
        return iiasInd;
    }

    /**
     * Setter for IiasInd.
     * Possible values are '0', '1','2'
     * @param iiasInd Value for Boolean
     */
    @JsonSetter("iias_ind")
    public void setIiasInd(Boolean iiasInd) {
        this.iiasInd = iiasInd;
    }

    /**
     * Getter for ImageFront.
     * A base64 encoded string for the image.  Used with Check21 ACH transactions.
     * @return Returns the String
     */
    @JsonGetter("image_front")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getImageFront() {
        return imageFront;
    }

    /**
     * Setter for ImageFront.
     * A base64 encoded string for the image.  Used with Check21 ACH transactions.
     * @param imageFront Value for String
     */
    @JsonSetter("image_front")
    public void setImageFront(String imageFront) {
        this.imageFront = imageFront;
    }

    /**
     * Getter for ImageBack.
     * A base64 encoded string for the image.  Used with Check21 ACH transactions.
     * @return Returns the String
     */
    @JsonGetter("image_back")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getImageBack() {
        return imageBack;
    }

    /**
     * Setter for ImageBack.
     * A base64 encoded string for the image.  Used with Check21 ACH transactions.
     * @param imageBack Value for String
     */
    @JsonSetter("image_back")
    public void setImageBack(String imageBack) {
        this.imageBack = imageBack;
    }

    /**
     * Getter for Installment.
     * Flag that is allowed to be passed on card not present industries to signify the transaction
     * is a fixed installment plan transaction.
     * @return Returns the Boolean
     */
    @JsonGetter("installment")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getInstallment() {
        return installment;
    }

    /**
     * Setter for Installment.
     * Flag that is allowed to be passed on card not present industries to signify the transaction
     * is a fixed installment plan transaction.
     * @param installment Value for Boolean
     */
    @JsonSetter("installment")
    public void setInstallment(Boolean installment) {
        this.installment = installment;
    }

    /**
     * Getter for InstallmentNumber.
     * If this is a fixed installment plan and installment field is being passed as 1, then this
     * field must have a vlue of 1-999 specifying the current installment number that is running.
     * @return Returns the Double
     */
    @JsonGetter("installment_number")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getInstallmentNumber() {
        return installmentNumber;
    }

    /**
     * Setter for InstallmentNumber.
     * If this is a fixed installment plan and installment field is being passed as 1, then this
     * field must have a vlue of 1-999 specifying the current installment number that is running.
     * @param installmentNumber Value for Double
     */
    @JsonSetter("installment_number")
    public void setInstallmentNumber(Double installmentNumber) {
        this.installmentNumber = installmentNumber;
    }

    /**
     * Getter for InstallmentCount.
     * If this is a fixed installment plan and installment field is being passed as 1, then this
     * field must have a vlue of 1-999 specifying the total number of installments on the plan. This
     * number must be grater than or equal to installment_number.
     * @return Returns the Double
     */
    @JsonGetter("installment_count")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getInstallmentCount() {
        return installmentCount;
    }

    /**
     * Setter for InstallmentCount.
     * If this is a fixed installment plan and installment field is being passed as 1, then this
     * field must have a vlue of 1-999 specifying the total number of installments on the plan. This
     * number must be grater than or equal to installment_number.
     * @param installmentCount Value for Double
     */
    @JsonSetter("installment_count")
    public void setInstallmentCount(Double installmentCount) {
        this.installmentCount = installmentCount;
    }

    /**
     * Getter for LocationApiId.
     * This can be supplied in place of location_id for the transaction if you are using your own
     * custom api_id's for your locations.
     * @return Returns the String
     */
    @JsonGetter("location_api_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getLocationApiId() {
        return locationApiId;
    }

    /**
     * Setter for LocationApiId.
     * This can be supplied in place of location_id for the transaction if you are using your own
     * custom api_id's for your locations.
     * @param locationApiId Value for String
     */
    @JsonSetter("location_api_id")
    public void setLocationApiId(String locationApiId) {
        this.locationApiId = locationApiId;
    }

    /**
     * Getter for LocationId.
     * A valid Location Id to associate the transaction with.
     * @return Returns the String
     */
    @JsonGetter("location_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getLocationId() {
        return locationId;
    }

    /**
     * Setter for LocationId.
     * A valid Location Id to associate the transaction with.
     * @param locationId Value for String
     */
    @JsonSetter("location_id")
    public void setLocationId(String locationId) {
        this.locationId = locationId;
    }

    /**
     * Getter for NoShow.
     * Used in Lodging
     * @return Returns the Boolean
     */
    @JsonGetter("no_show")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getNoShow() {
        return noShow;
    }

    /**
     * Setter for NoShow.
     * Used in Lodging
     * @param noShow Value for Boolean
     */
    @JsonSetter("no_show")
    public void setNoShow(Boolean noShow) {
        this.noShow = noShow;
    }

    /**
     * Getter for NotificationEmailAddress.
     * If email is supplied then receipt will be emailed
     * @return Returns the String
     */
    @JsonGetter("notification_email_address")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getNotificationEmailAddress() {
        return notificationEmailAddress;
    }

    /**
     * Setter for NotificationEmailAddress.
     * If email is supplied then receipt will be emailed
     * @param notificationEmailAddress Value for String
     */
    @JsonSetter("notification_email_address")
    public void setNotificationEmailAddress(String notificationEmailAddress) {
        this.notificationEmailAddress = notificationEmailAddress;
    }

    /**
     * Getter for OrderNum.
     * Required for CC transactions , if merchant's deposit account's duplicate check per batch has
     * 'order_num' field
     * @return Returns the String
     */
    @JsonGetter("order_num")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getOrderNum() {
        return orderNum;
    }

    /**
     * Setter for OrderNum.
     * Required for CC transactions , if merchant's deposit account's duplicate check per batch has
     * 'order_num' field
     * @param orderNum Value for String
     */
    @JsonSetter("order_num")
    public void setOrderNum(String orderNum) {
        this.orderNum = orderNum;
    }

    /**
     * Getter for PoNumber.
     * Purchase Order number
     * @return Returns the String
     */
    @JsonGetter("po_number")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getPoNumber() {
        return poNumber;
    }

    /**
     * Setter for PoNumber.
     * Purchase Order number
     * @param poNumber Value for String
     */
    @JsonSetter("po_number")
    public void setPoNumber(String poNumber) {
        this.poNumber = poNumber;
    }

    /**
     * Getter for PreviousTransactionId.
     * previous_transaction_id is used as token to run transaction. Account details
     * OR previous_transaction_id should be passed to run transaction.
     * @return Returns the String
     */
    @JsonGetter("previous_transaction_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getPreviousTransactionId() {
        return previousTransactionId;
    }

    /**
     * Setter for PreviousTransactionId.
     * previous_transaction_id is used as token to run transaction. Account details
     * OR previous_transaction_id should be passed to run transaction.
     * @param previousTransactionId Value for String
     */
    @JsonSetter("previous_transaction_id")
    public void setPreviousTransactionId(String previousTransactionId) {
        this.previousTransactionId = previousTransactionId;
    }

    /**
     * Getter for ProductTransactionId.
     * The Product's method (cc/ach) has to match the action. If not provided, the API will use the
     * default configured for the Location.
     * @return Returns the String
     */
    @JsonGetter("product_transaction_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getProductTransactionId() {
        return productTransactionId;
    }

    /**
     * Setter for ProductTransactionId.
     * The Product's method (cc/ach) has to match the action. If not provided, the API will use the
     * default configured for the Location.
     * @param productTransactionId Value for String
     */
    @JsonSetter("product_transaction_id")
    public void setProductTransactionId(String productTransactionId) {
        this.productTransactionId = productTransactionId;
    }

    /**
     * Getter for QuickInvoiceId.
     * Can be used to associate a transaction to a Quick Invoice.  Quick Invoice transactions will
     * have a value for this field automatically.
     * @return Returns the String
     */
    @JsonGetter("quick_invoice_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getQuickInvoiceId() {
        return quickInvoiceId;
    }

    /**
     * Setter for QuickInvoiceId.
     * Can be used to associate a transaction to a Quick Invoice.  Quick Invoice transactions will
     * have a value for this field automatically.
     * @param quickInvoiceId Value for String
     */
    @JsonSetter("quick_invoice_id")
    public void setQuickInvoiceId(String quickInvoiceId) {
        this.quickInvoiceId = quickInvoiceId;
    }

    /**
     * Getter for Recurring.
     * Flag that is allowed to be passed on card not present industries to signify the transaction
     * is an ongoing recurring transaction. Possible values to send are 0 or 1. This field must be 0
     * or not present if installment is sent as 1.
     * @return Returns the Boolean
     */
    @JsonGetter("recurring")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getRecurring() {
        return recurring;
    }

    /**
     * Setter for Recurring.
     * Flag that is allowed to be passed on card not present industries to signify the transaction
     * is an ongoing recurring transaction. Possible values to send are 0 or 1. This field must be 0
     * or not present if installment is sent as 1.
     * @param recurring Value for Boolean
     */
    @JsonSetter("recurring")
    public void setRecurring(Boolean recurring) {
        this.recurring = recurring;
    }

    /**
     * Getter for RecurringNumber.
     * If this is an ongoing recurring and recurring field is being passed as 1, then this field
     * must have a vlue of 1-999 specifying the current recurring number that is running.
     * @return Returns the Double
     */
    @JsonGetter("recurring_number")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getRecurringNumber() {
        return recurringNumber;
    }

    /**
     * Setter for RecurringNumber.
     * If this is an ongoing recurring and recurring field is being passed as 1, then this field
     * must have a vlue of 1-999 specifying the current recurring number that is running.
     * @param recurringNumber Value for Double
     */
    @JsonSetter("recurring_number")
    public void setRecurringNumber(Double recurringNumber) {
        this.recurringNumber = recurringNumber;
    }

    /**
     * Getter for RoomNum.
     * Used in Lodging
     * @return Returns the String
     */
    @JsonGetter("room_num")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getRoomNum() {
        return roomNum;
    }

    /**
     * Setter for RoomNum.
     * Used in Lodging
     * @param roomNum Value for String
     */
    @JsonSetter("room_num")
    public void setRoomNum(String roomNum) {
        this.roomNum = roomNum;
    }

    /**
     * Getter for RoomRate.
     * Required if merchant industry type is lodging.
     * @return Returns the Double
     */
    @JsonGetter("room_rate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getRoomRate() {
        return roomRate;
    }

    /**
     * Setter for RoomRate.
     * Required if merchant industry type is lodging.
     * @param roomRate Value for Double
     */
    @JsonSetter("room_rate")
    public void setRoomRate(Double roomRate) {
        this.roomRate = roomRate;
    }

    /**
     * Getter for SaveAccount.
     * Specifies to save account to contacts profile if account_number/track_data is present with
     * either contact_id or contact_api_id in params.
     * @return Returns the Boolean
     */
    @JsonGetter("save_account")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getSaveAccount() {
        return saveAccount;
    }

    /**
     * Setter for SaveAccount.
     * Specifies to save account to contacts profile if account_number/track_data is present with
     * either contact_id or contact_api_id in params.
     * @param saveAccount Value for Boolean
     */
    @JsonSetter("save_account")
    public void setSaveAccount(Boolean saveAccount) {
        this.saveAccount = saveAccount;
    }

    /**
     * Getter for SaveAccountTitle.
     * If saving account vault while running a transaction, this will be the title of the account
     * vault.
     * @return Returns the String
     */
    @JsonGetter("save_account_title")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getSaveAccountTitle() {
        return saveAccountTitle;
    }

    /**
     * Setter for SaveAccountTitle.
     * If saving account vault while running a transaction, this will be the title of the account
     * vault.
     * @param saveAccountTitle Value for String
     */
    @JsonSetter("save_account_title")
    public void setSaveAccountTitle(String saveAccountTitle) {
        this.saveAccountTitle = saveAccountTitle;
    }

    /**
     * Getter for SettleDate.
     * Settle date
     * @return Returns the String
     */
    @JsonGetter("settle_date")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getSettleDate() {
        return settleDate;
    }

    /**
     * Setter for SettleDate.
     * Settle date
     * @param settleDate Value for String
     */
    @JsonSetter("settle_date")
    public void setSettleDate(String settleDate) {
        this.settleDate = settleDate;
    }

    /**
     * Getter for StatusId.
     * Status ID - See status id section for more detail
     * @return Returns the Integer
     */
    @JsonGetter("status_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getStatusId() {
        return statusId;
    }

    /**
     * Setter for StatusId.
     * Status ID - See status id section for more detail
     * @param statusId Value for Integer
     */
    @JsonSetter("status_id")
    public void setStatusId(Integer statusId) {
        this.statusId = statusId;
    }

    /**
     * Getter for SubtotalAmount.
     * This field is allowed and required for transactions that have a product where surcharge is
     * configured.
     * @return Returns the Double
     */
    @JsonGetter("subtotal_amount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getSubtotalAmount() {
        return subtotalAmount;
    }

    /**
     * Setter for SubtotalAmount.
     * This field is allowed and required for transactions that have a product where surcharge is
     * configured.
     * @param subtotalAmount Value for Double
     */
    @JsonSetter("subtotal_amount")
    public void setSubtotalAmount(Double subtotalAmount) {
        this.subtotalAmount = subtotalAmount;
    }

    /**
     * Getter for SurchargeAmount.
     * This field is allowed and required for transactions that have a product where surcharge is
     * configured.
     * @return Returns the Double
     */
    @JsonGetter("surcharge_amount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getSurchargeAmount() {
        return surchargeAmount;
    }

    /**
     * Setter for SurchargeAmount.
     * This field is allowed and required for transactions that have a product where surcharge is
     * configured.
     * @param surchargeAmount Value for Double
     */
    @JsonSetter("surcharge_amount")
    public void setSurchargeAmount(Double surchargeAmount) {
        this.surchargeAmount = surchargeAmount;
    }

    /**
     * Getter for Tags.
     * Tags
     * @return Returns the String
     */
    @JsonGetter("tags")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getTags() {
        return tags;
    }

    /**
     * Setter for Tags.
     * Tags
     * @param tags Value for String
     */
    @JsonSetter("tags")
    public void setTags(String tags) {
        this.tags = tags;
    }

    /**
     * Getter for Safe.
     * Safe
     * @return Returns the String
     */
    @JsonGetter("safe")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getSafe() {
        return safe;
    }

    /**
     * Setter for Safe.
     * Safe
     * @param safe Value for String
     */
    @JsonSetter("safe")
    public void setSafe(String safe) {
        this.safe = safe;
    }

    /**
     * Getter for Tax.
     * Amount of Sales tax - If supplied, this amount should be included in the total
     * transaction_amount field
     * @return Returns the Double
     */
    @JsonGetter("tax")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getTax() {
        return tax;
    }

    /**
     * Setter for Tax.
     * Amount of Sales tax - If supplied, this amount should be included in the total
     * transaction_amount field
     * @param tax Value for Double
     */
    @JsonSetter("tax")
    public void setTax(Double tax) {
        this.tax = tax;
    }

    /**
     * Getter for TerminalId.
     * Terminal ID
     * @return Returns the String
     */
    @JsonGetter("terminal_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getTerminalId() {
        return terminalId;
    }

    /**
     * Setter for TerminalId.
     * Terminal ID
     * @param terminalId Value for String
     */
    @JsonSetter("terminal_id")
    public void setTerminalId(String terminalId) {
        this.terminalId = terminalId;
    }

    /**
     * Getter for TermsAgree.
     * Terms Agreement
     * @return Returns the Integer
     */
    @JsonGetter("terms_agree")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getTermsAgree() {
        return termsAgree;
    }

    /**
     * Setter for TermsAgree.
     * Terms Agreement
     * @param termsAgree Value for Integer
     */
    @JsonSetter("terms_agree")
    public void setTermsAgree(Integer termsAgree) {
        this.termsAgree = termsAgree;
    }

    /**
     * Getter for TermsAgreeIp.
     * Terms Agree IP
     * @return Returns the String
     */
    @JsonGetter("terms_agree_ip")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getTermsAgreeIp() {
        return termsAgreeIp;
    }

    /**
     * Setter for TermsAgreeIp.
     * Terms Agree IP
     * @param termsAgreeIp Value for String
     */
    @JsonSetter("terms_agree_ip")
    public void setTermsAgreeIp(String termsAgreeIp) {
        this.termsAgreeIp = termsAgreeIp;
    }

    /**
     * Getter for Ticket.
     * Ticket
     * @return Returns the Integer
     */
    @JsonGetter("ticket")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getTicket() {
        return ticket;
    }

    /**
     * Setter for Ticket.
     * Ticket
     * @param ticket Value for Integer
     */
    @JsonSetter("ticket")
    public void setTicket(Integer ticket) {
        this.ticket = ticket;
    }

    /**
     * Getter for TipAmount.
     * Optional tip amount. Tip is not supported for lodging and ecommerce merchants.
     * @return Returns the Double
     */
    @JsonGetter("tip_amount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getTipAmount() {
        return tipAmount;
    }

    /**
     * Setter for TipAmount.
     * Optional tip amount. Tip is not supported for lodging and ecommerce merchants.
     * @param tipAmount Value for Double
     */
    @JsonSetter("tip_amount")
    public void setTipAmount(Double tipAmount) {
        this.tipAmount = tipAmount;
    }

    /**
     * Getter for TransactionAmount.
     * Amount of the transaction. This should always be the desired settle amount of the
     * transaction.
     * @return Returns the double
     */
    @JsonGetter("transaction_amount")
    public double getTransactionAmount() {
        return transactionAmount;
    }

    /**
     * Setter for TransactionAmount.
     * Amount of the transaction. This should always be the desired settle amount of the
     * transaction.
     * @param transactionAmount Value for double
     */
    @JsonSetter("transaction_amount")
    public void setTransactionAmount(double transactionAmount) {
        this.transactionAmount = transactionAmount;
    }

    /**
     * Getter for TransactionApiId.
     * See api_id page for more details
     * @return Returns the String
     */
    @JsonGetter("transaction_api_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getTransactionApiId() {
        return transactionApiId;
    }

    /**
     * Setter for TransactionApiId.
     * See api_id page for more details
     * @param transactionApiId Value for String
     */
    @JsonSetter("transaction_api_id")
    public void setTransactionApiId(String transactionApiId) {
        this.transactionApiId = transactionApiId;
    }

    /**
     * Getter for TransactionC1.
     * Custom field 1 for api users to store custom data
     * @return Returns the String
     */
    @JsonGetter("transaction_c1")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getTransactionC1() {
        return transactionC1;
    }

    /**
     * Setter for TransactionC1.
     * Custom field 1 for api users to store custom data
     * @param transactionC1 Value for String
     */
    @JsonSetter("transaction_c1")
    public void setTransactionC1(String transactionC1) {
        this.transactionC1 = transactionC1;
    }

    /**
     * Getter for TransactionC2.
     * Custom field 2 for api users to store custom data
     * @return Returns the String
     */
    @JsonGetter("transaction_c2")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getTransactionC2() {
        return transactionC2;
    }

    /**
     * Setter for TransactionC2.
     * Custom field 2 for api users to store custom data
     * @param transactionC2 Value for String
     */
    @JsonSetter("transaction_c2")
    public void setTransactionC2(String transactionC2) {
        this.transactionC2 = transactionC2;
    }

    /**
     * Getter for TransactionC3.
     * Custom field 3 for api users to store custom data
     * @return Returns the String
     */
    @JsonGetter("transaction_c3")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getTransactionC3() {
        return transactionC3;
    }

    /**
     * Setter for TransactionC3.
     * Custom field 3 for api users to store custom data
     * @param transactionC3 Value for String
     */
    @JsonSetter("transaction_c3")
    public void setTransactionC3(String transactionC3) {
        this.transactionC3 = transactionC3;
    }

    /**
     * Getter for TransactionC4.
     * Custom field 4 for api users to store custom data
     * @return Returns the String
     */
    @JsonGetter("transaction_c4")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getTransactionC4() {
        return transactionC4;
    }

    /**
     * Setter for TransactionC4.
     * Custom field 4 for api users to store custom data
     * @param transactionC4 Value for String
     */
    @JsonSetter("transaction_c4")
    public void setTransactionC4(String transactionC4) {
        this.transactionC4 = transactionC4;
    }

    /**
     * Getter for TrxSourceId.
     * How the transaction was obtained by the API.
     * @return Returns the Integer
     */
    @JsonGetter("trx_source_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getTrxSourceId() {
        return trxSourceId;
    }

    /**
     * Setter for TrxSourceId.
     * How the transaction was obtained by the API.
     * @param trxSourceId Value for Integer
     */
    @JsonSetter("trx_source_id")
    public void setTrxSourceId(Integer trxSourceId) {
        this.trxSourceId = trxSourceId;
    }

    /**
     * Getter for AccountHolderName.
     * For CC, this is the 'Name (as it appears) on Card'. For ACH, this is the 'Name on Account'.
     * @return Returns the String
     */
    @JsonGetter("account_holder_name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getAccountHolderName() {
        return accountHolderName;
    }

    /**
     * Setter for AccountHolderName.
     * For CC, this is the 'Name (as it appears) on Card'. For ACH, this is the 'Name on Account'.
     * @param accountHolderName Value for String
     */
    @JsonSetter("account_holder_name")
    public void setAccountHolderName(String accountHolderName) {
        this.accountHolderName = accountHolderName;
    }

    /**
     * Getter for AccountNumber.
     * For CC transactions, a credit card number. For ACH transactions, a bank account number.
     * @return Returns the String
     */
    @JsonGetter("account_number")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getAccountNumber() {
        return accountNumber;
    }

    /**
     * Setter for AccountNumber.
     * For CC transactions, a credit card number. For ACH transactions, a bank account number.
     * @param accountNumber Value for String
     */
    @JsonSetter("account_number")
    public void setAccountNumber(String accountNumber) {
        this.accountNumber = accountNumber;
    }

    /**
     * Getter for AccountType.
     * Required for ACH transactions if account_vault_id is not provided.
     * @return Returns the String
     */
    @JsonGetter("account_type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getAccountType() {
        return accountType;
    }

    /**
     * Setter for AccountType.
     * Required for ACH transactions if account_vault_id is not provided.
     * @param accountType Value for String
     */
    @JsonSetter("account_type")
    public void setAccountType(String accountType) {
        this.accountType = accountType;
    }

    /**
     * Getter for AccountVaultApiId.
     * This can be supplied in place of account_vault_id if you would like to use an account vault
     * for the transaction and are using your own custom api_id's to track accountvaults in the
     * system.
     * @return Returns the String
     */
    @JsonGetter("account_vault_api_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getAccountVaultApiId() {
        return accountVaultApiId;
    }

    /**
     * Setter for AccountVaultApiId.
     * This can be supplied in place of account_vault_id if you would like to use an account vault
     * for the transaction and are using your own custom api_id's to track accountvaults in the
     * system.
     * @param accountVaultApiId Value for String
     */
    @JsonSetter("account_vault_api_id")
    public void setAccountVaultApiId(String accountVaultApiId) {
        this.accountVaultApiId = accountVaultApiId;
    }

    /**
     * Getter for AccountVaultId.
     * Required if account_number, track_data, micr_data is not provided.
     * @return Returns the String
     */
    @JsonGetter("account_vault_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getAccountVaultId() {
        return accountVaultId;
    }

    /**
     * Setter for AccountVaultId.
     * Required if account_number, track_data, micr_data is not provided.
     * @param accountVaultId Value for String
     */
    @JsonSetter("account_vault_id")
    public void setAccountVaultId(String accountVaultId) {
        this.accountVaultId = accountVaultId;
    }

    /**
     * Getter for AchIdentifier.
     * Required for ACH transactions in certain scenarios.
     * @return Returns the String
     */
    @JsonGetter("ach_identifier")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getAchIdentifier() {
        return achIdentifier;
    }

    /**
     * Setter for AchIdentifier.
     * Required for ACH transactions in certain scenarios.
     * @param achIdentifier Value for String
     */
    @JsonSetter("ach_identifier")
    public void setAchIdentifier(String achIdentifier) {
        this.achIdentifier = achIdentifier;
    }

    /**
     * Getter for AchSecCode.
     * Required for ACH transactions if account_vault_id is not provided.
     * @return Returns the AchSecCodeEnum
     */
    @JsonGetter("ach_sec_code")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public AchSecCodeEnum getAchSecCode() {
        return achSecCode;
    }

    /**
     * Setter for AchSecCode.
     * Required for ACH transactions if account_vault_id is not provided.
     * @param achSecCode Value for AchSecCodeEnum
     */
    @JsonSetter("ach_sec_code")
    public void setAchSecCode(AchSecCodeEnum achSecCode) {
        this.achSecCode = achSecCode;
    }

    /**
     * Getter for AdvanceDeposit.
     * Advance Deposit
     * @return Returns the Boolean
     */
    @JsonGetter("advance_deposit")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getAdvanceDeposit() {
        return advanceDeposit;
    }

    /**
     * Setter for AdvanceDeposit.
     * Advance Deposit
     * @param advanceDeposit Value for Boolean
     */
    @JsonSetter("advance_deposit")
    public void setAdvanceDeposit(Boolean advanceDeposit) {
        this.advanceDeposit = advanceDeposit;
    }

    /**
     * Getter for AuthAmount.
     * Authorization Amount
     * @return Returns the Double
     */
    @JsonGetter("auth_amount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getAuthAmount() {
        return authAmount;
    }

    /**
     * Setter for AuthAmount.
     * Authorization Amount
     * @param authAmount Value for Double
     */
    @JsonSetter("auth_amount")
    public void setAuthAmount(Double authAmount) {
        this.authAmount = authAmount;
    }

    /**
     * Getter for AuthCode.
     * Required on force transactions. Ignored for all other actions.
     * @return Returns the String
     */
    @JsonGetter("auth_code")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getAuthCode() {
        return authCode;
    }

    /**
     * Setter for AuthCode.
     * Required on force transactions. Ignored for all other actions.
     * @param authCode Value for String
     */
    @JsonSetter("auth_code")
    public void setAuthCode(String authCode) {
        this.authCode = authCode;
    }

    /**
     * Getter for Avs.
     * AVS
     * @return Returns the AvsEnum
     */
    @JsonGetter("avs")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public AvsEnum getAvs() {
        return avs;
    }

    /**
     * Setter for Avs.
     * AVS
     * @param avs Value for AvsEnum
     */
    @JsonSetter("avs")
    public void setAvs(AvsEnum avs) {
        this.avs = avs;
    }

    /**
     * Getter for AvsEnhanced.
     * AVS Enhanced
     * @return Returns the String
     */
    @JsonGetter("avs_enhanced")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getAvsEnhanced() {
        return avsEnhanced;
    }

    /**
     * Setter for AvsEnhanced.
     * AVS Enhanced
     * @param avsEnhanced Value for String
     */
    @JsonSetter("avs_enhanced")
    public void setAvsEnhanced(String avsEnhanced) {
        this.avsEnhanced = avsEnhanced;
    }

    /**
     * Getter for CardholderPresent.
     * If the cardholder is present at the point of service
     * @return Returns the Boolean
     */
    @JsonGetter("cardholder_present")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getCardholderPresent() {
        return cardholderPresent;
    }

    /**
     * Setter for CardholderPresent.
     * If the cardholder is present at the point of service
     * @param cardholderPresent Value for Boolean
     */
    @JsonSetter("cardholder_present")
    public void setCardholderPresent(Boolean cardholderPresent) {
        this.cardholderPresent = cardholderPresent;
    }

    /**
     * Getter for CardPresent.
     * A POST only field to specify whether or not the card is present.
     * @return Returns the Boolean
     */
    @JsonGetter("card_present")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getCardPresent() {
        return cardPresent;
    }

    /**
     * Setter for CardPresent.
     * A POST only field to specify whether or not the card is present.
     * @param cardPresent Value for Boolean
     */
    @JsonSetter("card_present")
    public void setCardPresent(Boolean cardPresent) {
        this.cardPresent = cardPresent;
    }

    /**
     * Getter for CheckNumber.
     * Required for transactions using TEL SEC code.
     * @return Returns the String
     */
    @JsonGetter("check_number")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCheckNumber() {
        return checkNumber;
    }

    /**
     * Setter for CheckNumber.
     * Required for transactions using TEL SEC code.
     * @param checkNumber Value for String
     */
    @JsonSetter("check_number")
    public void setCheckNumber(String checkNumber) {
        this.checkNumber = checkNumber;
    }

    /**
     * Getter for CreatedTs.
     * Created Time Stamp
     * @return Returns the LocalDateTime
     */
    @JsonGetter("created_ts")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getCreatedTs() {
        return createdTs;
    }

    /**
     * Setter for CreatedTs.
     * Created Time Stamp
     * @param createdTs Value for LocalDateTime
     */
    @JsonSetter("created_ts")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedTs(LocalDateTime createdTs) {
        this.createdTs = createdTs;
    }

    /**
     * Getter for Cvv.
     * Required for CC transactions if vt_require_cvv is true on producttransaction(Merchant Deposit
     * Account).
     * @return Returns the String
     */
    @JsonGetter("cvv")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCvv() {
        return cvv;
    }

    /**
     * Setter for Cvv.
     * Required for CC transactions if vt_require_cvv is true on producttransaction(Merchant Deposit
     * Account).
     * @param cvv Value for String
     */
    @JsonSetter("cvv")
    public void setCvv(String cvv) {
        this.cvv = cvv;
    }

    /**
     * Getter for CvvResponse.
     * Obfuscated CVV
     * @return Returns the String
     */
    @JsonGetter("cvv_response")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCvvResponse() {
        return cvvResponse;
    }

    /**
     * Setter for CvvResponse.
     * Obfuscated CVV
     * @param cvvResponse Value for String
     */
    @JsonSetter("cvv_response")
    public void setCvvResponse(String cvvResponse) {
        this.cvvResponse = cvvResponse;
    }

    /**
     * Getter for EFormat.
     * Encrypted Track Data Format.
     * @return Returns the EFormatEnum
     */
    @JsonGetter("e_format")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public EFormatEnum getEFormat() {
        return eFormat;
    }

    /**
     * Setter for EFormat.
     * Encrypted Track Data Format.
     * @param eFormat Value for EFormatEnum
     */
    @JsonSetter("e_format")
    public void setEFormat(EFormatEnum eFormat) {
        this.eFormat = eFormat;
    }

    /**
     * Getter for ETrackData.
     * Encrypted Track Data
     * @return Returns the String
     */
    @JsonGetter("e_track_data")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getETrackData() {
        return eTrackData;
    }

    /**
     * Setter for ETrackData.
     * Encrypted Track Data
     * @param eTrackData Value for String
     */
    @JsonSetter("e_track_data")
    public void setETrackData(String eTrackData) {
        this.eTrackData = eTrackData;
    }

    /**
     * Getter for ESerialNumber.
     * Encrypted Track Data KSN
     * @return Returns the String
     */
    @JsonGetter("e_serial_number")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getESerialNumber() {
        return eSerialNumber;
    }

    /**
     * Setter for ESerialNumber.
     * Encrypted Track Data KSN
     * @param eSerialNumber Value for String
     */
    @JsonSetter("e_serial_number")
    public void setESerialNumber(String eSerialNumber) {
        this.eSerialNumber = eSerialNumber;
    }

    /**
     * Getter for EntryModeId.
     * Entry Mode - See entry mode section for more detail
     * @return Returns the EntryModeIdEnum
     */
    @JsonGetter("entry_mode_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public EntryModeIdEnum getEntryModeId() {
        return entryModeId;
    }

    /**
     * Setter for EntryModeId.
     * Entry Mode - See entry mode section for more detail
     * @param entryModeId Value for EntryModeIdEnum
     */
    @JsonSetter("entry_mode_id")
    public void setEntryModeId(EntryModeIdEnum entryModeId) {
        this.entryModeId = entryModeId;
    }

    /**
     * Getter for EmvReceiptData.
     * This field is a read only field. This field will only be populated for EMV transactions and
     * will contain proper JSON formatted data with some or all of the following fields:
     * TC,TVR,AID,TSI,ATC,APPLAB,APPN,CVM
     * @return Returns the String
     */
    @JsonGetter("emv_receipt_data")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getEmvReceiptData() {
        return emvReceiptData;
    }

    /**
     * Setter for EmvReceiptData.
     * This field is a read only field. This field will only be populated for EMV transactions and
     * will contain proper JSON formatted data with some or all of the following fields:
     * TC,TVR,AID,TSI,ATC,APPLAB,APPN,CVM
     * @param emvReceiptData Value for String
     */
    @JsonSetter("emv_receipt_data")
    public void setEmvReceiptData(String emvReceiptData) {
        this.emvReceiptData = emvReceiptData;
    }

    /**
     * Getter for FirstSix.
     * First six numbers of account_number.  Automatically generated by system.
     * @return Returns the String
     */
    @JsonGetter("first_six")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getFirstSix() {
        return firstSix;
    }

    /**
     * Setter for FirstSix.
     * First six numbers of account_number.  Automatically generated by system.
     * @param firstSix Value for String
     */
    @JsonSetter("first_six")
    public void setFirstSix(String firstSix) {
        this.firstSix = firstSix;
    }

    /**
     * Getter for Id.
     * Transaction ID
     * @return Returns the String
     */
    @JsonGetter("id")
    public String getId() {
        return id;
    }

    /**
     * Setter for Id.
     * Transaction ID
     * @param id Value for String
     */
    @JsonSetter("id")
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Getter for LastFour.
     * Last four numbers of account_number.  Automatically generated by the system.
     * @return Returns the String
     */
    @JsonGetter("last_four")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getLastFour() {
        return lastFour;
    }

    /**
     * Setter for LastFour.
     * Last four numbers of account_number.  Automatically generated by the system.
     * @param lastFour Value for String
     */
    @JsonSetter("last_four")
    public void setLastFour(String lastFour) {
        this.lastFour = lastFour;
    }

    /**
     * Getter for ModifiedTs.
     * Modified Time Stamp
     * @return Returns the LocalDateTime
     */
    @JsonGetter("modified_ts")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getModifiedTs() {
        return modifiedTs;
    }

    /**
     * Setter for ModifiedTs.
     * Modified Time Stamp
     * @param modifiedTs Value for LocalDateTime
     */
    @JsonSetter("modified_ts")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setModifiedTs(LocalDateTime modifiedTs) {
        this.modifiedTs = modifiedTs;
    }

    /**
     * Getter for PaymentMethod.
     * 'cc' or 'ach'
     * @return Returns the PaymentMethod4Enum
     */
    @JsonGetter("payment_method")
    public PaymentMethod4Enum getPaymentMethod() {
        return paymentMethod;
    }

    /**
     * Setter for PaymentMethod.
     * 'cc' or 'ach'
     * @param paymentMethod Value for PaymentMethod4Enum
     */
    @JsonSetter("payment_method")
    public void setPaymentMethod(PaymentMethod4Enum paymentMethod) {
        this.paymentMethod = paymentMethod;
    }

    /**
     * Getter for SecureAuthData.
     * (ECOMM) The token authentication value associated with 3D secure transactions (Such as CAVV,
     * UCAF auth data)
     * @return Returns the String
     */
    @JsonGetter("secure_auth_data")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getSecureAuthData() {
        return secureAuthData;
    }

    /**
     * Setter for SecureAuthData.
     * (ECOMM) The token authentication value associated with 3D secure transactions (Such as CAVV,
     * UCAF auth data)
     * @param secureAuthData Value for String
     */
    @JsonSetter("secure_auth_data")
    public void setSecureAuthData(String secureAuthData) {
        this.secureAuthData = secureAuthData;
    }

    /**
     * Getter for SecureProtocolVersion.
     * (ECOMM)  Secure Program Protocol Version
     * @return Returns the Integer
     */
    @JsonGetter("secure_protocol_version")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getSecureProtocolVersion() {
        return secureProtocolVersion;
    }

    /**
     * Setter for SecureProtocolVersion.
     * (ECOMM)  Secure Program Protocol Version
     * @param secureProtocolVersion Value for Integer
     */
    @JsonSetter("secure_protocol_version")
    public void setSecureProtocolVersion(Integer secureProtocolVersion) {
        this.secureProtocolVersion = secureProtocolVersion;
    }

    /**
     * Getter for SecureCollectionIndicator.
     * (ECOMM) Used for UCAF collection indicator or Discover Autentication type
     * @return Returns the Integer
     */
    @JsonGetter("secure_collection_indicator")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getSecureCollectionIndicator() {
        return secureCollectionIndicator;
    }

    /**
     * Setter for SecureCollectionIndicator.
     * (ECOMM) Used for UCAF collection indicator or Discover Autentication type
     * @param secureCollectionIndicator Value for Integer
     */
    @JsonSetter("secure_collection_indicator")
    public void setSecureCollectionIndicator(Integer secureCollectionIndicator) {
        this.secureCollectionIndicator = secureCollectionIndicator;
    }

    /**
     * Getter for SecureCrytogram.
     * (ECOMM) Used to supply the Digital Payment Cryptogram obtained from a Digital Secure Remote
     * Payment (DSRP) transaction
     * @return Returns the String
     */
    @JsonGetter("secure_crytogram")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getSecureCrytogram() {
        return secureCrytogram;
    }

    /**
     * Setter for SecureCrytogram.
     * (ECOMM) Used to supply the Digital Payment Cryptogram obtained from a Digital Secure Remote
     * Payment (DSRP) transaction
     * @param secureCrytogram Value for String
     */
    @JsonSetter("secure_crytogram")
    public void setSecureCrytogram(String secureCrytogram) {
        this.secureCrytogram = secureCrytogram;
    }

    /**
     * Getter for SecureDirectoryServerTransactionId.
     * (ECOMM) Directory Server Transaction ID (Such as XID, TAVV)
     * @return Returns the String
     */
    @JsonGetter("secure_directory_server_transaction_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getSecureDirectoryServerTransactionId() {
        return secureDirectoryServerTransactionId;
    }

    /**
     * Setter for SecureDirectoryServerTransactionId.
     * (ECOMM) Directory Server Transaction ID (Such as XID, TAVV)
     * @param secureDirectoryServerTransactionId Value for String
     */
    @JsonSetter("secure_directory_server_transaction_id")
    public void setSecureDirectoryServerTransactionId(String secureDirectoryServerTransactionId) {
        this.secureDirectoryServerTransactionId = secureDirectoryServerTransactionId;
    }

    /**
     * Getter for SecureEcommUrl.
     * (ECOMM) This field is used to enter a merchant identifier such as the Merchant URL or reverse
     * domain name as presented to the consumer during the checkout process for a Digital Secure
     * Remote payment transaction
     * @return Returns the String
     */
    @JsonGetter("secure_ecomm_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getSecureEcommUrl() {
        return secureEcommUrl;
    }

    /**
     * Setter for SecureEcommUrl.
     * (ECOMM) This field is used to enter a merchant identifier such as the Merchant URL or reverse
     * domain name as presented to the consumer during the checkout process for a Digital Secure
     * Remote payment transaction
     * @param secureEcommUrl Value for String
     */
    @JsonSetter("secure_ecomm_url")
    public void setSecureEcommUrl(String secureEcommUrl) {
        this.secureEcommUrl = secureEcommUrl;
    }

    /**
     * Getter for TerminalSerialNumber.
     * If transaction was processed using a terminal, this field would contain the terminal's serial
     * number
     * @return Returns the String
     */
    @JsonGetter("terminal_serial_number")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getTerminalSerialNumber() {
        return terminalSerialNumber;
    }

    /**
     * Setter for TerminalSerialNumber.
     * If transaction was processed using a terminal, this field would contain the terminal's serial
     * number
     * @param terminalSerialNumber Value for String
     */
    @JsonSetter("terminal_serial_number")
    public void setTerminalSerialNumber(String terminalSerialNumber) {
        this.terminalSerialNumber = terminalSerialNumber;
    }

    /**
     * Getter for Threedsecure.
     * Specifies to save account to contacts profile if account_number/track_data is present with
     * either contact_id or contact_api_id in params.
     * @return Returns the Boolean
     */
    @JsonGetter("threedsecure")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getThreedsecure() {
        return threedsecure;
    }

    /**
     * Setter for Threedsecure.
     * Specifies to save account to contacts profile if account_number/track_data is present with
     * either contact_id or contact_api_id in params.
     * @param threedsecure Value for Boolean
     */
    @JsonSetter("threedsecure")
    public void setThreedsecure(Boolean threedsecure) {
        this.threedsecure = threedsecure;
    }

    /**
     * Getter for TrackData.
     * Tags
     * @return Returns the String
     */
    @JsonGetter("track_data")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getTrackData() {
        return trackData;
    }

    /**
     * Setter for TrackData.
     * Tags
     * @param trackData Value for String
     */
    @JsonSetter("track_data")
    public void setTrackData(String trackData) {
        this.trackData = trackData;
    }

    /**
     * Getter for TransactionSettlementStatus.
     * (Deprecated field)
     * @return Returns the String
     */
    @JsonGetter("transaction_settlement_status")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getTransactionSettlementStatus() {
        return transactionSettlementStatus;
    }

    /**
     * Setter for TransactionSettlementStatus.
     * (Deprecated field)
     * @param transactionSettlementStatus Value for String
     */
    @JsonSetter("transaction_settlement_status")
    public void setTransactionSettlementStatus(String transactionSettlementStatus) {
        this.transactionSettlementStatus = transactionSettlementStatus;
    }

    /**
     * Getter for ChargeBackDate.
     * Charge Back Date (ACH Trxs)
     * @return Returns the String
     */
    @JsonGetter("charge_back_date")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getChargeBackDate() {
        return chargeBackDate;
    }

    /**
     * Setter for ChargeBackDate.
     * Charge Back Date (ACH Trxs)
     * @param chargeBackDate Value for String
     */
    @JsonSetter("charge_back_date")
    public void setChargeBackDate(String chargeBackDate) {
        this.chargeBackDate = chargeBackDate;
    }

    /**
     * Getter for IsRecurring.
     * Flag that is allowed to be passed on card not present industries to signify the transaction
     * is a fixed installment plan transaction.
     * @return Returns the Boolean
     */
    @JsonGetter("is_recurring")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIsRecurring() {
        return isRecurring;
    }

    /**
     * Setter for IsRecurring.
     * Flag that is allowed to be passed on card not present industries to signify the transaction
     * is a fixed installment plan transaction.
     * @param isRecurring Value for Boolean
     */
    @JsonSetter("is_recurring")
    public void setIsRecurring(Boolean isRecurring) {
        this.isRecurring = isRecurring;
    }

    /**
     * Getter for NotificationEmailSent.
     * Indicates if email receipt has been sent
     * @return Returns the String
     */
    @JsonGetter("notification_email_sent")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getNotificationEmailSent() {
        return notificationEmailSent;
    }

    /**
     * Setter for NotificationEmailSent.
     * Indicates if email receipt has been sent
     * @param notificationEmailSent Value for String
     */
    @JsonSetter("notification_email_sent")
    public void setNotificationEmailSent(String notificationEmailSent) {
        this.notificationEmailSent = notificationEmailSent;
    }

    /**
     * Getter for Par.
     * A field usually returned form the processor to uniquely identifier a specific cardholder's
     * credit card.
     * @return Returns the String
     */
    @JsonGetter("par")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getPar() {
        return par;
    }

    /**
     * Setter for Par.
     * A field usually returned form the processor to uniquely identifier a specific cardholder's
     * credit card.
     * @param par Value for String
     */
    @JsonSetter("par")
    public void setPar(String par) {
        this.par = par;
    }

    /**
     * Getter for ReasonCodeId.
     * Response reason code that provides more detail as to the result of the transaction. The
     * reason code list can be found here: Response Reason Codes
     * @return Returns the Double
     */
    @JsonGetter("reason_code_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getReasonCodeId() {
        return reasonCodeId;
    }

    /**
     * Setter for ReasonCodeId.
     * Response reason code that provides more detail as to the result of the transaction. The
     * reason code list can be found here: Response Reason Codes
     * @param reasonCodeId Value for Double
     */
    @JsonSetter("reason_code_id")
    public void setReasonCodeId(Double reasonCodeId) {
        this.reasonCodeId = reasonCodeId;
    }

    /**
     * Getter for RecurringId.
     * A unique identifer used to associate a transaction with a Recurring.
     * @return Returns the String
     */
    @JsonGetter("recurring_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getRecurringId() {
        return recurringId;
    }

    /**
     * Setter for RecurringId.
     * A unique identifer used to associate a transaction with a Recurring.
     * @param recurringId Value for String
     */
    @JsonSetter("recurring_id")
    public void setRecurringId(String recurringId) {
        this.recurringId = recurringId;
    }

    /**
     * Getter for TransactionBatchId.
     * For cc transactions, this is the id of the batch the transaction belongs to (not to be
     * confused with batch number). This will be null for transactions that do not settle (void and
     * authonly).
     * @return Returns the String
     */
    @JsonGetter("transaction_batch_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getTransactionBatchId() {
        return transactionBatchId;
    }

    /**
     * Setter for TransactionBatchId.
     * For cc transactions, this is the id of the batch the transaction belongs to (not to be
     * confused with batch number). This will be null for transactions that do not settle (void and
     * authonly).
     * @param transactionBatchId Value for String
     */
    @JsonSetter("transaction_batch_id")
    public void setTransactionBatchId(String transactionBatchId) {
        this.transactionBatchId = transactionBatchId;
    }

    /**
     * Getter for TypeId.
     * Type ID - See type id section for more detail
     * @return Returns the TypeIdEnum
     */
    @JsonGetter("type_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public TypeIdEnum getTypeId() {
        return typeId;
    }

    /**
     * Setter for TypeId.
     * Type ID - See type id section for more detail
     * @param typeId Value for TypeIdEnum
     */
    @JsonSetter("type_id")
    public void setTypeId(TypeIdEnum typeId) {
        this.typeId = typeId;
    }

    /**
     * Getter for Verbiage.
     * Verbiage -Do not use verbiage to see if the transaction was approved, use status_id
     * @return Returns the String
     */
    @JsonGetter("verbiage")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getVerbiage() {
        return verbiage;
    }

    /**
     * Setter for Verbiage.
     * Verbiage -Do not use verbiage to see if the transaction was approved, use status_id
     * @param verbiage Value for String
     */
    @JsonSetter("verbiage")
    public void setVerbiage(String verbiage) {
        this.verbiage = verbiage;
    }

    /**
     * Getter for VoidDate.
     * void date
     * @return Returns the LocalDateTime
     */
    @JsonGetter("void_date")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getVoidDate() {
        return voidDate;
    }

    /**
     * Setter for VoidDate.
     * void date
     * @param voidDate Value for LocalDateTime
     */
    @JsonSetter("void_date")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setVoidDate(LocalDateTime voidDate) {
        this.voidDate = voidDate;
    }

    /**
     * Getter for Batch.
     * Batch
     * @return Returns the String
     */
    @JsonGetter("batch")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getBatch() {
        return batch;
    }

    /**
     * Setter for Batch.
     * Batch
     * @param batch Value for String
     */
    @JsonSetter("batch")
    public void setBatch(String batch) {
        this.batch = batch;
    }

    /**
     * Getter for ResponseMessage.
     * Response Message
     * @return Returns the String
     */
    @JsonGetter("response_message")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getResponseMessage() {
        return responseMessage;
    }

    /**
     * Setter for ResponseMessage.
     * Response Message
     * @param responseMessage Value for String
     */
    @JsonSetter("response_message")
    public void setResponseMessage(String responseMessage) {
        this.responseMessage = responseMessage;
    }

    /**
     * Getter for ReturnDate.
     * Return Date
     * @return Returns the String
     */
    @JsonGetter("return_date")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getReturnDate() {
        return returnDate;
    }

    /**
     * Setter for ReturnDate.
     * Return Date
     * @param returnDate Value for String
     */
    @JsonSetter("return_date")
    public void setReturnDate(String returnDate) {
        this.returnDate = returnDate;
    }

    /**
     * Converts this List10 into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "List10 [" + "transactionAmount=" + transactionAmount + ", createdTs=" + createdTs
                + ", id=" + id + ", modifiedTs=" + modifiedTs + ", paymentMethod=" + paymentMethod
                + ", additionalAmounts=" + additionalAmounts + ", billingCity=" + billingCity
                + ", billingPhone=" + billingPhone + ", billingState=" + billingState
                + ", billingStreet=" + billingStreet + ", billingZip=" + billingZip
                + ", checkinDate=" + checkinDate + ", checkoutDate=" + checkoutDate
                + ", clerkNumber=" + clerkNumber + ", contactApiId=" + contactApiId + ", contactId="
                + contactId + ", customData=" + customData + ", customerId=" + customerId
                + ", customerIp=" + customerIp + ", description=" + description + ", dlNumber="
                + dlNumber + ", dlState=" + dlState + ", dobYear=" + dobYear + ", iiasInd="
                + iiasInd + ", imageFront=" + imageFront + ", imageBack=" + imageBack
                + ", installment=" + installment + ", installmentNumber=" + installmentNumber
                + ", installmentCount=" + installmentCount + ", locationApiId=" + locationApiId
                + ", locationId=" + locationId + ", noShow=" + noShow
                + ", notificationEmailAddress=" + notificationEmailAddress + ", orderNum="
                + orderNum + ", poNumber=" + poNumber + ", previousTransactionId="
                + previousTransactionId + ", productTransactionId=" + productTransactionId
                + ", quickInvoiceId=" + quickInvoiceId + ", recurring=" + recurring
                + ", recurringNumber=" + recurringNumber + ", roomNum=" + roomNum + ", roomRate="
                + roomRate + ", saveAccount=" + saveAccount + ", saveAccountTitle="
                + saveAccountTitle + ", settleDate=" + settleDate + ", statusId=" + statusId
                + ", subtotalAmount=" + subtotalAmount + ", surchargeAmount=" + surchargeAmount
                + ", tags=" + tags + ", safe=" + safe + ", tax=" + tax + ", terminalId="
                + terminalId + ", termsAgree=" + termsAgree + ", termsAgreeIp=" + termsAgreeIp
                + ", ticket=" + ticket + ", tipAmount=" + tipAmount + ", transactionApiId="
                + transactionApiId + ", transactionC1=" + transactionC1 + ", transactionC2="
                + transactionC2 + ", transactionC3=" + transactionC3 + ", transactionC4="
                + transactionC4 + ", trxSourceId=" + trxSourceId + ", accountHolderName="
                + accountHolderName + ", accountNumber=" + accountNumber + ", accountType="
                + accountType + ", accountVaultApiId=" + accountVaultApiId + ", accountVaultId="
                + accountVaultId + ", achIdentifier=" + achIdentifier + ", achSecCode=" + achSecCode
                + ", advanceDeposit=" + advanceDeposit + ", authAmount=" + authAmount
                + ", authCode=" + authCode + ", avs=" + avs + ", avsEnhanced=" + avsEnhanced
                + ", cardholderPresent=" + cardholderPresent + ", cardPresent=" + cardPresent
                + ", checkNumber=" + checkNumber + ", cvv=" + cvv + ", cvvResponse=" + cvvResponse
                + ", eFormat=" + eFormat + ", eTrackData=" + eTrackData + ", eSerialNumber="
                + eSerialNumber + ", entryModeId=" + entryModeId + ", emvReceiptData="
                + emvReceiptData + ", firstSix=" + firstSix + ", lastFour=" + lastFour
                + ", secureAuthData=" + secureAuthData + ", secureProtocolVersion="
                + secureProtocolVersion + ", secureCollectionIndicator=" + secureCollectionIndicator
                + ", secureCrytogram=" + secureCrytogram + ", secureDirectoryServerTransactionId="
                + secureDirectoryServerTransactionId + ", secureEcommUrl=" + secureEcommUrl
                + ", terminalSerialNumber=" + terminalSerialNumber + ", threedsecure="
                + threedsecure + ", trackData=" + trackData + ", transactionSettlementStatus="
                + transactionSettlementStatus + ", chargeBackDate=" + chargeBackDate
                + ", isRecurring=" + isRecurring + ", notificationEmailSent="
                + notificationEmailSent + ", par=" + par + ", reasonCodeId=" + reasonCodeId
                + ", recurringId=" + recurringId + ", transactionBatchId=" + transactionBatchId
                + ", typeId=" + typeId + ", verbiage=" + verbiage + ", voidDate=" + voidDate
                + ", batch=" + batch + ", responseMessage=" + responseMessage + ", returnDate="
                + returnDate + "]";
    }

    /**
     * Builds a new {@link List10.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link List10.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(transactionAmount, createdTs, id, modifiedTs, paymentMethod)
                .additionalAmounts(getAdditionalAmounts())
                .billingCity(getBillingCity())
                .billingPhone(getBillingPhone())
                .billingState(getBillingState())
                .billingStreet(getBillingStreet())
                .billingZip(getBillingZip())
                .checkinDate(getCheckinDate())
                .checkoutDate(getCheckoutDate())
                .clerkNumber(getClerkNumber())
                .contactApiId(getContactApiId())
                .contactId(getContactId())
                .customData(getCustomData())
                .customerId(getCustomerId())
                .customerIp(getCustomerIp())
                .description(getDescription())
                .dlNumber(getDlNumber())
                .dlState(getDlState())
                .dobYear(getDobYear())
                .iiasInd(getIiasInd())
                .imageFront(getImageFront())
                .imageBack(getImageBack())
                .installment(getInstallment())
                .installmentNumber(getInstallmentNumber())
                .installmentCount(getInstallmentCount())
                .locationApiId(getLocationApiId())
                .locationId(getLocationId())
                .noShow(getNoShow())
                .notificationEmailAddress(getNotificationEmailAddress())
                .orderNum(getOrderNum())
                .poNumber(getPoNumber())
                .previousTransactionId(getPreviousTransactionId())
                .productTransactionId(getProductTransactionId())
                .quickInvoiceId(getQuickInvoiceId())
                .recurring(getRecurring())
                .recurringNumber(getRecurringNumber())
                .roomNum(getRoomNum())
                .roomRate(getRoomRate())
                .saveAccount(getSaveAccount())
                .saveAccountTitle(getSaveAccountTitle())
                .settleDate(getSettleDate())
                .statusId(getStatusId())
                .subtotalAmount(getSubtotalAmount())
                .surchargeAmount(getSurchargeAmount())
                .tags(getTags())
                .safe(getSafe())
                .tax(getTax())
                .terminalId(getTerminalId())
                .termsAgree(getTermsAgree())
                .termsAgreeIp(getTermsAgreeIp())
                .ticket(getTicket())
                .tipAmount(getTipAmount())
                .transactionApiId(getTransactionApiId())
                .transactionC1(getTransactionC1())
                .transactionC2(getTransactionC2())
                .transactionC3(getTransactionC3())
                .transactionC4(getTransactionC4())
                .trxSourceId(getTrxSourceId())
                .accountHolderName(getAccountHolderName())
                .accountNumber(getAccountNumber())
                .accountType(getAccountType())
                .accountVaultApiId(getAccountVaultApiId())
                .accountVaultId(getAccountVaultId())
                .achIdentifier(getAchIdentifier())
                .achSecCode(getAchSecCode())
                .advanceDeposit(getAdvanceDeposit())
                .authAmount(getAuthAmount())
                .authCode(getAuthCode())
                .avs(getAvs())
                .avsEnhanced(getAvsEnhanced())
                .cardholderPresent(getCardholderPresent())
                .cardPresent(getCardPresent())
                .checkNumber(getCheckNumber())
                .cvv(getCvv())
                .cvvResponse(getCvvResponse())
                .eFormat(getEFormat())
                .eTrackData(getETrackData())
                .eSerialNumber(getESerialNumber())
                .entryModeId(getEntryModeId())
                .emvReceiptData(getEmvReceiptData())
                .firstSix(getFirstSix())
                .lastFour(getLastFour())
                .secureAuthData(getSecureAuthData())
                .secureProtocolVersion(getSecureProtocolVersion())
                .secureCollectionIndicator(getSecureCollectionIndicator())
                .secureCrytogram(getSecureCrytogram())
                .secureDirectoryServerTransactionId(getSecureDirectoryServerTransactionId())
                .secureEcommUrl(getSecureEcommUrl())
                .terminalSerialNumber(getTerminalSerialNumber())
                .threedsecure(getThreedsecure())
                .trackData(getTrackData())
                .transactionSettlementStatus(getTransactionSettlementStatus())
                .chargeBackDate(getChargeBackDate())
                .isRecurring(getIsRecurring())
                .notificationEmailSent(getNotificationEmailSent())
                .par(getPar())
                .reasonCodeId(getReasonCodeId())
                .recurringId(getRecurringId())
                .transactionBatchId(getTransactionBatchId())
                .typeId(getTypeId())
                .verbiage(getVerbiage())
                .voidDate(getVoidDate())
                .batch(getBatch())
                .responseMessage(getResponseMessage())
                .returnDate(getReturnDate());
        return builder;
    }

    /**
     * Class to build instances of {@link List10}.
     */
    public static class Builder {
        private double transactionAmount;
        private LocalDateTime createdTs;
        private String id;
        private LocalDateTime modifiedTs;
        private PaymentMethod4Enum paymentMethod;
        private List<AdditionalAmount> additionalAmounts;
        private String billingCity;
        private String billingPhone;
        private String billingState;
        private String billingStreet;
        private String billingZip;
        private String checkinDate;
        private String checkoutDate;
        private String clerkNumber;
        private String contactApiId;
        private String contactId;
        private String customData;
        private String customerId;
        private String customerIp;
        private String description;
        private String dlNumber;
        private String dlState;
        private String dobYear;
        private Boolean iiasInd;
        private String imageFront;
        private String imageBack;
        private Boolean installment;
        private Double installmentNumber;
        private Double installmentCount;
        private String locationApiId;
        private String locationId;
        private Boolean noShow;
        private String notificationEmailAddress;
        private String orderNum;
        private String poNumber;
        private String previousTransactionId;
        private String productTransactionId;
        private String quickInvoiceId;
        private Boolean recurring;
        private Double recurringNumber;
        private String roomNum;
        private Double roomRate;
        private Boolean saveAccount;
        private String saveAccountTitle;
        private String settleDate;
        private Integer statusId;
        private Double subtotalAmount;
        private Double surchargeAmount;
        private String tags;
        private String safe;
        private Double tax;
        private String terminalId;
        private Integer termsAgree;
        private String termsAgreeIp;
        private Integer ticket;
        private Double tipAmount;
        private String transactionApiId;
        private String transactionC1;
        private String transactionC2;
        private String transactionC3;
        private String transactionC4;
        private Integer trxSourceId;
        private String accountHolderName;
        private String accountNumber;
        private String accountType;
        private String accountVaultApiId;
        private String accountVaultId;
        private String achIdentifier;
        private AchSecCodeEnum achSecCode;
        private Boolean advanceDeposit;
        private Double authAmount;
        private String authCode;
        private AvsEnum avs;
        private String avsEnhanced;
        private Boolean cardholderPresent;
        private Boolean cardPresent;
        private String checkNumber;
        private String cvv;
        private String cvvResponse;
        private EFormatEnum eFormat;
        private String eTrackData;
        private String eSerialNumber;
        private EntryModeIdEnum entryModeId;
        private String emvReceiptData;
        private String firstSix;
        private String lastFour;
        private String secureAuthData;
        private Integer secureProtocolVersion;
        private Integer secureCollectionIndicator;
        private String secureCrytogram;
        private String secureDirectoryServerTransactionId;
        private String secureEcommUrl;
        private String terminalSerialNumber;
        private Boolean threedsecure;
        private String trackData;
        private String transactionSettlementStatus;
        private String chargeBackDate;
        private Boolean isRecurring;
        private String notificationEmailSent;
        private String par;
        private Double reasonCodeId;
        private String recurringId;
        private String transactionBatchId;
        private TypeIdEnum typeId;
        private String verbiage;
        private LocalDateTime voidDate;
        private String batch;
        private String responseMessage;
        private String returnDate;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  transactionAmount  double value for transactionAmount.
         * @param  createdTs  LocalDateTime value for createdTs.
         * @param  id  String value for id.
         * @param  modifiedTs  LocalDateTime value for modifiedTs.
         * @param  paymentMethod  PaymentMethod4Enum value for paymentMethod.
         */
        public Builder(double transactionAmount, LocalDateTime createdTs, String id,
                LocalDateTime modifiedTs, PaymentMethod4Enum paymentMethod) {
            this.transactionAmount = transactionAmount;
            this.createdTs = createdTs;
            this.id = id;
            this.modifiedTs = modifiedTs;
            this.paymentMethod = paymentMethod;
        }

        /**
         * Setter for transactionAmount.
         * @param  transactionAmount  double value for transactionAmount.
         * @return Builder
         */
        public Builder transactionAmount(double transactionAmount) {
            this.transactionAmount = transactionAmount;
            return this;
        }

        /**
         * Setter for createdTs.
         * @param  createdTs  LocalDateTime value for createdTs.
         * @return Builder
         */
        public Builder createdTs(LocalDateTime createdTs) {
            this.createdTs = createdTs;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  String value for id.
         * @return Builder
         */
        public Builder id(String id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for modifiedTs.
         * @param  modifiedTs  LocalDateTime value for modifiedTs.
         * @return Builder
         */
        public Builder modifiedTs(LocalDateTime modifiedTs) {
            this.modifiedTs = modifiedTs;
            return this;
        }

        /**
         * Setter for paymentMethod.
         * @param  paymentMethod  PaymentMethod4Enum value for paymentMethod.
         * @return Builder
         */
        public Builder paymentMethod(PaymentMethod4Enum paymentMethod) {
            this.paymentMethod = paymentMethod;
            return this;
        }

        /**
         * Setter for additionalAmounts.
         * @param  additionalAmounts  List of AdditionalAmount value for additionalAmounts.
         * @return Builder
         */
        public Builder additionalAmounts(List<AdditionalAmount> additionalAmounts) {
            this.additionalAmounts = additionalAmounts;
            return this;
        }

        /**
         * Setter for billingCity.
         * @param  billingCity  String value for billingCity.
         * @return Builder
         */
        public Builder billingCity(String billingCity) {
            this.billingCity = billingCity;
            return this;
        }

        /**
         * Setter for billingPhone.
         * @param  billingPhone  String value for billingPhone.
         * @return Builder
         */
        public Builder billingPhone(String billingPhone) {
            this.billingPhone = billingPhone;
            return this;
        }

        /**
         * Setter for billingState.
         * @param  billingState  String value for billingState.
         * @return Builder
         */
        public Builder billingState(String billingState) {
            this.billingState = billingState;
            return this;
        }

        /**
         * Setter for billingStreet.
         * @param  billingStreet  String value for billingStreet.
         * @return Builder
         */
        public Builder billingStreet(String billingStreet) {
            this.billingStreet = billingStreet;
            return this;
        }

        /**
         * Setter for billingZip.
         * @param  billingZip  String value for billingZip.
         * @return Builder
         */
        public Builder billingZip(String billingZip) {
            this.billingZip = billingZip;
            return this;
        }

        /**
         * Setter for checkinDate.
         * @param  checkinDate  String value for checkinDate.
         * @return Builder
         */
        public Builder checkinDate(String checkinDate) {
            this.checkinDate = checkinDate;
            return this;
        }

        /**
         * Setter for checkoutDate.
         * @param  checkoutDate  String value for checkoutDate.
         * @return Builder
         */
        public Builder checkoutDate(String checkoutDate) {
            this.checkoutDate = checkoutDate;
            return this;
        }

        /**
         * Setter for clerkNumber.
         * @param  clerkNumber  String value for clerkNumber.
         * @return Builder
         */
        public Builder clerkNumber(String clerkNumber) {
            this.clerkNumber = clerkNumber;
            return this;
        }

        /**
         * Setter for contactApiId.
         * @param  contactApiId  String value for contactApiId.
         * @return Builder
         */
        public Builder contactApiId(String contactApiId) {
            this.contactApiId = contactApiId;
            return this;
        }

        /**
         * Setter for contactId.
         * @param  contactId  String value for contactId.
         * @return Builder
         */
        public Builder contactId(String contactId) {
            this.contactId = contactId;
            return this;
        }

        /**
         * Setter for customData.
         * @param  customData  String value for customData.
         * @return Builder
         */
        public Builder customData(String customData) {
            this.customData = customData;
            return this;
        }

        /**
         * Setter for customerId.
         * @param  customerId  String value for customerId.
         * @return Builder
         */
        public Builder customerId(String customerId) {
            this.customerId = customerId;
            return this;
        }

        /**
         * Setter for customerIp.
         * @param  customerIp  String value for customerIp.
         * @return Builder
         */
        public Builder customerIp(String customerIp) {
            this.customerIp = customerIp;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = description;
            return this;
        }

        /**
         * Setter for dlNumber.
         * @param  dlNumber  String value for dlNumber.
         * @return Builder
         */
        public Builder dlNumber(String dlNumber) {
            this.dlNumber = dlNumber;
            return this;
        }

        /**
         * Setter for dlState.
         * @param  dlState  String value for dlState.
         * @return Builder
         */
        public Builder dlState(String dlState) {
            this.dlState = dlState;
            return this;
        }

        /**
         * Setter for dobYear.
         * @param  dobYear  String value for dobYear.
         * @return Builder
         */
        public Builder dobYear(String dobYear) {
            this.dobYear = dobYear;
            return this;
        }

        /**
         * Setter for iiasInd.
         * @param  iiasInd  Boolean value for iiasInd.
         * @return Builder
         */
        public Builder iiasInd(Boolean iiasInd) {
            this.iiasInd = iiasInd;
            return this;
        }

        /**
         * Setter for imageFront.
         * @param  imageFront  String value for imageFront.
         * @return Builder
         */
        public Builder imageFront(String imageFront) {
            this.imageFront = imageFront;
            return this;
        }

        /**
         * Setter for imageBack.
         * @param  imageBack  String value for imageBack.
         * @return Builder
         */
        public Builder imageBack(String imageBack) {
            this.imageBack = imageBack;
            return this;
        }

        /**
         * Setter for installment.
         * @param  installment  Boolean value for installment.
         * @return Builder
         */
        public Builder installment(Boolean installment) {
            this.installment = installment;
            return this;
        }

        /**
         * Setter for installmentNumber.
         * @param  installmentNumber  Double value for installmentNumber.
         * @return Builder
         */
        public Builder installmentNumber(Double installmentNumber) {
            this.installmentNumber = installmentNumber;
            return this;
        }

        /**
         * Setter for installmentCount.
         * @param  installmentCount  Double value for installmentCount.
         * @return Builder
         */
        public Builder installmentCount(Double installmentCount) {
            this.installmentCount = installmentCount;
            return this;
        }

        /**
         * Setter for locationApiId.
         * @param  locationApiId  String value for locationApiId.
         * @return Builder
         */
        public Builder locationApiId(String locationApiId) {
            this.locationApiId = locationApiId;
            return this;
        }

        /**
         * Setter for locationId.
         * @param  locationId  String value for locationId.
         * @return Builder
         */
        public Builder locationId(String locationId) {
            this.locationId = locationId;
            return this;
        }

        /**
         * Setter for noShow.
         * @param  noShow  Boolean value for noShow.
         * @return Builder
         */
        public Builder noShow(Boolean noShow) {
            this.noShow = noShow;
            return this;
        }

        /**
         * Setter for notificationEmailAddress.
         * @param  notificationEmailAddress  String value for notificationEmailAddress.
         * @return Builder
         */
        public Builder notificationEmailAddress(String notificationEmailAddress) {
            this.notificationEmailAddress = notificationEmailAddress;
            return this;
        }

        /**
         * Setter for orderNum.
         * @param  orderNum  String value for orderNum.
         * @return Builder
         */
        public Builder orderNum(String orderNum) {
            this.orderNum = orderNum;
            return this;
        }

        /**
         * Setter for poNumber.
         * @param  poNumber  String value for poNumber.
         * @return Builder
         */
        public Builder poNumber(String poNumber) {
            this.poNumber = poNumber;
            return this;
        }

        /**
         * Setter for previousTransactionId.
         * @param  previousTransactionId  String value for previousTransactionId.
         * @return Builder
         */
        public Builder previousTransactionId(String previousTransactionId) {
            this.previousTransactionId = previousTransactionId;
            return this;
        }

        /**
         * Setter for productTransactionId.
         * @param  productTransactionId  String value for productTransactionId.
         * @return Builder
         */
        public Builder productTransactionId(String productTransactionId) {
            this.productTransactionId = productTransactionId;
            return this;
        }

        /**
         * Setter for quickInvoiceId.
         * @param  quickInvoiceId  String value for quickInvoiceId.
         * @return Builder
         */
        public Builder quickInvoiceId(String quickInvoiceId) {
            this.quickInvoiceId = quickInvoiceId;
            return this;
        }

        /**
         * Setter for recurring.
         * @param  recurring  Boolean value for recurring.
         * @return Builder
         */
        public Builder recurring(Boolean recurring) {
            this.recurring = recurring;
            return this;
        }

        /**
         * Setter for recurringNumber.
         * @param  recurringNumber  Double value for recurringNumber.
         * @return Builder
         */
        public Builder recurringNumber(Double recurringNumber) {
            this.recurringNumber = recurringNumber;
            return this;
        }

        /**
         * Setter for roomNum.
         * @param  roomNum  String value for roomNum.
         * @return Builder
         */
        public Builder roomNum(String roomNum) {
            this.roomNum = roomNum;
            return this;
        }

        /**
         * Setter for roomRate.
         * @param  roomRate  Double value for roomRate.
         * @return Builder
         */
        public Builder roomRate(Double roomRate) {
            this.roomRate = roomRate;
            return this;
        }

        /**
         * Setter for saveAccount.
         * @param  saveAccount  Boolean value for saveAccount.
         * @return Builder
         */
        public Builder saveAccount(Boolean saveAccount) {
            this.saveAccount = saveAccount;
            return this;
        }

        /**
         * Setter for saveAccountTitle.
         * @param  saveAccountTitle  String value for saveAccountTitle.
         * @return Builder
         */
        public Builder saveAccountTitle(String saveAccountTitle) {
            this.saveAccountTitle = saveAccountTitle;
            return this;
        }

        /**
         * Setter for settleDate.
         * @param  settleDate  String value for settleDate.
         * @return Builder
         */
        public Builder settleDate(String settleDate) {
            this.settleDate = settleDate;
            return this;
        }

        /**
         * Setter for statusId.
         * @param  statusId  Integer value for statusId.
         * @return Builder
         */
        public Builder statusId(Integer statusId) {
            this.statusId = statusId;
            return this;
        }

        /**
         * Setter for subtotalAmount.
         * @param  subtotalAmount  Double value for subtotalAmount.
         * @return Builder
         */
        public Builder subtotalAmount(Double subtotalAmount) {
            this.subtotalAmount = subtotalAmount;
            return this;
        }

        /**
         * Setter for surchargeAmount.
         * @param  surchargeAmount  Double value for surchargeAmount.
         * @return Builder
         */
        public Builder surchargeAmount(Double surchargeAmount) {
            this.surchargeAmount = surchargeAmount;
            return this;
        }

        /**
         * Setter for tags.
         * @param  tags  String value for tags.
         * @return Builder
         */
        public Builder tags(String tags) {
            this.tags = tags;
            return this;
        }

        /**
         * Setter for safe.
         * @param  safe  String value for safe.
         * @return Builder
         */
        public Builder safe(String safe) {
            this.safe = safe;
            return this;
        }

        /**
         * Setter for tax.
         * @param  tax  Double value for tax.
         * @return Builder
         */
        public Builder tax(Double tax) {
            this.tax = tax;
            return this;
        }

        /**
         * Setter for terminalId.
         * @param  terminalId  String value for terminalId.
         * @return Builder
         */
        public Builder terminalId(String terminalId) {
            this.terminalId = terminalId;
            return this;
        }

        /**
         * Setter for termsAgree.
         * @param  termsAgree  Integer value for termsAgree.
         * @return Builder
         */
        public Builder termsAgree(Integer termsAgree) {
            this.termsAgree = termsAgree;
            return this;
        }

        /**
         * Setter for termsAgreeIp.
         * @param  termsAgreeIp  String value for termsAgreeIp.
         * @return Builder
         */
        public Builder termsAgreeIp(String termsAgreeIp) {
            this.termsAgreeIp = termsAgreeIp;
            return this;
        }

        /**
         * Setter for ticket.
         * @param  ticket  Integer value for ticket.
         * @return Builder
         */
        public Builder ticket(Integer ticket) {
            this.ticket = ticket;
            return this;
        }

        /**
         * Setter for tipAmount.
         * @param  tipAmount  Double value for tipAmount.
         * @return Builder
         */
        public Builder tipAmount(Double tipAmount) {
            this.tipAmount = tipAmount;
            return this;
        }

        /**
         * Setter for transactionApiId.
         * @param  transactionApiId  String value for transactionApiId.
         * @return Builder
         */
        public Builder transactionApiId(String transactionApiId) {
            this.transactionApiId = transactionApiId;
            return this;
        }

        /**
         * Setter for transactionC1.
         * @param  transactionC1  String value for transactionC1.
         * @return Builder
         */
        public Builder transactionC1(String transactionC1) {
            this.transactionC1 = transactionC1;
            return this;
        }

        /**
         * Setter for transactionC2.
         * @param  transactionC2  String value for transactionC2.
         * @return Builder
         */
        public Builder transactionC2(String transactionC2) {
            this.transactionC2 = transactionC2;
            return this;
        }

        /**
         * Setter for transactionC3.
         * @param  transactionC3  String value for transactionC3.
         * @return Builder
         */
        public Builder transactionC3(String transactionC3) {
            this.transactionC3 = transactionC3;
            return this;
        }

        /**
         * Setter for transactionC4.
         * @param  transactionC4  String value for transactionC4.
         * @return Builder
         */
        public Builder transactionC4(String transactionC4) {
            this.transactionC4 = transactionC4;
            return this;
        }

        /**
         * Setter for trxSourceId.
         * @param  trxSourceId  Integer value for trxSourceId.
         * @return Builder
         */
        public Builder trxSourceId(Integer trxSourceId) {
            this.trxSourceId = trxSourceId;
            return this;
        }

        /**
         * Setter for accountHolderName.
         * @param  accountHolderName  String value for accountHolderName.
         * @return Builder
         */
        public Builder accountHolderName(String accountHolderName) {
            this.accountHolderName = accountHolderName;
            return this;
        }

        /**
         * Setter for accountNumber.
         * @param  accountNumber  String value for accountNumber.
         * @return Builder
         */
        public Builder accountNumber(String accountNumber) {
            this.accountNumber = accountNumber;
            return this;
        }

        /**
         * Setter for accountType.
         * @param  accountType  String value for accountType.
         * @return Builder
         */
        public Builder accountType(String accountType) {
            this.accountType = accountType;
            return this;
        }

        /**
         * Setter for accountVaultApiId.
         * @param  accountVaultApiId  String value for accountVaultApiId.
         * @return Builder
         */
        public Builder accountVaultApiId(String accountVaultApiId) {
            this.accountVaultApiId = accountVaultApiId;
            return this;
        }

        /**
         * Setter for accountVaultId.
         * @param  accountVaultId  String value for accountVaultId.
         * @return Builder
         */
        public Builder accountVaultId(String accountVaultId) {
            this.accountVaultId = accountVaultId;
            return this;
        }

        /**
         * Setter for achIdentifier.
         * @param  achIdentifier  String value for achIdentifier.
         * @return Builder
         */
        public Builder achIdentifier(String achIdentifier) {
            this.achIdentifier = achIdentifier;
            return this;
        }

        /**
         * Setter for achSecCode.
         * @param  achSecCode  AchSecCodeEnum value for achSecCode.
         * @return Builder
         */
        public Builder achSecCode(AchSecCodeEnum achSecCode) {
            this.achSecCode = achSecCode;
            return this;
        }

        /**
         * Setter for advanceDeposit.
         * @param  advanceDeposit  Boolean value for advanceDeposit.
         * @return Builder
         */
        public Builder advanceDeposit(Boolean advanceDeposit) {
            this.advanceDeposit = advanceDeposit;
            return this;
        }

        /**
         * Setter for authAmount.
         * @param  authAmount  Double value for authAmount.
         * @return Builder
         */
        public Builder authAmount(Double authAmount) {
            this.authAmount = authAmount;
            return this;
        }

        /**
         * Setter for authCode.
         * @param  authCode  String value for authCode.
         * @return Builder
         */
        public Builder authCode(String authCode) {
            this.authCode = authCode;
            return this;
        }

        /**
         * Setter for avs.
         * @param  avs  AvsEnum value for avs.
         * @return Builder
         */
        public Builder avs(AvsEnum avs) {
            this.avs = avs;
            return this;
        }

        /**
         * Setter for avsEnhanced.
         * @param  avsEnhanced  String value for avsEnhanced.
         * @return Builder
         */
        public Builder avsEnhanced(String avsEnhanced) {
            this.avsEnhanced = avsEnhanced;
            return this;
        }

        /**
         * Setter for cardholderPresent.
         * @param  cardholderPresent  Boolean value for cardholderPresent.
         * @return Builder
         */
        public Builder cardholderPresent(Boolean cardholderPresent) {
            this.cardholderPresent = cardholderPresent;
            return this;
        }

        /**
         * Setter for cardPresent.
         * @param  cardPresent  Boolean value for cardPresent.
         * @return Builder
         */
        public Builder cardPresent(Boolean cardPresent) {
            this.cardPresent = cardPresent;
            return this;
        }

        /**
         * Setter for checkNumber.
         * @param  checkNumber  String value for checkNumber.
         * @return Builder
         */
        public Builder checkNumber(String checkNumber) {
            this.checkNumber = checkNumber;
            return this;
        }

        /**
         * Setter for cvv.
         * @param  cvv  String value for cvv.
         * @return Builder
         */
        public Builder cvv(String cvv) {
            this.cvv = cvv;
            return this;
        }

        /**
         * Setter for cvvResponse.
         * @param  cvvResponse  String value for cvvResponse.
         * @return Builder
         */
        public Builder cvvResponse(String cvvResponse) {
            this.cvvResponse = cvvResponse;
            return this;
        }

        /**
         * Setter for eFormat.
         * @param  eFormat  EFormatEnum value for eFormat.
         * @return Builder
         */
        public Builder eFormat(EFormatEnum eFormat) {
            this.eFormat = eFormat;
            return this;
        }

        /**
         * Setter for eTrackData.
         * @param  eTrackData  String value for eTrackData.
         * @return Builder
         */
        public Builder eTrackData(String eTrackData) {
            this.eTrackData = eTrackData;
            return this;
        }

        /**
         * Setter for eSerialNumber.
         * @param  eSerialNumber  String value for eSerialNumber.
         * @return Builder
         */
        public Builder eSerialNumber(String eSerialNumber) {
            this.eSerialNumber = eSerialNumber;
            return this;
        }

        /**
         * Setter for entryModeId.
         * @param  entryModeId  EntryModeIdEnum value for entryModeId.
         * @return Builder
         */
        public Builder entryModeId(EntryModeIdEnum entryModeId) {
            this.entryModeId = entryModeId;
            return this;
        }

        /**
         * Setter for emvReceiptData.
         * @param  emvReceiptData  String value for emvReceiptData.
         * @return Builder
         */
        public Builder emvReceiptData(String emvReceiptData) {
            this.emvReceiptData = emvReceiptData;
            return this;
        }

        /**
         * Setter for firstSix.
         * @param  firstSix  String value for firstSix.
         * @return Builder
         */
        public Builder firstSix(String firstSix) {
            this.firstSix = firstSix;
            return this;
        }

        /**
         * Setter for lastFour.
         * @param  lastFour  String value for lastFour.
         * @return Builder
         */
        public Builder lastFour(String lastFour) {
            this.lastFour = lastFour;
            return this;
        }

        /**
         * Setter for secureAuthData.
         * @param  secureAuthData  String value for secureAuthData.
         * @return Builder
         */
        public Builder secureAuthData(String secureAuthData) {
            this.secureAuthData = secureAuthData;
            return this;
        }

        /**
         * Setter for secureProtocolVersion.
         * @param  secureProtocolVersion  Integer value for secureProtocolVersion.
         * @return Builder
         */
        public Builder secureProtocolVersion(Integer secureProtocolVersion) {
            this.secureProtocolVersion = secureProtocolVersion;
            return this;
        }

        /**
         * Setter for secureCollectionIndicator.
         * @param  secureCollectionIndicator  Integer value for secureCollectionIndicator.
         * @return Builder
         */
        public Builder secureCollectionIndicator(Integer secureCollectionIndicator) {
            this.secureCollectionIndicator = secureCollectionIndicator;
            return this;
        }

        /**
         * Setter for secureCrytogram.
         * @param  secureCrytogram  String value for secureCrytogram.
         * @return Builder
         */
        public Builder secureCrytogram(String secureCrytogram) {
            this.secureCrytogram = secureCrytogram;
            return this;
        }

        /**
         * Setter for secureDirectoryServerTransactionId.
         * @param  secureDirectoryServerTransactionId  String value for
         *         secureDirectoryServerTransactionId.
         * @return Builder
         */
        public Builder secureDirectoryServerTransactionId(
                String secureDirectoryServerTransactionId) {
            this.secureDirectoryServerTransactionId = secureDirectoryServerTransactionId;
            return this;
        }

        /**
         * Setter for secureEcommUrl.
         * @param  secureEcommUrl  String value for secureEcommUrl.
         * @return Builder
         */
        public Builder secureEcommUrl(String secureEcommUrl) {
            this.secureEcommUrl = secureEcommUrl;
            return this;
        }

        /**
         * Setter for terminalSerialNumber.
         * @param  terminalSerialNumber  String value for terminalSerialNumber.
         * @return Builder
         */
        public Builder terminalSerialNumber(String terminalSerialNumber) {
            this.terminalSerialNumber = terminalSerialNumber;
            return this;
        }

        /**
         * Setter for threedsecure.
         * @param  threedsecure  Boolean value for threedsecure.
         * @return Builder
         */
        public Builder threedsecure(Boolean threedsecure) {
            this.threedsecure = threedsecure;
            return this;
        }

        /**
         * Setter for trackData.
         * @param  trackData  String value for trackData.
         * @return Builder
         */
        public Builder trackData(String trackData) {
            this.trackData = trackData;
            return this;
        }

        /**
         * Setter for transactionSettlementStatus.
         * @param  transactionSettlementStatus  String value for transactionSettlementStatus.
         * @return Builder
         */
        public Builder transactionSettlementStatus(String transactionSettlementStatus) {
            this.transactionSettlementStatus = transactionSettlementStatus;
            return this;
        }

        /**
         * Setter for chargeBackDate.
         * @param  chargeBackDate  String value for chargeBackDate.
         * @return Builder
         */
        public Builder chargeBackDate(String chargeBackDate) {
            this.chargeBackDate = chargeBackDate;
            return this;
        }

        /**
         * Setter for isRecurring.
         * @param  isRecurring  Boolean value for isRecurring.
         * @return Builder
         */
        public Builder isRecurring(Boolean isRecurring) {
            this.isRecurring = isRecurring;
            return this;
        }

        /**
         * Setter for notificationEmailSent.
         * @param  notificationEmailSent  String value for notificationEmailSent.
         * @return Builder
         */
        public Builder notificationEmailSent(String notificationEmailSent) {
            this.notificationEmailSent = notificationEmailSent;
            return this;
        }

        /**
         * Setter for par.
         * @param  par  String value for par.
         * @return Builder
         */
        public Builder par(String par) {
            this.par = par;
            return this;
        }

        /**
         * Setter for reasonCodeId.
         * @param  reasonCodeId  Double value for reasonCodeId.
         * @return Builder
         */
        public Builder reasonCodeId(Double reasonCodeId) {
            this.reasonCodeId = reasonCodeId;
            return this;
        }

        /**
         * Setter for recurringId.
         * @param  recurringId  String value for recurringId.
         * @return Builder
         */
        public Builder recurringId(String recurringId) {
            this.recurringId = recurringId;
            return this;
        }

        /**
         * Setter for transactionBatchId.
         * @param  transactionBatchId  String value for transactionBatchId.
         * @return Builder
         */
        public Builder transactionBatchId(String transactionBatchId) {
            this.transactionBatchId = transactionBatchId;
            return this;
        }

        /**
         * Setter for typeId.
         * @param  typeId  TypeIdEnum value for typeId.
         * @return Builder
         */
        public Builder typeId(TypeIdEnum typeId) {
            this.typeId = typeId;
            return this;
        }

        /**
         * Setter for verbiage.
         * @param  verbiage  String value for verbiage.
         * @return Builder
         */
        public Builder verbiage(String verbiage) {
            this.verbiage = verbiage;
            return this;
        }

        /**
         * Setter for voidDate.
         * @param  voidDate  LocalDateTime value for voidDate.
         * @return Builder
         */
        public Builder voidDate(LocalDateTime voidDate) {
            this.voidDate = voidDate;
            return this;
        }

        /**
         * Setter for batch.
         * @param  batch  String value for batch.
         * @return Builder
         */
        public Builder batch(String batch) {
            this.batch = batch;
            return this;
        }

        /**
         * Setter for responseMessage.
         * @param  responseMessage  String value for responseMessage.
         * @return Builder
         */
        public Builder responseMessage(String responseMessage) {
            this.responseMessage = responseMessage;
            return this;
        }

        /**
         * Setter for returnDate.
         * @param  returnDate  String value for returnDate.
         * @return Builder
         */
        public Builder returnDate(String returnDate) {
            this.returnDate = returnDate;
            return this;
        }

        /**
         * Builds a new {@link List10} object using the set fields.
         * @return {@link List10}
         */
        public List10 build() {
            return new List10(transactionAmount, createdTs, id, modifiedTs, paymentMethod,
                    additionalAmounts, billingCity, billingPhone, billingState, billingStreet,
                    billingZip, checkinDate, checkoutDate, clerkNumber, contactApiId, contactId,
                    customData, customerId, customerIp, description, dlNumber, dlState, dobYear,
                    iiasInd, imageFront, imageBack, installment, installmentNumber,
                    installmentCount, locationApiId, locationId, noShow, notificationEmailAddress,
                    orderNum, poNumber, previousTransactionId, productTransactionId, quickInvoiceId,
                    recurring, recurringNumber, roomNum, roomRate, saveAccount, saveAccountTitle,
                    settleDate, statusId, subtotalAmount, surchargeAmount, tags, safe, tax,
                    terminalId, termsAgree, termsAgreeIp, ticket, tipAmount, transactionApiId,
                    transactionC1, transactionC2, transactionC3, transactionC4, trxSourceId,
                    accountHolderName, accountNumber, accountType, accountVaultApiId,
                    accountVaultId, achIdentifier, achSecCode, advanceDeposit, authAmount, authCode,
                    avs, avsEnhanced, cardholderPresent, cardPresent, checkNumber, cvv, cvvResponse,
                    eFormat, eTrackData, eSerialNumber, entryModeId, emvReceiptData, firstSix,
                    lastFour, secureAuthData, secureProtocolVersion, secureCollectionIndicator,
                    secureCrytogram, secureDirectoryServerTransactionId, secureEcommUrl,
                    terminalSerialNumber, threedsecure, trackData, transactionSettlementStatus,
                    chargeBackDate, isRecurring, notificationEmailSent, par, reasonCodeId,
                    recurringId, transactionBatchId, typeId, verbiage, voidDate, batch,
                    responseMessage, returnDate);
        }
    }
}
