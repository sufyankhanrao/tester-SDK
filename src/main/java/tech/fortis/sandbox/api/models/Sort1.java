/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package tech.fortis.sandbox.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for Sort1 type.
 */
public class Sort1 {
    private LocationIdEnum locationId;
    private AccountNumberEnum accountNumber;
    private ContactApiIdEnum contactApiId;
    private FirstNameEnum firstName;
    private LastNameEnum lastName;
    private CellPhoneEnum cellPhone;
    private ContactBalanceEnum contactBalance;
    private AddressEnum address;
    private CityEnum city;
    private StateEnum state;
    private CompanyNameEnum companyName;
    private HeaderMessageEnum headerMessage;
    private DateOfBirthEnum dateOfBirth;
    private EmailTrxReceiptEnum emailTrxReceipt;
    private HomePhoneEnum homePhone;
    private OfficePhoneEnum officePhone;
    private OfficeExtPhoneEnum officeExtPhone;
    private HeaderMessageTypeEnum headerMessageType;
    private UpdateIfExists3Enum updateIfExists;
    private ZipEnum zip;
    private ContactC1Enum contactC1;
    private ContactC1Enum contactC2;
    private ContactC1Enum contactC3;
    private ParentIdEnum parentId;
    private EmailEnum email;
    private IdEnum id;
    private CreatedTsEnum createdTs;
    private ModifiedTsEnum modifiedTs;
    private Active4Enum active;

    /**
     * Default constructor.
     */
    public Sort1() {
    }

    /**
     * Initialization constructor.
     * @param  locationId  LocationIdEnum value for locationId.
     * @param  accountNumber  AccountNumberEnum value for accountNumber.
     * @param  contactApiId  ContactApiIdEnum value for contactApiId.
     * @param  firstName  FirstNameEnum value for firstName.
     * @param  lastName  LastNameEnum value for lastName.
     * @param  cellPhone  CellPhoneEnum value for cellPhone.
     * @param  contactBalance  ContactBalanceEnum value for contactBalance.
     * @param  address  AddressEnum value for address.
     * @param  city  CityEnum value for city.
     * @param  state  StateEnum value for state.
     * @param  companyName  CompanyNameEnum value for companyName.
     * @param  headerMessage  HeaderMessageEnum value for headerMessage.
     * @param  dateOfBirth  DateOfBirthEnum value for dateOfBirth.
     * @param  emailTrxReceipt  EmailTrxReceiptEnum value for emailTrxReceipt.
     * @param  homePhone  HomePhoneEnum value for homePhone.
     * @param  officePhone  OfficePhoneEnum value for officePhone.
     * @param  officeExtPhone  OfficeExtPhoneEnum value for officeExtPhone.
     * @param  headerMessageType  HeaderMessageTypeEnum value for headerMessageType.
     * @param  updateIfExists  UpdateIfExists3Enum value for updateIfExists.
     * @param  zip  ZipEnum value for zip.
     * @param  contactC1  ContactC1Enum value for contactC1.
     * @param  contactC2  ContactC1Enum value for contactC2.
     * @param  contactC3  ContactC1Enum value for contactC3.
     * @param  parentId  ParentIdEnum value for parentId.
     * @param  email  EmailEnum value for email.
     * @param  id  IdEnum value for id.
     * @param  createdTs  CreatedTsEnum value for createdTs.
     * @param  modifiedTs  ModifiedTsEnum value for modifiedTs.
     * @param  active  Active4Enum value for active.
     */
    public Sort1(
            LocationIdEnum locationId,
            AccountNumberEnum accountNumber,
            ContactApiIdEnum contactApiId,
            FirstNameEnum firstName,
            LastNameEnum lastName,
            CellPhoneEnum cellPhone,
            ContactBalanceEnum contactBalance,
            AddressEnum address,
            CityEnum city,
            StateEnum state,
            CompanyNameEnum companyName,
            HeaderMessageEnum headerMessage,
            DateOfBirthEnum dateOfBirth,
            EmailTrxReceiptEnum emailTrxReceipt,
            HomePhoneEnum homePhone,
            OfficePhoneEnum officePhone,
            OfficeExtPhoneEnum officeExtPhone,
            HeaderMessageTypeEnum headerMessageType,
            UpdateIfExists3Enum updateIfExists,
            ZipEnum zip,
            ContactC1Enum contactC1,
            ContactC1Enum contactC2,
            ContactC1Enum contactC3,
            ParentIdEnum parentId,
            EmailEnum email,
            IdEnum id,
            CreatedTsEnum createdTs,
            ModifiedTsEnum modifiedTs,
            Active4Enum active) {
        this.locationId = locationId;
        this.accountNumber = accountNumber;
        this.contactApiId = contactApiId;
        this.firstName = firstName;
        this.lastName = lastName;
        this.cellPhone = cellPhone;
        this.contactBalance = contactBalance;
        this.address = address;
        this.city = city;
        this.state = state;
        this.companyName = companyName;
        this.headerMessage = headerMessage;
        this.dateOfBirth = dateOfBirth;
        this.emailTrxReceipt = emailTrxReceipt;
        this.homePhone = homePhone;
        this.officePhone = officePhone;
        this.officeExtPhone = officeExtPhone;
        this.headerMessageType = headerMessageType;
        this.updateIfExists = updateIfExists;
        this.zip = zip;
        this.contactC1 = contactC1;
        this.contactC2 = contactC2;
        this.contactC3 = contactC3;
        this.parentId = parentId;
        this.email = email;
        this.id = id;
        this.createdTs = createdTs;
        this.modifiedTs = modifiedTs;
        this.active = active;
    }

    /**
     * Getter for LocationId.
     * @return Returns the LocationIdEnum
     */
    @JsonGetter("location_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public LocationIdEnum getLocationId() {
        return locationId;
    }

    /**
     * Setter for LocationId.
     * @param locationId Value for LocationIdEnum
     */
    @JsonSetter("location_id")
    public void setLocationId(LocationIdEnum locationId) {
        this.locationId = locationId;
    }

    /**
     * Getter for AccountNumber.
     * @return Returns the AccountNumberEnum
     */
    @JsonGetter("account_number")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public AccountNumberEnum getAccountNumber() {
        return accountNumber;
    }

    /**
     * Setter for AccountNumber.
     * @param accountNumber Value for AccountNumberEnum
     */
    @JsonSetter("account_number")
    public void setAccountNumber(AccountNumberEnum accountNumber) {
        this.accountNumber = accountNumber;
    }

    /**
     * Getter for ContactApiId.
     * @return Returns the ContactApiIdEnum
     */
    @JsonGetter("contact_api_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ContactApiIdEnum getContactApiId() {
        return contactApiId;
    }

    /**
     * Setter for ContactApiId.
     * @param contactApiId Value for ContactApiIdEnum
     */
    @JsonSetter("contact_api_id")
    public void setContactApiId(ContactApiIdEnum contactApiId) {
        this.contactApiId = contactApiId;
    }

    /**
     * Getter for FirstName.
     * @return Returns the FirstNameEnum
     */
    @JsonGetter("first_name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public FirstNameEnum getFirstName() {
        return firstName;
    }

    /**
     * Setter for FirstName.
     * @param firstName Value for FirstNameEnum
     */
    @JsonSetter("first_name")
    public void setFirstName(FirstNameEnum firstName) {
        this.firstName = firstName;
    }

    /**
     * Getter for LastName.
     * @return Returns the LastNameEnum
     */
    @JsonGetter("last_name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public LastNameEnum getLastName() {
        return lastName;
    }

    /**
     * Setter for LastName.
     * @param lastName Value for LastNameEnum
     */
    @JsonSetter("last_name")
    public void setLastName(LastNameEnum lastName) {
        this.lastName = lastName;
    }

    /**
     * Getter for CellPhone.
     * @return Returns the CellPhoneEnum
     */
    @JsonGetter("cell_phone")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public CellPhoneEnum getCellPhone() {
        return cellPhone;
    }

    /**
     * Setter for CellPhone.
     * @param cellPhone Value for CellPhoneEnum
     */
    @JsonSetter("cell_phone")
    public void setCellPhone(CellPhoneEnum cellPhone) {
        this.cellPhone = cellPhone;
    }

    /**
     * Getter for ContactBalance.
     * @return Returns the ContactBalanceEnum
     */
    @JsonGetter("contact_balance")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ContactBalanceEnum getContactBalance() {
        return contactBalance;
    }

    /**
     * Setter for ContactBalance.
     * @param contactBalance Value for ContactBalanceEnum
     */
    @JsonSetter("contact_balance")
    public void setContactBalance(ContactBalanceEnum contactBalance) {
        this.contactBalance = contactBalance;
    }

    /**
     * Getter for Address.
     * @return Returns the AddressEnum
     */
    @JsonGetter("address")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public AddressEnum getAddress() {
        return address;
    }

    /**
     * Setter for Address.
     * @param address Value for AddressEnum
     */
    @JsonSetter("address")
    public void setAddress(AddressEnum address) {
        this.address = address;
    }

    /**
     * Getter for City.
     * @return Returns the CityEnum
     */
    @JsonGetter("city")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public CityEnum getCity() {
        return city;
    }

    /**
     * Setter for City.
     * @param city Value for CityEnum
     */
    @JsonSetter("city")
    public void setCity(CityEnum city) {
        this.city = city;
    }

    /**
     * Getter for State.
     * @return Returns the StateEnum
     */
    @JsonGetter("state")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public StateEnum getState() {
        return state;
    }

    /**
     * Setter for State.
     * @param state Value for StateEnum
     */
    @JsonSetter("state")
    public void setState(StateEnum state) {
        this.state = state;
    }

    /**
     * Getter for CompanyName.
     * @return Returns the CompanyNameEnum
     */
    @JsonGetter("company_name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public CompanyNameEnum getCompanyName() {
        return companyName;
    }

    /**
     * Setter for CompanyName.
     * @param companyName Value for CompanyNameEnum
     */
    @JsonSetter("company_name")
    public void setCompanyName(CompanyNameEnum companyName) {
        this.companyName = companyName;
    }

    /**
     * Getter for HeaderMessage.
     * @return Returns the HeaderMessageEnum
     */
    @JsonGetter("header_message")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public HeaderMessageEnum getHeaderMessage() {
        return headerMessage;
    }

    /**
     * Setter for HeaderMessage.
     * @param headerMessage Value for HeaderMessageEnum
     */
    @JsonSetter("header_message")
    public void setHeaderMessage(HeaderMessageEnum headerMessage) {
        this.headerMessage = headerMessage;
    }

    /**
     * Getter for DateOfBirth.
     * @return Returns the DateOfBirthEnum
     */
    @JsonGetter("date_of_birth")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public DateOfBirthEnum getDateOfBirth() {
        return dateOfBirth;
    }

    /**
     * Setter for DateOfBirth.
     * @param dateOfBirth Value for DateOfBirthEnum
     */
    @JsonSetter("date_of_birth")
    public void setDateOfBirth(DateOfBirthEnum dateOfBirth) {
        this.dateOfBirth = dateOfBirth;
    }

    /**
     * Getter for EmailTrxReceipt.
     * @return Returns the EmailTrxReceiptEnum
     */
    @JsonGetter("email_trx_receipt")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public EmailTrxReceiptEnum getEmailTrxReceipt() {
        return emailTrxReceipt;
    }

    /**
     * Setter for EmailTrxReceipt.
     * @param emailTrxReceipt Value for EmailTrxReceiptEnum
     */
    @JsonSetter("email_trx_receipt")
    public void setEmailTrxReceipt(EmailTrxReceiptEnum emailTrxReceipt) {
        this.emailTrxReceipt = emailTrxReceipt;
    }

    /**
     * Getter for HomePhone.
     * @return Returns the HomePhoneEnum
     */
    @JsonGetter("home_phone")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public HomePhoneEnum getHomePhone() {
        return homePhone;
    }

    /**
     * Setter for HomePhone.
     * @param homePhone Value for HomePhoneEnum
     */
    @JsonSetter("home_phone")
    public void setHomePhone(HomePhoneEnum homePhone) {
        this.homePhone = homePhone;
    }

    /**
     * Getter for OfficePhone.
     * @return Returns the OfficePhoneEnum
     */
    @JsonGetter("office_phone")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public OfficePhoneEnum getOfficePhone() {
        return officePhone;
    }

    /**
     * Setter for OfficePhone.
     * @param officePhone Value for OfficePhoneEnum
     */
    @JsonSetter("office_phone")
    public void setOfficePhone(OfficePhoneEnum officePhone) {
        this.officePhone = officePhone;
    }

    /**
     * Getter for OfficeExtPhone.
     * @return Returns the OfficeExtPhoneEnum
     */
    @JsonGetter("office_ext_phone")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public OfficeExtPhoneEnum getOfficeExtPhone() {
        return officeExtPhone;
    }

    /**
     * Setter for OfficeExtPhone.
     * @param officeExtPhone Value for OfficeExtPhoneEnum
     */
    @JsonSetter("office_ext_phone")
    public void setOfficeExtPhone(OfficeExtPhoneEnum officeExtPhone) {
        this.officeExtPhone = officeExtPhone;
    }

    /**
     * Getter for HeaderMessageType.
     * @return Returns the HeaderMessageTypeEnum
     */
    @JsonGetter("header_message_type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public HeaderMessageTypeEnum getHeaderMessageType() {
        return headerMessageType;
    }

    /**
     * Setter for HeaderMessageType.
     * @param headerMessageType Value for HeaderMessageTypeEnum
     */
    @JsonSetter("header_message_type")
    public void setHeaderMessageType(HeaderMessageTypeEnum headerMessageType) {
        this.headerMessageType = headerMessageType;
    }

    /**
     * Getter for UpdateIfExists.
     * @return Returns the UpdateIfExists3Enum
     */
    @JsonGetter("update_if_exists")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public UpdateIfExists3Enum getUpdateIfExists() {
        return updateIfExists;
    }

    /**
     * Setter for UpdateIfExists.
     * @param updateIfExists Value for UpdateIfExists3Enum
     */
    @JsonSetter("update_if_exists")
    public void setUpdateIfExists(UpdateIfExists3Enum updateIfExists) {
        this.updateIfExists = updateIfExists;
    }

    /**
     * Getter for Zip.
     * @return Returns the ZipEnum
     */
    @JsonGetter("zip")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ZipEnum getZip() {
        return zip;
    }

    /**
     * Setter for Zip.
     * @param zip Value for ZipEnum
     */
    @JsonSetter("zip")
    public void setZip(ZipEnum zip) {
        this.zip = zip;
    }

    /**
     * Getter for ContactC1.
     * @return Returns the ContactC1Enum
     */
    @JsonGetter("contact_c1")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ContactC1Enum getContactC1() {
        return contactC1;
    }

    /**
     * Setter for ContactC1.
     * @param contactC1 Value for ContactC1Enum
     */
    @JsonSetter("contact_c1")
    public void setContactC1(ContactC1Enum contactC1) {
        this.contactC1 = contactC1;
    }

    /**
     * Getter for ContactC2.
     * @return Returns the ContactC1Enum
     */
    @JsonGetter("contact_c2")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ContactC1Enum getContactC2() {
        return contactC2;
    }

    /**
     * Setter for ContactC2.
     * @param contactC2 Value for ContactC1Enum
     */
    @JsonSetter("contact_c2")
    public void setContactC2(ContactC1Enum contactC2) {
        this.contactC2 = contactC2;
    }

    /**
     * Getter for ContactC3.
     * @return Returns the ContactC1Enum
     */
    @JsonGetter("contact_c3")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ContactC1Enum getContactC3() {
        return contactC3;
    }

    /**
     * Setter for ContactC3.
     * @param contactC3 Value for ContactC1Enum
     */
    @JsonSetter("contact_c3")
    public void setContactC3(ContactC1Enum contactC3) {
        this.contactC3 = contactC3;
    }

    /**
     * Getter for ParentId.
     * @return Returns the ParentIdEnum
     */
    @JsonGetter("parent_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ParentIdEnum getParentId() {
        return parentId;
    }

    /**
     * Setter for ParentId.
     * @param parentId Value for ParentIdEnum
     */
    @JsonSetter("parent_id")
    public void setParentId(ParentIdEnum parentId) {
        this.parentId = parentId;
    }

    /**
     * Getter for Email.
     * @return Returns the EmailEnum
     */
    @JsonGetter("email")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public EmailEnum getEmail() {
        return email;
    }

    /**
     * Setter for Email.
     * @param email Value for EmailEnum
     */
    @JsonSetter("email")
    public void setEmail(EmailEnum email) {
        this.email = email;
    }

    /**
     * Getter for Id.
     * @return Returns the IdEnum
     */
    @JsonGetter("id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public IdEnum getId() {
        return id;
    }

    /**
     * Setter for Id.
     * @param id Value for IdEnum
     */
    @JsonSetter("id")
    public void setId(IdEnum id) {
        this.id = id;
    }

    /**
     * Getter for CreatedTs.
     * @return Returns the CreatedTsEnum
     */
    @JsonGetter("created_ts")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public CreatedTsEnum getCreatedTs() {
        return createdTs;
    }

    /**
     * Setter for CreatedTs.
     * @param createdTs Value for CreatedTsEnum
     */
    @JsonSetter("created_ts")
    public void setCreatedTs(CreatedTsEnum createdTs) {
        this.createdTs = createdTs;
    }

    /**
     * Getter for ModifiedTs.
     * @return Returns the ModifiedTsEnum
     */
    @JsonGetter("modified_ts")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ModifiedTsEnum getModifiedTs() {
        return modifiedTs;
    }

    /**
     * Setter for ModifiedTs.
     * @param modifiedTs Value for ModifiedTsEnum
     */
    @JsonSetter("modified_ts")
    public void setModifiedTs(ModifiedTsEnum modifiedTs) {
        this.modifiedTs = modifiedTs;
    }

    /**
     * Getter for Active.
     * @return Returns the Active4Enum
     */
    @JsonGetter("active")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Active4Enum getActive() {
        return active;
    }

    /**
     * Setter for Active.
     * @param active Value for Active4Enum
     */
    @JsonSetter("active")
    public void setActive(Active4Enum active) {
        this.active = active;
    }

    /**
     * Converts this Sort1 into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Sort1 [" + "locationId=" + locationId + ", accountNumber=" + accountNumber
                + ", contactApiId=" + contactApiId + ", firstName=" + firstName + ", lastName="
                + lastName + ", cellPhone=" + cellPhone + ", contactBalance=" + contactBalance
                + ", address=" + address + ", city=" + city + ", state=" + state + ", companyName="
                + companyName + ", headerMessage=" + headerMessage + ", dateOfBirth=" + dateOfBirth
                + ", emailTrxReceipt=" + emailTrxReceipt + ", homePhone=" + homePhone
                + ", officePhone=" + officePhone + ", officeExtPhone=" + officeExtPhone
                + ", headerMessageType=" + headerMessageType + ", updateIfExists=" + updateIfExists
                + ", zip=" + zip + ", contactC1=" + contactC1 + ", contactC2=" + contactC2
                + ", contactC3=" + contactC3 + ", parentId=" + parentId + ", email=" + email
                + ", id=" + id + ", createdTs=" + createdTs + ", modifiedTs=" + modifiedTs
                + ", active=" + active + "]";
    }

    /**
     * Builds a new {@link Sort1.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Sort1.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .locationId(getLocationId())
                .accountNumber(getAccountNumber())
                .contactApiId(getContactApiId())
                .firstName(getFirstName())
                .lastName(getLastName())
                .cellPhone(getCellPhone())
                .contactBalance(getContactBalance())
                .address(getAddress())
                .city(getCity())
                .state(getState())
                .companyName(getCompanyName())
                .headerMessage(getHeaderMessage())
                .dateOfBirth(getDateOfBirth())
                .emailTrxReceipt(getEmailTrxReceipt())
                .homePhone(getHomePhone())
                .officePhone(getOfficePhone())
                .officeExtPhone(getOfficeExtPhone())
                .headerMessageType(getHeaderMessageType())
                .updateIfExists(getUpdateIfExists())
                .zip(getZip())
                .contactC1(getContactC1())
                .contactC2(getContactC2())
                .contactC3(getContactC3())
                .parentId(getParentId())
                .email(getEmail())
                .id(getId())
                .createdTs(getCreatedTs())
                .modifiedTs(getModifiedTs())
                .active(getActive());
        return builder;
    }

    /**
     * Class to build instances of {@link Sort1}.
     */
    public static class Builder {
        private LocationIdEnum locationId;
        private AccountNumberEnum accountNumber;
        private ContactApiIdEnum contactApiId;
        private FirstNameEnum firstName;
        private LastNameEnum lastName;
        private CellPhoneEnum cellPhone;
        private ContactBalanceEnum contactBalance;
        private AddressEnum address;
        private CityEnum city;
        private StateEnum state;
        private CompanyNameEnum companyName;
        private HeaderMessageEnum headerMessage;
        private DateOfBirthEnum dateOfBirth;
        private EmailTrxReceiptEnum emailTrxReceipt;
        private HomePhoneEnum homePhone;
        private OfficePhoneEnum officePhone;
        private OfficeExtPhoneEnum officeExtPhone;
        private HeaderMessageTypeEnum headerMessageType;
        private UpdateIfExists3Enum updateIfExists;
        private ZipEnum zip;
        private ContactC1Enum contactC1;
        private ContactC1Enum contactC2;
        private ContactC1Enum contactC3;
        private ParentIdEnum parentId;
        private EmailEnum email;
        private IdEnum id;
        private CreatedTsEnum createdTs;
        private ModifiedTsEnum modifiedTs;
        private Active4Enum active;



        /**
         * Setter for locationId.
         * @param  locationId  LocationIdEnum value for locationId.
         * @return Builder
         */
        public Builder locationId(LocationIdEnum locationId) {
            this.locationId = locationId;
            return this;
        }

        /**
         * Setter for accountNumber.
         * @param  accountNumber  AccountNumberEnum value for accountNumber.
         * @return Builder
         */
        public Builder accountNumber(AccountNumberEnum accountNumber) {
            this.accountNumber = accountNumber;
            return this;
        }

        /**
         * Setter for contactApiId.
         * @param  contactApiId  ContactApiIdEnum value for contactApiId.
         * @return Builder
         */
        public Builder contactApiId(ContactApiIdEnum contactApiId) {
            this.contactApiId = contactApiId;
            return this;
        }

        /**
         * Setter for firstName.
         * @param  firstName  FirstNameEnum value for firstName.
         * @return Builder
         */
        public Builder firstName(FirstNameEnum firstName) {
            this.firstName = firstName;
            return this;
        }

        /**
         * Setter for lastName.
         * @param  lastName  LastNameEnum value for lastName.
         * @return Builder
         */
        public Builder lastName(LastNameEnum lastName) {
            this.lastName = lastName;
            return this;
        }

        /**
         * Setter for cellPhone.
         * @param  cellPhone  CellPhoneEnum value for cellPhone.
         * @return Builder
         */
        public Builder cellPhone(CellPhoneEnum cellPhone) {
            this.cellPhone = cellPhone;
            return this;
        }

        /**
         * Setter for contactBalance.
         * @param  contactBalance  ContactBalanceEnum value for contactBalance.
         * @return Builder
         */
        public Builder contactBalance(ContactBalanceEnum contactBalance) {
            this.contactBalance = contactBalance;
            return this;
        }

        /**
         * Setter for address.
         * @param  address  AddressEnum value for address.
         * @return Builder
         */
        public Builder address(AddressEnum address) {
            this.address = address;
            return this;
        }

        /**
         * Setter for city.
         * @param  city  CityEnum value for city.
         * @return Builder
         */
        public Builder city(CityEnum city) {
            this.city = city;
            return this;
        }

        /**
         * Setter for state.
         * @param  state  StateEnum value for state.
         * @return Builder
         */
        public Builder state(StateEnum state) {
            this.state = state;
            return this;
        }

        /**
         * Setter for companyName.
         * @param  companyName  CompanyNameEnum value for companyName.
         * @return Builder
         */
        public Builder companyName(CompanyNameEnum companyName) {
            this.companyName = companyName;
            return this;
        }

        /**
         * Setter for headerMessage.
         * @param  headerMessage  HeaderMessageEnum value for headerMessage.
         * @return Builder
         */
        public Builder headerMessage(HeaderMessageEnum headerMessage) {
            this.headerMessage = headerMessage;
            return this;
        }

        /**
         * Setter for dateOfBirth.
         * @param  dateOfBirth  DateOfBirthEnum value for dateOfBirth.
         * @return Builder
         */
        public Builder dateOfBirth(DateOfBirthEnum dateOfBirth) {
            this.dateOfBirth = dateOfBirth;
            return this;
        }

        /**
         * Setter for emailTrxReceipt.
         * @param  emailTrxReceipt  EmailTrxReceiptEnum value for emailTrxReceipt.
         * @return Builder
         */
        public Builder emailTrxReceipt(EmailTrxReceiptEnum emailTrxReceipt) {
            this.emailTrxReceipt = emailTrxReceipt;
            return this;
        }

        /**
         * Setter for homePhone.
         * @param  homePhone  HomePhoneEnum value for homePhone.
         * @return Builder
         */
        public Builder homePhone(HomePhoneEnum homePhone) {
            this.homePhone = homePhone;
            return this;
        }

        /**
         * Setter for officePhone.
         * @param  officePhone  OfficePhoneEnum value for officePhone.
         * @return Builder
         */
        public Builder officePhone(OfficePhoneEnum officePhone) {
            this.officePhone = officePhone;
            return this;
        }

        /**
         * Setter for officeExtPhone.
         * @param  officeExtPhone  OfficeExtPhoneEnum value for officeExtPhone.
         * @return Builder
         */
        public Builder officeExtPhone(OfficeExtPhoneEnum officeExtPhone) {
            this.officeExtPhone = officeExtPhone;
            return this;
        }

        /**
         * Setter for headerMessageType.
         * @param  headerMessageType  HeaderMessageTypeEnum value for headerMessageType.
         * @return Builder
         */
        public Builder headerMessageType(HeaderMessageTypeEnum headerMessageType) {
            this.headerMessageType = headerMessageType;
            return this;
        }

        /**
         * Setter for updateIfExists.
         * @param  updateIfExists  UpdateIfExists3Enum value for updateIfExists.
         * @return Builder
         */
        public Builder updateIfExists(UpdateIfExists3Enum updateIfExists) {
            this.updateIfExists = updateIfExists;
            return this;
        }

        /**
         * Setter for zip.
         * @param  zip  ZipEnum value for zip.
         * @return Builder
         */
        public Builder zip(ZipEnum zip) {
            this.zip = zip;
            return this;
        }

        /**
         * Setter for contactC1.
         * @param  contactC1  ContactC1Enum value for contactC1.
         * @return Builder
         */
        public Builder contactC1(ContactC1Enum contactC1) {
            this.contactC1 = contactC1;
            return this;
        }

        /**
         * Setter for contactC2.
         * @param  contactC2  ContactC1Enum value for contactC2.
         * @return Builder
         */
        public Builder contactC2(ContactC1Enum contactC2) {
            this.contactC2 = contactC2;
            return this;
        }

        /**
         * Setter for contactC3.
         * @param  contactC3  ContactC1Enum value for contactC3.
         * @return Builder
         */
        public Builder contactC3(ContactC1Enum contactC3) {
            this.contactC3 = contactC3;
            return this;
        }

        /**
         * Setter for parentId.
         * @param  parentId  ParentIdEnum value for parentId.
         * @return Builder
         */
        public Builder parentId(ParentIdEnum parentId) {
            this.parentId = parentId;
            return this;
        }

        /**
         * Setter for email.
         * @param  email  EmailEnum value for email.
         * @return Builder
         */
        public Builder email(EmailEnum email) {
            this.email = email;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  IdEnum value for id.
         * @return Builder
         */
        public Builder id(IdEnum id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for createdTs.
         * @param  createdTs  CreatedTsEnum value for createdTs.
         * @return Builder
         */
        public Builder createdTs(CreatedTsEnum createdTs) {
            this.createdTs = createdTs;
            return this;
        }

        /**
         * Setter for modifiedTs.
         * @param  modifiedTs  ModifiedTsEnum value for modifiedTs.
         * @return Builder
         */
        public Builder modifiedTs(ModifiedTsEnum modifiedTs) {
            this.modifiedTs = modifiedTs;
            return this;
        }

        /**
         * Setter for active.
         * @param  active  Active4Enum value for active.
         * @return Builder
         */
        public Builder active(Active4Enum active) {
            this.active = active;
            return this;
        }

        /**
         * Builds a new {@link Sort1} object using the set fields.
         * @return {@link Sort1}
         */
        public Sort1 build() {
            return new Sort1(locationId, accountNumber, contactApiId, firstName, lastName,
                    cellPhone, contactBalance, address, city, state, companyName, headerMessage,
                    dateOfBirth, emailTrxReceipt, homePhone, officePhone, officeExtPhone,
                    headerMessageType, updateIfExists, zip, contactC1, contactC2, contactC3,
                    parentId, email, id, createdTs, modifiedTs, active);
        }
    }
}
