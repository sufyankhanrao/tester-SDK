/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package tech.fortis.sandbox.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for TerminalTimeouts type.
 */
public class TerminalTimeouts {
    private Integer cardEntryTimeout;
    private Integer deviceTermsPromptTimeout;
    private Integer overallTimeout;
    private Integer pinEntryTimeout;
    private Integer signatureInputTimeout;
    private Integer signatureSubmitTimeout;
    private Integer statusDisplayTime;
    private Integer tipCashbackTimeout;
    private Integer transactionTimeout;

    /**
     * Default constructor.
     */
    public TerminalTimeouts() {
        cardEntryTimeout = 120;
        deviceTermsPromptTimeout = 60;
        overallTimeout = 300;
        pinEntryTimeout = 30;
        signatureInputTimeout = 10;
        signatureSubmitTimeout = 30;
        statusDisplayTime = 7;
        tipCashbackTimeout = 30;
        transactionTimeout = 10;
    }

    /**
     * Initialization constructor.
     * @param  cardEntryTimeout  Integer value for cardEntryTimeout.
     * @param  deviceTermsPromptTimeout  Integer value for deviceTermsPromptTimeout.
     * @param  overallTimeout  Integer value for overallTimeout.
     * @param  pinEntryTimeout  Integer value for pinEntryTimeout.
     * @param  signatureInputTimeout  Integer value for signatureInputTimeout.
     * @param  signatureSubmitTimeout  Integer value for signatureSubmitTimeout.
     * @param  statusDisplayTime  Integer value for statusDisplayTime.
     * @param  tipCashbackTimeout  Integer value for tipCashbackTimeout.
     * @param  transactionTimeout  Integer value for transactionTimeout.
     */
    public TerminalTimeouts(
            Integer cardEntryTimeout,
            Integer deviceTermsPromptTimeout,
            Integer overallTimeout,
            Integer pinEntryTimeout,
            Integer signatureInputTimeout,
            Integer signatureSubmitTimeout,
            Integer statusDisplayTime,
            Integer tipCashbackTimeout,
            Integer transactionTimeout) {
        this.cardEntryTimeout = cardEntryTimeout;
        this.deviceTermsPromptTimeout = deviceTermsPromptTimeout;
        this.overallTimeout = overallTimeout;
        this.pinEntryTimeout = pinEntryTimeout;
        this.signatureInputTimeout = signatureInputTimeout;
        this.signatureSubmitTimeout = signatureSubmitTimeout;
        this.statusDisplayTime = statusDisplayTime;
        this.tipCashbackTimeout = tipCashbackTimeout;
        this.transactionTimeout = transactionTimeout;
    }

    /**
     * Getter for CardEntryTimeout.
     * How long to wait for input from cardholder.
     * @return Returns the Integer
     */
    @JsonGetter("card_entry_timeout")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getCardEntryTimeout() {
        return cardEntryTimeout;
    }

    /**
     * Setter for CardEntryTimeout.
     * How long to wait for input from cardholder.
     * @param cardEntryTimeout Value for Integer
     */
    @JsonSetter("card_entry_timeout")
    public void setCardEntryTimeout(Integer cardEntryTimeout) {
        this.cardEntryTimeout = cardEntryTimeout;
    }

    /**
     * Getter for DeviceTermsPromptTimeout.
     * How long the terms will be displayed on the device.
     * @return Returns the Integer
     */
    @JsonGetter("device_terms_prompt_timeout")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getDeviceTermsPromptTimeout() {
        return deviceTermsPromptTimeout;
    }

    /**
     * Setter for DeviceTermsPromptTimeout.
     * How long the terms will be displayed on the device.
     * @param deviceTermsPromptTimeout Value for Integer
     */
    @JsonSetter("device_terms_prompt_timeout")
    public void setDeviceTermsPromptTimeout(Integer deviceTermsPromptTimeout) {
        this.deviceTermsPromptTimeout = deviceTermsPromptTimeout;
    }

    /**
     * Getter for OverallTimeout.
     * How long to wait for response from /v2/routertransactions endpoint.
     * @return Returns the Integer
     */
    @JsonGetter("overall_timeout")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getOverallTimeout() {
        return overallTimeout;
    }

    /**
     * Setter for OverallTimeout.
     * How long to wait for response from /v2/routertransactions endpoint.
     * @param overallTimeout Value for Integer
     */
    @JsonSetter("overall_timeout")
    public void setOverallTimeout(Integer overallTimeout) {
        this.overallTimeout = overallTimeout;
    }

    /**
     * Getter for PinEntryTimeout.
     * How long to wait for pin entry by cardholder.
     * @return Returns the Integer
     */
    @JsonGetter("pin_entry_timeout")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getPinEntryTimeout() {
        return pinEntryTimeout;
    }

    /**
     * Setter for PinEntryTimeout.
     * How long to wait for pin entry by cardholder.
     * @param pinEntryTimeout Value for Integer
     */
    @JsonSetter("pin_entry_timeout")
    public void setPinEntryTimeout(Integer pinEntryTimeout) {
        this.pinEntryTimeout = pinEntryTimeout;
    }

    /**
     * Getter for SignatureInputTimeout.
     * How long to wait for first "touch" to signature.
     * @return Returns the Integer
     */
    @JsonGetter("signature_input_timeout")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getSignatureInputTimeout() {
        return signatureInputTimeout;
    }

    /**
     * Setter for SignatureInputTimeout.
     * How long to wait for first "touch" to signature.
     * @param signatureInputTimeout Value for Integer
     */
    @JsonSetter("signature_input_timeout")
    public void setSignatureInputTimeout(Integer signatureInputTimeout) {
        this.signatureInputTimeout = signatureInputTimeout;
    }

    /**
     * Getter for SignatureSubmitTimeout.
     * How long to wait for signature to be submitted.
     * @return Returns the Integer
     */
    @JsonGetter("signature_submit_timeout")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getSignatureSubmitTimeout() {
        return signatureSubmitTimeout;
    }

    /**
     * Setter for SignatureSubmitTimeout.
     * How long to wait for signature to be submitted.
     * @param signatureSubmitTimeout Value for Integer
     */
    @JsonSetter("signature_submit_timeout")
    public void setSignatureSubmitTimeout(Integer signatureSubmitTimeout) {
        this.signatureSubmitTimeout = signatureSubmitTimeout;
    }

    /**
     * Getter for StatusDisplayTime.
     * How long the approve/decline status message stays on screen.
     * @return Returns the Integer
     */
    @JsonGetter("status_display_time")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getStatusDisplayTime() {
        return statusDisplayTime;
    }

    /**
     * Setter for StatusDisplayTime.
     * How long the approve/decline status message stays on screen.
     * @param statusDisplayTime Value for Integer
     */
    @JsonSetter("status_display_time")
    public void setStatusDisplayTime(Integer statusDisplayTime) {
        this.statusDisplayTime = statusDisplayTime;
    }

    /**
     * Getter for TipCashbackTimeout.
     * How long to wait for input on a tip or cashback screen.
     * @return Returns the Integer
     */
    @JsonGetter("tip_cashback_timeout")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getTipCashbackTimeout() {
        return tipCashbackTimeout;
    }

    /**
     * Setter for TipCashbackTimeout.
     * How long to wait for input on a tip or cashback screen.
     * @param tipCashbackTimeout Value for Integer
     */
    @JsonSetter("tip_cashback_timeout")
    public void setTipCashbackTimeout(Integer tipCashbackTimeout) {
        this.tipCashbackTimeout = tipCashbackTimeout;
    }

    /**
     * Getter for TransactionTimeout.
     * How long to wait for response from the processor.
     * @return Returns the Integer
     */
    @JsonGetter("transaction_timeout")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getTransactionTimeout() {
        return transactionTimeout;
    }

    /**
     * Setter for TransactionTimeout.
     * How long to wait for response from the processor.
     * @param transactionTimeout Value for Integer
     */
    @JsonSetter("transaction_timeout")
    public void setTransactionTimeout(Integer transactionTimeout) {
        this.transactionTimeout = transactionTimeout;
    }

    /**
     * Converts this TerminalTimeouts into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "TerminalTimeouts [" + "cardEntryTimeout=" + cardEntryTimeout
                + ", deviceTermsPromptTimeout=" + deviceTermsPromptTimeout + ", overallTimeout="
                + overallTimeout + ", pinEntryTimeout=" + pinEntryTimeout
                + ", signatureInputTimeout=" + signatureInputTimeout + ", signatureSubmitTimeout="
                + signatureSubmitTimeout + ", statusDisplayTime=" + statusDisplayTime
                + ", tipCashbackTimeout=" + tipCashbackTimeout + ", transactionTimeout="
                + transactionTimeout + "]";
    }

    /**
     * Builds a new {@link TerminalTimeouts.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link TerminalTimeouts.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .cardEntryTimeout(getCardEntryTimeout())
                .deviceTermsPromptTimeout(getDeviceTermsPromptTimeout())
                .overallTimeout(getOverallTimeout())
                .pinEntryTimeout(getPinEntryTimeout())
                .signatureInputTimeout(getSignatureInputTimeout())
                .signatureSubmitTimeout(getSignatureSubmitTimeout())
                .statusDisplayTime(getStatusDisplayTime())
                .tipCashbackTimeout(getTipCashbackTimeout())
                .transactionTimeout(getTransactionTimeout());
        return builder;
    }

    /**
     * Class to build instances of {@link TerminalTimeouts}.
     */
    public static class Builder {
        private Integer cardEntryTimeout = 120;
        private Integer deviceTermsPromptTimeout = 60;
        private Integer overallTimeout = 300;
        private Integer pinEntryTimeout = 30;
        private Integer signatureInputTimeout = 10;
        private Integer signatureSubmitTimeout = 30;
        private Integer statusDisplayTime = 7;
        private Integer tipCashbackTimeout = 30;
        private Integer transactionTimeout = 10;



        /**
         * Setter for cardEntryTimeout.
         * @param  cardEntryTimeout  Integer value for cardEntryTimeout.
         * @return Builder
         */
        public Builder cardEntryTimeout(Integer cardEntryTimeout) {
            this.cardEntryTimeout = cardEntryTimeout;
            return this;
        }

        /**
         * Setter for deviceTermsPromptTimeout.
         * @param  deviceTermsPromptTimeout  Integer value for deviceTermsPromptTimeout.
         * @return Builder
         */
        public Builder deviceTermsPromptTimeout(Integer deviceTermsPromptTimeout) {
            this.deviceTermsPromptTimeout = deviceTermsPromptTimeout;
            return this;
        }

        /**
         * Setter for overallTimeout.
         * @param  overallTimeout  Integer value for overallTimeout.
         * @return Builder
         */
        public Builder overallTimeout(Integer overallTimeout) {
            this.overallTimeout = overallTimeout;
            return this;
        }

        /**
         * Setter for pinEntryTimeout.
         * @param  pinEntryTimeout  Integer value for pinEntryTimeout.
         * @return Builder
         */
        public Builder pinEntryTimeout(Integer pinEntryTimeout) {
            this.pinEntryTimeout = pinEntryTimeout;
            return this;
        }

        /**
         * Setter for signatureInputTimeout.
         * @param  signatureInputTimeout  Integer value for signatureInputTimeout.
         * @return Builder
         */
        public Builder signatureInputTimeout(Integer signatureInputTimeout) {
            this.signatureInputTimeout = signatureInputTimeout;
            return this;
        }

        /**
         * Setter for signatureSubmitTimeout.
         * @param  signatureSubmitTimeout  Integer value for signatureSubmitTimeout.
         * @return Builder
         */
        public Builder signatureSubmitTimeout(Integer signatureSubmitTimeout) {
            this.signatureSubmitTimeout = signatureSubmitTimeout;
            return this;
        }

        /**
         * Setter for statusDisplayTime.
         * @param  statusDisplayTime  Integer value for statusDisplayTime.
         * @return Builder
         */
        public Builder statusDisplayTime(Integer statusDisplayTime) {
            this.statusDisplayTime = statusDisplayTime;
            return this;
        }

        /**
         * Setter for tipCashbackTimeout.
         * @param  tipCashbackTimeout  Integer value for tipCashbackTimeout.
         * @return Builder
         */
        public Builder tipCashbackTimeout(Integer tipCashbackTimeout) {
            this.tipCashbackTimeout = tipCashbackTimeout;
            return this;
        }

        /**
         * Setter for transactionTimeout.
         * @param  transactionTimeout  Integer value for transactionTimeout.
         * @return Builder
         */
        public Builder transactionTimeout(Integer transactionTimeout) {
            this.transactionTimeout = transactionTimeout;
            return this;
        }

        /**
         * Builds a new {@link TerminalTimeouts} object using the set fields.
         * @return {@link TerminalTimeouts}
         */
        public TerminalTimeouts build() {
            return new TerminalTimeouts(cardEntryTimeout, deviceTermsPromptTimeout, overallTimeout,
                    pinEntryTimeout, signatureInputTimeout, signatureSubmitTimeout,
                    statusDisplayTime, tipCashbackTimeout, transactionTimeout);
        }
    }
}
