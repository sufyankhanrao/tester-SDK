/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package tech.fortis.sandbox.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import tech.fortis.sandbox.api.internal.OptionalNullable;

/**
 * This is a model class for TipPercents type.
 */
public class TipPercents {
    private OptionalNullable<Integer> percent1;
    private OptionalNullable<Integer> percent2;
    private OptionalNullable<Integer> percent3;

    /**
     * Default constructor.
     */
    public TipPercents() {
    }

    /**
     * Initialization constructor.
     * @param  percent1  Integer value for percent1.
     * @param  percent2  Integer value for percent2.
     * @param  percent3  Integer value for percent3.
     */
    public TipPercents(
            Integer percent1,
            Integer percent2,
            Integer percent3) {
        this.percent1 = OptionalNullable.of(percent1);
        this.percent2 = OptionalNullable.of(percent2);
        this.percent3 = OptionalNullable.of(percent3);
    }

    /**
     * Internal initialization constructor.
     */
    protected TipPercents(OptionalNullable<Integer> percent1, OptionalNullable<Integer> percent2,
            OptionalNullable<Integer> percent3) {
        this.percent1 = percent1;
        this.percent2 = percent2;
        this.percent3 = percent3;
    }

    /**
     * Internal Getter for Percent1.
     * field can only contain a value from 0 to 99, if 1 field is NULL, all fields must be null.
     * @return Returns the Internal Integer
     */
    @JsonGetter("percent_1")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetPercent1() {
        return this.percent1;
    }

    /**
     * Getter for Percent1.
     * field can only contain a value from 0 to 99, if 1 field is NULL, all fields must be null.
     * @return Returns the Integer
     */
    public Integer getPercent1() {
        return OptionalNullable.getFrom(percent1);
    }

    /**
     * Setter for Percent1.
     * field can only contain a value from 0 to 99, if 1 field is NULL, all fields must be null.
     * @param percent1 Value for Integer
     */
    @JsonSetter("percent_1")
    public void setPercent1(Integer percent1) {
        this.percent1 = OptionalNullable.of(percent1);
    }

    /**
     * UnSetter for Percent1.
     * field can only contain a value from 0 to 99, if 1 field is NULL, all fields must be null.
     */
    public void unsetPercent1() {
        percent1 = null;
    }

    /**
     * Internal Getter for Percent2.
     * field can only contain a value from 0 to 99, if 1 field is NULL, all fields must be null.
     * @return Returns the Internal Integer
     */
    @JsonGetter("percent_2")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetPercent2() {
        return this.percent2;
    }

    /**
     * Getter for Percent2.
     * field can only contain a value from 0 to 99, if 1 field is NULL, all fields must be null.
     * @return Returns the Integer
     */
    public Integer getPercent2() {
        return OptionalNullable.getFrom(percent2);
    }

    /**
     * Setter for Percent2.
     * field can only contain a value from 0 to 99, if 1 field is NULL, all fields must be null.
     * @param percent2 Value for Integer
     */
    @JsonSetter("percent_2")
    public void setPercent2(Integer percent2) {
        this.percent2 = OptionalNullable.of(percent2);
    }

    /**
     * UnSetter for Percent2.
     * field can only contain a value from 0 to 99, if 1 field is NULL, all fields must be null.
     */
    public void unsetPercent2() {
        percent2 = null;
    }

    /**
     * Internal Getter for Percent3.
     * field can only contain a value from 0 to 99, if 1 field is NULL, all fields must be null.
     * @return Returns the Internal Integer
     */
    @JsonGetter("percent_3")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetPercent3() {
        return this.percent3;
    }

    /**
     * Getter for Percent3.
     * field can only contain a value from 0 to 99, if 1 field is NULL, all fields must be null.
     * @return Returns the Integer
     */
    public Integer getPercent3() {
        return OptionalNullable.getFrom(percent3);
    }

    /**
     * Setter for Percent3.
     * field can only contain a value from 0 to 99, if 1 field is NULL, all fields must be null.
     * @param percent3 Value for Integer
     */
    @JsonSetter("percent_3")
    public void setPercent3(Integer percent3) {
        this.percent3 = OptionalNullable.of(percent3);
    }

    /**
     * UnSetter for Percent3.
     * field can only contain a value from 0 to 99, if 1 field is NULL, all fields must be null.
     */
    public void unsetPercent3() {
        percent3 = null;
    }

    /**
     * Converts this TipPercents into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "TipPercents [" + "percent1=" + percent1 + ", percent2=" + percent2 + ", percent3="
                + percent3 + "]";
    }

    /**
     * Builds a new {@link TipPercents.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link TipPercents.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder();
        builder.percent1 = internalGetPercent1();
        builder.percent2 = internalGetPercent2();
        builder.percent3 = internalGetPercent3();
        return builder;
    }

    /**
     * Class to build instances of {@link TipPercents}.
     */
    public static class Builder {
        private OptionalNullable<Integer> percent1;
        private OptionalNullable<Integer> percent2;
        private OptionalNullable<Integer> percent3;



        /**
         * Setter for percent1.
         * @param  percent1  Integer value for percent1.
         * @return Builder
         */
        public Builder percent1(Integer percent1) {
            this.percent1 = OptionalNullable.of(percent1);
            return this;
        }

        /**
         * UnSetter for percent1.
         * @return Builder
         */
        public Builder unsetPercent1() {
            percent1 = null;
            return this;
        }

        /**
         * Setter for percent2.
         * @param  percent2  Integer value for percent2.
         * @return Builder
         */
        public Builder percent2(Integer percent2) {
            this.percent2 = OptionalNullable.of(percent2);
            return this;
        }

        /**
         * UnSetter for percent2.
         * @return Builder
         */
        public Builder unsetPercent2() {
            percent2 = null;
            return this;
        }

        /**
         * Setter for percent3.
         * @param  percent3  Integer value for percent3.
         * @return Builder
         */
        public Builder percent3(Integer percent3) {
            this.percent3 = OptionalNullable.of(percent3);
            return this;
        }

        /**
         * UnSetter for percent3.
         * @return Builder
         */
        public Builder unsetPercent3() {
            percent3 = null;
            return this;
        }

        /**
         * Builds a new {@link TipPercents} object using the set fields.
         * @return {@link TipPercents}
         */
        public TipPercents build() {
            return new TipPercents(percent1, percent2, percent3);
        }
    }
}
