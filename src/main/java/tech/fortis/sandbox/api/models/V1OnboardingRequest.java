/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package tech.fortis.sandbox.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for V1OnboardingRequest type.
 */
public class V1OnboardingRequest {
    private PrimaryPrincipal primaryPrincipal;
    private String templateCode;
    private String email;
    private String dbaName;
    private Location location;
    private AppDeliveryEnum appDelivery;
    private String businessCategory;
    private String businessType;
    private String businessDescription;
    private Double swipedPercent;
    private Double keyedPercent;
    private Double ecommercePercent;
    private OwnershipTypeEnum ownershipType;
    private String fedTaxId;
    private Double ccAverageTicketRange;
    private Double ccMonthlyVolumeRange;
    private Double ccHighTicket;
    private Double ecAverageTicketRange;
    private Double ecMonthlyVolumeRange;
    private Double ecHighTicket;
    private String website;
    private BankAccount bankAccount;
    private String legalName;
    private Contact contact;
    private String clientAppId;
    private String appCompleteEndpoint;
    private IsTestEnum isTest;

    /**
     * Default constructor.
     */
    public V1OnboardingRequest() {
        isTest = IsTestEnum.ENUM_FALSE;
    }

    /**
     * Initialization constructor.
     * @param  primaryPrincipal  PrimaryPrincipal value for primaryPrincipal.
     * @param  templateCode  String value for templateCode.
     * @param  email  String value for email.
     * @param  dbaName  String value for dbaName.
     * @param  location  Location value for location.
     * @param  appDelivery  AppDeliveryEnum value for appDelivery.
     * @param  bankAccount  BankAccount value for bankAccount.
     * @param  contact  Contact value for contact.
     * @param  businessCategory  String value for businessCategory.
     * @param  businessType  String value for businessType.
     * @param  businessDescription  String value for businessDescription.
     * @param  swipedPercent  Double value for swipedPercent.
     * @param  keyedPercent  Double value for keyedPercent.
     * @param  ecommercePercent  Double value for ecommercePercent.
     * @param  ownershipType  OwnershipTypeEnum value for ownershipType.
     * @param  fedTaxId  String value for fedTaxId.
     * @param  ccAverageTicketRange  Double value for ccAverageTicketRange.
     * @param  ccMonthlyVolumeRange  Double value for ccMonthlyVolumeRange.
     * @param  ccHighTicket  Double value for ccHighTicket.
     * @param  ecAverageTicketRange  Double value for ecAverageTicketRange.
     * @param  ecMonthlyVolumeRange  Double value for ecMonthlyVolumeRange.
     * @param  ecHighTicket  Double value for ecHighTicket.
     * @param  website  String value for website.
     * @param  legalName  String value for legalName.
     * @param  clientAppId  String value for clientAppId.
     * @param  appCompleteEndpoint  String value for appCompleteEndpoint.
     * @param  isTest  IsTestEnum value for isTest.
     */
    public V1OnboardingRequest(
            PrimaryPrincipal primaryPrincipal,
            String templateCode,
            String email,
            String dbaName,
            Location location,
            AppDeliveryEnum appDelivery,
            BankAccount bankAccount,
            Contact contact,
            String businessCategory,
            String businessType,
            String businessDescription,
            Double swipedPercent,
            Double keyedPercent,
            Double ecommercePercent,
            OwnershipTypeEnum ownershipType,
            String fedTaxId,
            Double ccAverageTicketRange,
            Double ccMonthlyVolumeRange,
            Double ccHighTicket,
            Double ecAverageTicketRange,
            Double ecMonthlyVolumeRange,
            Double ecHighTicket,
            String website,
            String legalName,
            String clientAppId,
            String appCompleteEndpoint,
            IsTestEnum isTest) {
        this.primaryPrincipal = primaryPrincipal;
        this.templateCode = templateCode;
        this.email = email;
        this.dbaName = dbaName;
        this.location = location;
        this.appDelivery = appDelivery;
        this.businessCategory = businessCategory;
        this.businessType = businessType;
        this.businessDescription = businessDescription;
        this.swipedPercent = swipedPercent;
        this.keyedPercent = keyedPercent;
        this.ecommercePercent = ecommercePercent;
        this.ownershipType = ownershipType;
        this.fedTaxId = fedTaxId;
        this.ccAverageTicketRange = ccAverageTicketRange;
        this.ccMonthlyVolumeRange = ccMonthlyVolumeRange;
        this.ccHighTicket = ccHighTicket;
        this.ecAverageTicketRange = ecAverageTicketRange;
        this.ecMonthlyVolumeRange = ecMonthlyVolumeRange;
        this.ecHighTicket = ecHighTicket;
        this.website = website;
        this.bankAccount = bankAccount;
        this.legalName = legalName;
        this.contact = contact;
        this.clientAppId = clientAppId;
        this.appCompleteEndpoint = appCompleteEndpoint;
        this.isTest = isTest;
    }

    /**
     * Getter for PrimaryPrincipal.
     * The Primary Principal.
     * @return Returns the PrimaryPrincipal
     */
    @JsonGetter("primary_principal")
    public PrimaryPrincipal getPrimaryPrincipal() {
        return primaryPrincipal;
    }

    /**
     * Setter for PrimaryPrincipal.
     * The Primary Principal.
     * @param primaryPrincipal Value for PrimaryPrincipal
     */
    @JsonSetter("primary_principal")
    public void setPrimaryPrincipal(PrimaryPrincipal primaryPrincipal) {
        this.primaryPrincipal = primaryPrincipal;
    }

    /**
     * Getter for TemplateCode.
     * The ID of the template to be used - this value will be provided by Fortis.
     * @return Returns the String
     */
    @JsonGetter("template_code")
    public String getTemplateCode() {
        return templateCode;
    }

    /**
     * Setter for TemplateCode.
     * The ID of the template to be used - this value will be provided by Fortis.
     * @param templateCode Value for String
     */
    @JsonSetter("template_code")
    public void setTemplateCode(String templateCode) {
        this.templateCode = templateCode;
    }

    /**
     * Getter for Email.
     * Merchant email address.
     * @return Returns the String
     */
    @JsonGetter("email")
    public String getEmail() {
        return email;
    }

    /**
     * Setter for Email.
     * Merchant email address.
     * @param email Value for String
     */
    @JsonSetter("email")
    public void setEmail(String email) {
        this.email = email;
    }

    /**
     * Getter for DbaName.
     * Merchant 'Doing Business As' name.
     * @return Returns the String
     */
    @JsonGetter("dba_name")
    public String getDbaName() {
        return dbaName;
    }

    /**
     * Setter for DbaName.
     * Merchant 'Doing Business As' name.
     * @param dbaName Value for String
     */
    @JsonSetter("dba_name")
    public void setDbaName(String dbaName) {
        this.dbaName = dbaName;
    }

    /**
     * Getter for Location.
     * The Location.
     * @return Returns the Location
     */
    @JsonGetter("location")
    public Location getLocation() {
        return location;
    }

    /**
     * Setter for Location.
     * The Location.
     * @param location Value for Location
     */
    @JsonSetter("location")
    public void setLocation(Location location) {
        this.location = location;
    }

    /**
     * Getter for AppDelivery.
     * The delivery method of the app to the merchant.
     * @return Returns the AppDeliveryEnum
     */
    @JsonGetter("app_delivery")
    public AppDeliveryEnum getAppDelivery() {
        return appDelivery;
    }

    /**
     * Setter for AppDelivery.
     * The delivery method of the app to the merchant.
     * @param appDelivery Value for AppDeliveryEnum
     */
    @JsonSetter("app_delivery")
    public void setAppDelivery(AppDeliveryEnum appDelivery) {
        this.appDelivery = appDelivery;
    }

    /**
     * Getter for BusinessCategory.
     * The Category of the merchant's business
     * @return Returns the String
     */
    @JsonGetter("business_category")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getBusinessCategory() {
        return businessCategory;
    }

    /**
     * Setter for BusinessCategory.
     * The Category of the merchant's business
     * @param businessCategory Value for String
     */
    @JsonSetter("business_category")
    public void setBusinessCategory(String businessCategory) {
        this.businessCategory = businessCategory;
    }

    /**
     * Getter for BusinessType.
     * The Type of a merchant's business.
     * @return Returns the String
     */
    @JsonGetter("business_type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getBusinessType() {
        return businessType;
    }

    /**
     * Setter for BusinessType.
     * The Type of a merchant's business.
     * @param businessType Value for String
     */
    @JsonSetter("business_type")
    public void setBusinessType(String businessType) {
        this.businessType = businessType;
    }

    /**
     * Getter for BusinessDescription.
     * Description of Goods or Services.
     * @return Returns the String
     */
    @JsonGetter("business_description")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getBusinessDescription() {
        return businessDescription;
    }

    /**
     * Setter for BusinessDescription.
     * Description of Goods or Services.
     * @param businessDescription Value for String
     */
    @JsonSetter("business_description")
    public void setBusinessDescription(String businessDescription) {
        this.businessDescription = businessDescription;
    }

    /**
     * Getter for SwipedPercent.
     * Card present/swiped percentage
     * @return Returns the Double
     */
    @JsonGetter("swiped_percent")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getSwipedPercent() {
        return swipedPercent;
    }

    /**
     * Setter for SwipedPercent.
     * Card present/swiped percentage
     * @param swipedPercent Value for Double
     */
    @JsonSetter("swiped_percent")
    public void setSwipedPercent(Double swipedPercent) {
        this.swipedPercent = swipedPercent;
    }

    /**
     * Getter for KeyedPercent.
     * Card not present/keyed percentage
     * @return Returns the Double
     */
    @JsonGetter("keyed_percent")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getKeyedPercent() {
        return keyedPercent;
    }

    /**
     * Setter for KeyedPercent.
     * Card not present/keyed percentage
     * @param keyedPercent Value for Double
     */
    @JsonSetter("keyed_percent")
    public void setKeyedPercent(Double keyedPercent) {
        this.keyedPercent = keyedPercent;
    }

    /**
     * Getter for EcommercePercent.
     * eCommerce percentage.
     * @return Returns the Double
     */
    @JsonGetter("ecommerce_percent")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getEcommercePercent() {
        return ecommercePercent;
    }

    /**
     * Setter for EcommercePercent.
     * eCommerce percentage.
     * @param ecommercePercent Value for Double
     */
    @JsonSetter("ecommerce_percent")
    public void setEcommercePercent(Double ecommercePercent) {
        this.ecommercePercent = ecommercePercent;
    }

    /**
     * Getter for OwnershipType.
     * The Ownership Type of the merchant's business.
     * @return Returns the OwnershipTypeEnum
     */
    @JsonGetter("ownership_type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public OwnershipTypeEnum getOwnershipType() {
        return ownershipType;
    }

    /**
     * Setter for OwnershipType.
     * The Ownership Type of the merchant's business.
     * @param ownershipType Value for OwnershipTypeEnum
     */
    @JsonSetter("ownership_type")
    public void setOwnershipType(OwnershipTypeEnum ownershipType) {
        this.ownershipType = ownershipType;
    }

    /**
     * Getter for FedTaxId.
     * Federal Tax ID (EIN).
     * @return Returns the String
     */
    @JsonGetter("fed_tax_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getFedTaxId() {
        return fedTaxId;
    }

    /**
     * Setter for FedTaxId.
     * Federal Tax ID (EIN).
     * @param fedTaxId Value for String
     */
    @JsonSetter("fed_tax_id")
    public void setFedTaxId(String fedTaxId) {
        this.fedTaxId = fedTaxId;
    }

    /**
     * Getter for CcAverageTicketRange.
     * Average Transaction Amount Range
     * @return Returns the Double
     */
    @JsonGetter("cc_average_ticket_range")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getCcAverageTicketRange() {
        return ccAverageTicketRange;
    }

    /**
     * Setter for CcAverageTicketRange.
     * Average Transaction Amount Range
     * @param ccAverageTicketRange Value for Double
     */
    @JsonSetter("cc_average_ticket_range")
    public void setCcAverageTicketRange(Double ccAverageTicketRange) {
        this.ccAverageTicketRange = ccAverageTicketRange;
    }

    /**
     * Getter for CcMonthlyVolumeRange.
     * Monthly Processing Volume Range
     * @return Returns the Double
     */
    @JsonGetter("cc_monthly_volume_range")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getCcMonthlyVolumeRange() {
        return ccMonthlyVolumeRange;
    }

    /**
     * Setter for CcMonthlyVolumeRange.
     * Monthly Processing Volume Range
     * @param ccMonthlyVolumeRange Value for Double
     */
    @JsonSetter("cc_monthly_volume_range")
    public void setCcMonthlyVolumeRange(Double ccMonthlyVolumeRange) {
        this.ccMonthlyVolumeRange = ccMonthlyVolumeRange;
    }

    /**
     * Getter for CcHighTicket.
     * Highest transaction amount rounded to the next dollar
     * @return Returns the Double
     */
    @JsonGetter("cc_high_ticket")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getCcHighTicket() {
        return ccHighTicket;
    }

    /**
     * Setter for CcHighTicket.
     * Highest transaction amount rounded to the next dollar
     * @param ccHighTicket Value for Double
     */
    @JsonSetter("cc_high_ticket")
    public void setCcHighTicket(Double ccHighTicket) {
        this.ccHighTicket = ccHighTicket;
    }

    /**
     * Getter for EcAverageTicketRange.
     * Average Transaction Amount Range
     * @return Returns the Double
     */
    @JsonGetter("ec_average_ticket_range")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getEcAverageTicketRange() {
        return ecAverageTicketRange;
    }

    /**
     * Setter for EcAverageTicketRange.
     * Average Transaction Amount Range
     * @param ecAverageTicketRange Value for Double
     */
    @JsonSetter("ec_average_ticket_range")
    public void setEcAverageTicketRange(Double ecAverageTicketRange) {
        this.ecAverageTicketRange = ecAverageTicketRange;
    }

    /**
     * Getter for EcMonthlyVolumeRange.
     * Monthly Processing Volume Range
     * @return Returns the Double
     */
    @JsonGetter("ec_monthly_volume_range")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getEcMonthlyVolumeRange() {
        return ecMonthlyVolumeRange;
    }

    /**
     * Setter for EcMonthlyVolumeRange.
     * Monthly Processing Volume Range
     * @param ecMonthlyVolumeRange Value for Double
     */
    @JsonSetter("ec_monthly_volume_range")
    public void setEcMonthlyVolumeRange(Double ecMonthlyVolumeRange) {
        this.ecMonthlyVolumeRange = ecMonthlyVolumeRange;
    }

    /**
     * Getter for EcHighTicket.
     * Highest transaction amount rounded to the next dollar
     * @return Returns the Double
     */
    @JsonGetter("ec_high_ticket")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getEcHighTicket() {
        return ecHighTicket;
    }

    /**
     * Setter for EcHighTicket.
     * Highest transaction amount rounded to the next dollar
     * @param ecHighTicket Value for Double
     */
    @JsonSetter("ec_high_ticket")
    public void setEcHighTicket(Double ecHighTicket) {
        this.ecHighTicket = ecHighTicket;
    }

    /**
     * Getter for Website.
     * Merchant's business website.
     * @return Returns the String
     */
    @JsonGetter("website")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getWebsite() {
        return website;
    }

    /**
     * Setter for Website.
     * Merchant's business website.
     * @param website Value for String
     */
    @JsonSetter("website")
    public void setWebsite(String website) {
        this.website = website;
    }

    /**
     * Getter for BankAccount.
     * The Bank Account.
     * @return Returns the BankAccount
     */
    @JsonGetter("bank_account")
    public BankAccount getBankAccount() {
        return bankAccount;
    }

    /**
     * Setter for BankAccount.
     * The Bank Account.
     * @param bankAccount Value for BankAccount
     */
    @JsonSetter("bank_account")
    public void setBankAccount(BankAccount bankAccount) {
        this.bankAccount = bankAccount;
    }

    /**
     * Getter for LegalName.
     * Merchant legal name.
     * @return Returns the String
     */
    @JsonGetter("legal_name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getLegalName() {
        return legalName;
    }

    /**
     * Setter for LegalName.
     * Merchant legal name.
     * @param legalName Value for String
     */
    @JsonSetter("legal_name")
    public void setLegalName(String legalName) {
        this.legalName = legalName;
    }

    /**
     * Getter for Contact.
     * The Contact.
     * @return Returns the Contact
     */
    @JsonGetter("contact")
    public Contact getContact() {
        return contact;
    }

    /**
     * Setter for Contact.
     * The Contact.
     * @param contact Value for Contact
     */
    @JsonSetter("contact")
    public void setContact(Contact contact) {
        this.contact = contact;
    }

    /**
     * Getter for ClientAppId.
     * Client-Issued ID to uniquely identify the merchant (Returned unmodified).
     * @return Returns the String
     */
    @JsonGetter("client_app_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getClientAppId() {
        return clientAppId;
    }

    /**
     * Setter for ClientAppId.
     * Client-Issued ID to uniquely identify the merchant (Returned unmodified).
     * @param clientAppId Value for String
     */
    @JsonSetter("client_app_id")
    public void setClientAppId(String clientAppId) {
        this.clientAppId = clientAppId;
    }

    /**
     * Getter for AppCompleteEndpoint.
     * Client-side Redirect URL called after merchant completes application.
     * @return Returns the String
     */
    @JsonGetter("app_complete_endpoint")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getAppCompleteEndpoint() {
        return appCompleteEndpoint;
    }

    /**
     * Setter for AppCompleteEndpoint.
     * Client-side Redirect URL called after merchant completes application.
     * @param appCompleteEndpoint Value for String
     */
    @JsonSetter("app_complete_endpoint")
    public void setAppCompleteEndpoint(String appCompleteEndpoint) {
        this.appCompleteEndpoint = appCompleteEndpoint;
    }

    /**
     * Getter for IsTest.
     * For testing only. When this property is set to 'true', the application will be submitted in
     * demo mode.
     * @return Returns the IsTestEnum
     */
    @JsonGetter("is_test")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public IsTestEnum getIsTest() {
        return isTest;
    }

    /**
     * Setter for IsTest.
     * For testing only. When this property is set to 'true', the application will be submitted in
     * demo mode.
     * @param isTest Value for IsTestEnum
     */
    @JsonSetter("is_test")
    public void setIsTest(IsTestEnum isTest) {
        this.isTest = isTest;
    }

    /**
     * Converts this V1OnboardingRequest into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "V1OnboardingRequest [" + "primaryPrincipal=" + primaryPrincipal + ", templateCode="
                + templateCode + ", email=" + email + ", dbaName=" + dbaName + ", location="
                + location + ", appDelivery=" + appDelivery + ", bankAccount=" + bankAccount
                + ", contact=" + contact + ", businessCategory=" + businessCategory
                + ", businessType=" + businessType + ", businessDescription=" + businessDescription
                + ", swipedPercent=" + swipedPercent + ", keyedPercent=" + keyedPercent
                + ", ecommercePercent=" + ecommercePercent + ", ownershipType=" + ownershipType
                + ", fedTaxId=" + fedTaxId + ", ccAverageTicketRange=" + ccAverageTicketRange
                + ", ccMonthlyVolumeRange=" + ccMonthlyVolumeRange + ", ccHighTicket="
                + ccHighTicket + ", ecAverageTicketRange=" + ecAverageTicketRange
                + ", ecMonthlyVolumeRange=" + ecMonthlyVolumeRange + ", ecHighTicket="
                + ecHighTicket + ", website=" + website + ", legalName=" + legalName
                + ", clientAppId=" + clientAppId + ", appCompleteEndpoint=" + appCompleteEndpoint
                + ", isTest=" + isTest + "]";
    }

    /**
     * Builds a new {@link V1OnboardingRequest.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link V1OnboardingRequest.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(primaryPrincipal, templateCode, email, dbaName, location,
                appDelivery, bankAccount, contact)
                .businessCategory(getBusinessCategory())
                .businessType(getBusinessType())
                .businessDescription(getBusinessDescription())
                .swipedPercent(getSwipedPercent())
                .keyedPercent(getKeyedPercent())
                .ecommercePercent(getEcommercePercent())
                .ownershipType(getOwnershipType())
                .fedTaxId(getFedTaxId())
                .ccAverageTicketRange(getCcAverageTicketRange())
                .ccMonthlyVolumeRange(getCcMonthlyVolumeRange())
                .ccHighTicket(getCcHighTicket())
                .ecAverageTicketRange(getEcAverageTicketRange())
                .ecMonthlyVolumeRange(getEcMonthlyVolumeRange())
                .ecHighTicket(getEcHighTicket())
                .website(getWebsite())
                .legalName(getLegalName())
                .clientAppId(getClientAppId())
                .appCompleteEndpoint(getAppCompleteEndpoint())
                .isTest(getIsTest());
        return builder;
    }

    /**
     * Class to build instances of {@link V1OnboardingRequest}.
     */
    public static class Builder {
        private PrimaryPrincipal primaryPrincipal;
        private String templateCode;
        private String email;
        private String dbaName;
        private Location location;
        private AppDeliveryEnum appDelivery;
        private BankAccount bankAccount;
        private Contact contact;
        private String businessCategory;
        private String businessType;
        private String businessDescription;
        private Double swipedPercent;
        private Double keyedPercent;
        private Double ecommercePercent;
        private OwnershipTypeEnum ownershipType;
        private String fedTaxId;
        private Double ccAverageTicketRange;
        private Double ccMonthlyVolumeRange;
        private Double ccHighTicket;
        private Double ecAverageTicketRange;
        private Double ecMonthlyVolumeRange;
        private Double ecHighTicket;
        private String website;
        private String legalName;
        private String clientAppId;
        private String appCompleteEndpoint;
        private IsTestEnum isTest = IsTestEnum.ENUM_FALSE;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  primaryPrincipal  PrimaryPrincipal value for primaryPrincipal.
         * @param  templateCode  String value for templateCode.
         * @param  email  String value for email.
         * @param  dbaName  String value for dbaName.
         * @param  location  Location value for location.
         * @param  appDelivery  AppDeliveryEnum value for appDelivery.
         * @param  bankAccount  BankAccount value for bankAccount.
         * @param  contact  Contact value for contact.
         */
        public Builder(PrimaryPrincipal primaryPrincipal, String templateCode, String email,
                String dbaName, Location location, AppDeliveryEnum appDelivery,
                BankAccount bankAccount, Contact contact) {
            this.primaryPrincipal = primaryPrincipal;
            this.templateCode = templateCode;
            this.email = email;
            this.dbaName = dbaName;
            this.location = location;
            this.appDelivery = appDelivery;
            this.bankAccount = bankAccount;
            this.contact = contact;
        }

        /**
         * Setter for primaryPrincipal.
         * @param  primaryPrincipal  PrimaryPrincipal value for primaryPrincipal.
         * @return Builder
         */
        public Builder primaryPrincipal(PrimaryPrincipal primaryPrincipal) {
            this.primaryPrincipal = primaryPrincipal;
            return this;
        }

        /**
         * Setter for templateCode.
         * @param  templateCode  String value for templateCode.
         * @return Builder
         */
        public Builder templateCode(String templateCode) {
            this.templateCode = templateCode;
            return this;
        }

        /**
         * Setter for email.
         * @param  email  String value for email.
         * @return Builder
         */
        public Builder email(String email) {
            this.email = email;
            return this;
        }

        /**
         * Setter for dbaName.
         * @param  dbaName  String value for dbaName.
         * @return Builder
         */
        public Builder dbaName(String dbaName) {
            this.dbaName = dbaName;
            return this;
        }

        /**
         * Setter for location.
         * @param  location  Location value for location.
         * @return Builder
         */
        public Builder location(Location location) {
            this.location = location;
            return this;
        }

        /**
         * Setter for appDelivery.
         * @param  appDelivery  AppDeliveryEnum value for appDelivery.
         * @return Builder
         */
        public Builder appDelivery(AppDeliveryEnum appDelivery) {
            this.appDelivery = appDelivery;
            return this;
        }

        /**
         * Setter for bankAccount.
         * @param  bankAccount  BankAccount value for bankAccount.
         * @return Builder
         */
        public Builder bankAccount(BankAccount bankAccount) {
            this.bankAccount = bankAccount;
            return this;
        }

        /**
         * Setter for contact.
         * @param  contact  Contact value for contact.
         * @return Builder
         */
        public Builder contact(Contact contact) {
            this.contact = contact;
            return this;
        }

        /**
         * Setter for businessCategory.
         * @param  businessCategory  String value for businessCategory.
         * @return Builder
         */
        public Builder businessCategory(String businessCategory) {
            this.businessCategory = businessCategory;
            return this;
        }

        /**
         * Setter for businessType.
         * @param  businessType  String value for businessType.
         * @return Builder
         */
        public Builder businessType(String businessType) {
            this.businessType = businessType;
            return this;
        }

        /**
         * Setter for businessDescription.
         * @param  businessDescription  String value for businessDescription.
         * @return Builder
         */
        public Builder businessDescription(String businessDescription) {
            this.businessDescription = businessDescription;
            return this;
        }

        /**
         * Setter for swipedPercent.
         * @param  swipedPercent  Double value for swipedPercent.
         * @return Builder
         */
        public Builder swipedPercent(Double swipedPercent) {
            this.swipedPercent = swipedPercent;
            return this;
        }

        /**
         * Setter for keyedPercent.
         * @param  keyedPercent  Double value for keyedPercent.
         * @return Builder
         */
        public Builder keyedPercent(Double keyedPercent) {
            this.keyedPercent = keyedPercent;
            return this;
        }

        /**
         * Setter for ecommercePercent.
         * @param  ecommercePercent  Double value for ecommercePercent.
         * @return Builder
         */
        public Builder ecommercePercent(Double ecommercePercent) {
            this.ecommercePercent = ecommercePercent;
            return this;
        }

        /**
         * Setter for ownershipType.
         * @param  ownershipType  OwnershipTypeEnum value for ownershipType.
         * @return Builder
         */
        public Builder ownershipType(OwnershipTypeEnum ownershipType) {
            this.ownershipType = ownershipType;
            return this;
        }

        /**
         * Setter for fedTaxId.
         * @param  fedTaxId  String value for fedTaxId.
         * @return Builder
         */
        public Builder fedTaxId(String fedTaxId) {
            this.fedTaxId = fedTaxId;
            return this;
        }

        /**
         * Setter for ccAverageTicketRange.
         * @param  ccAverageTicketRange  Double value for ccAverageTicketRange.
         * @return Builder
         */
        public Builder ccAverageTicketRange(Double ccAverageTicketRange) {
            this.ccAverageTicketRange = ccAverageTicketRange;
            return this;
        }

        /**
         * Setter for ccMonthlyVolumeRange.
         * @param  ccMonthlyVolumeRange  Double value for ccMonthlyVolumeRange.
         * @return Builder
         */
        public Builder ccMonthlyVolumeRange(Double ccMonthlyVolumeRange) {
            this.ccMonthlyVolumeRange = ccMonthlyVolumeRange;
            return this;
        }

        /**
         * Setter for ccHighTicket.
         * @param  ccHighTicket  Double value for ccHighTicket.
         * @return Builder
         */
        public Builder ccHighTicket(Double ccHighTicket) {
            this.ccHighTicket = ccHighTicket;
            return this;
        }

        /**
         * Setter for ecAverageTicketRange.
         * @param  ecAverageTicketRange  Double value for ecAverageTicketRange.
         * @return Builder
         */
        public Builder ecAverageTicketRange(Double ecAverageTicketRange) {
            this.ecAverageTicketRange = ecAverageTicketRange;
            return this;
        }

        /**
         * Setter for ecMonthlyVolumeRange.
         * @param  ecMonthlyVolumeRange  Double value for ecMonthlyVolumeRange.
         * @return Builder
         */
        public Builder ecMonthlyVolumeRange(Double ecMonthlyVolumeRange) {
            this.ecMonthlyVolumeRange = ecMonthlyVolumeRange;
            return this;
        }

        /**
         * Setter for ecHighTicket.
         * @param  ecHighTicket  Double value for ecHighTicket.
         * @return Builder
         */
        public Builder ecHighTicket(Double ecHighTicket) {
            this.ecHighTicket = ecHighTicket;
            return this;
        }

        /**
         * Setter for website.
         * @param  website  String value for website.
         * @return Builder
         */
        public Builder website(String website) {
            this.website = website;
            return this;
        }

        /**
         * Setter for legalName.
         * @param  legalName  String value for legalName.
         * @return Builder
         */
        public Builder legalName(String legalName) {
            this.legalName = legalName;
            return this;
        }

        /**
         * Setter for clientAppId.
         * @param  clientAppId  String value for clientAppId.
         * @return Builder
         */
        public Builder clientAppId(String clientAppId) {
            this.clientAppId = clientAppId;
            return this;
        }

        /**
         * Setter for appCompleteEndpoint.
         * @param  appCompleteEndpoint  String value for appCompleteEndpoint.
         * @return Builder
         */
        public Builder appCompleteEndpoint(String appCompleteEndpoint) {
            this.appCompleteEndpoint = appCompleteEndpoint;
            return this;
        }

        /**
         * Setter for isTest.
         * @param  isTest  IsTestEnum value for isTest.
         * @return Builder
         */
        public Builder isTest(IsTestEnum isTest) {
            this.isTest = isTest;
            return this;
        }

        /**
         * Builds a new {@link V1OnboardingRequest} object using the set fields.
         * @return {@link V1OnboardingRequest}
         */
        public V1OnboardingRequest build() {
            return new V1OnboardingRequest(primaryPrincipal, templateCode, email, dbaName, location,
                    appDelivery, bankAccount, contact, businessCategory, businessType,
                    businessDescription, swipedPercent, keyedPercent, ecommercePercent,
                    ownershipType, fedTaxId, ccAverageTicketRange, ccMonthlyVolumeRange,
                    ccHighTicket, ecAverageTicketRange, ecMonthlyVolumeRange, ecHighTicket, website,
                    legalName, clientAppId, appCompleteEndpoint, isTest);
        }
    }
}
