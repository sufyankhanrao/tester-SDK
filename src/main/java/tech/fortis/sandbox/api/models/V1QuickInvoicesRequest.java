/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package tech.fortis.sandbox.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.util.List;
import tech.fortis.sandbox.api.internal.OptionalNullable;

/**
 * This is a model class for V1QuickInvoicesRequest type.
 */
public class V1QuickInvoicesRequest {
    private String locationId;
    private String title;
    private String ccProductTransactionId;
    private String achProductTransactionId;
    private String dueDate;
    private List<ItemList> itemList;
    private Boolean allowOverpayment;
    private OptionalNullable<String> email;
    private String contactId;
    private String contactApiId;
    private String customerId;
    private String expireDate;
    private Boolean allowPartialPay;
    private Boolean attachFilesToEmail;
    private Boolean sendEmail;
    private OptionalNullable<String> invoiceNumber;
    private OptionalNullable<String> itemHeader;
    private OptionalNullable<String> itemFooter;
    private Double amountDue;
    private OptionalNullable<String> notificationEmail;
    private Double paymentStatusId;
    private Double statusId;
    private OptionalNullable<String> note;
    private OptionalNullable<Integer> notificationDaysBeforeDueDate;
    private OptionalNullable<Integer> notificationDaysAfterDueDate;
    private Boolean notificationOnDueDate;
    private Integer sendTextToPay;
    private List<Object> files;
    private Double remainingBalance;
    private Double singlePaymentMinAmount;
    private Double singlePaymentMaxAmount;
    private OptionalNullable<String> cellPhone;

    /**
     * Default constructor.
     */
    public V1QuickInvoicesRequest() {
        singlePaymentMaxAmount = 9999999.99d;
    }

    /**
     * Initialization constructor.
     * @param  locationId  String value for locationId.
     * @param  title  String value for title.
     * @param  ccProductTransactionId  String value for ccProductTransactionId.
     * @param  dueDate  String value for dueDate.
     * @param  itemList  List of ItemList value for itemList.
     * @param  achProductTransactionId  String value for achProductTransactionId.
     * @param  allowOverpayment  Boolean value for allowOverpayment.
     * @param  email  String value for email.
     * @param  contactId  String value for contactId.
     * @param  contactApiId  String value for contactApiId.
     * @param  customerId  String value for customerId.
     * @param  expireDate  String value for expireDate.
     * @param  allowPartialPay  Boolean value for allowPartialPay.
     * @param  attachFilesToEmail  Boolean value for attachFilesToEmail.
     * @param  sendEmail  Boolean value for sendEmail.
     * @param  invoiceNumber  String value for invoiceNumber.
     * @param  itemHeader  String value for itemHeader.
     * @param  itemFooter  String value for itemFooter.
     * @param  amountDue  Double value for amountDue.
     * @param  notificationEmail  String value for notificationEmail.
     * @param  paymentStatusId  Double value for paymentStatusId.
     * @param  statusId  Double value for statusId.
     * @param  note  String value for note.
     * @param  notificationDaysBeforeDueDate  Integer value for notificationDaysBeforeDueDate.
     * @param  notificationDaysAfterDueDate  Integer value for notificationDaysAfterDueDate.
     * @param  notificationOnDueDate  Boolean value for notificationOnDueDate.
     * @param  sendTextToPay  Integer value for sendTextToPay.
     * @param  files  List of Object value for files.
     * @param  remainingBalance  Double value for remainingBalance.
     * @param  singlePaymentMinAmount  Double value for singlePaymentMinAmount.
     * @param  singlePaymentMaxAmount  Double value for singlePaymentMaxAmount.
     * @param  cellPhone  String value for cellPhone.
     */
    public V1QuickInvoicesRequest(
            String locationId,
            String title,
            String ccProductTransactionId,
            String dueDate,
            List<ItemList> itemList,
            String achProductTransactionId,
            Boolean allowOverpayment,
            String email,
            String contactId,
            String contactApiId,
            String customerId,
            String expireDate,
            Boolean allowPartialPay,
            Boolean attachFilesToEmail,
            Boolean sendEmail,
            String invoiceNumber,
            String itemHeader,
            String itemFooter,
            Double amountDue,
            String notificationEmail,
            Double paymentStatusId,
            Double statusId,
            String note,
            Integer notificationDaysBeforeDueDate,
            Integer notificationDaysAfterDueDate,
            Boolean notificationOnDueDate,
            Integer sendTextToPay,
            List<Object> files,
            Double remainingBalance,
            Double singlePaymentMinAmount,
            Double singlePaymentMaxAmount,
            String cellPhone) {
        this.locationId = locationId;
        this.title = title;
        this.ccProductTransactionId = ccProductTransactionId;
        this.achProductTransactionId = achProductTransactionId;
        this.dueDate = dueDate;
        this.itemList = itemList;
        this.allowOverpayment = allowOverpayment;
        this.email = OptionalNullable.of(email);
        this.contactId = contactId;
        this.contactApiId = contactApiId;
        this.customerId = customerId;
        this.expireDate = expireDate;
        this.allowPartialPay = allowPartialPay;
        this.attachFilesToEmail = attachFilesToEmail;
        this.sendEmail = sendEmail;
        this.invoiceNumber = OptionalNullable.of(invoiceNumber);
        this.itemHeader = OptionalNullable.of(itemHeader);
        this.itemFooter = OptionalNullable.of(itemFooter);
        this.amountDue = amountDue;
        this.notificationEmail = OptionalNullable.of(notificationEmail);
        this.paymentStatusId = paymentStatusId;
        this.statusId = statusId;
        this.note = OptionalNullable.of(note);
        this.notificationDaysBeforeDueDate = OptionalNullable.of(notificationDaysBeforeDueDate);
        this.notificationDaysAfterDueDate = OptionalNullable.of(notificationDaysAfterDueDate);
        this.notificationOnDueDate = notificationOnDueDate;
        this.sendTextToPay = sendTextToPay;
        this.files = files;
        this.remainingBalance = remainingBalance;
        this.singlePaymentMinAmount = singlePaymentMinAmount;
        this.singlePaymentMaxAmount = singlePaymentMaxAmount;
        this.cellPhone = OptionalNullable.of(cellPhone);
    }

    /**
     * Internal initialization constructor.
     */
    protected V1QuickInvoicesRequest(String locationId, String title, String ccProductTransactionId,
            String dueDate, List<ItemList> itemList, String achProductTransactionId,
            Boolean allowOverpayment, OptionalNullable<String> email, String contactId,
            String contactApiId, String customerId, String expireDate, Boolean allowPartialPay,
            Boolean attachFilesToEmail, Boolean sendEmail, OptionalNullable<String> invoiceNumber,
            OptionalNullable<String> itemHeader, OptionalNullable<String> itemFooter,
            Double amountDue, OptionalNullable<String> notificationEmail, Double paymentStatusId,
            Double statusId, OptionalNullable<String> note,
            OptionalNullable<Integer> notificationDaysBeforeDueDate,
            OptionalNullable<Integer> notificationDaysAfterDueDate, Boolean notificationOnDueDate,
            Integer sendTextToPay, List<Object> files, Double remainingBalance,
            Double singlePaymentMinAmount, Double singlePaymentMaxAmount,
            OptionalNullable<String> cellPhone) {
        this.locationId = locationId;
        this.title = title;
        this.ccProductTransactionId = ccProductTransactionId;
        this.achProductTransactionId = achProductTransactionId;
        this.dueDate = dueDate;
        this.itemList = itemList;
        this.allowOverpayment = allowOverpayment;
        this.email = email;
        this.contactId = contactId;
        this.contactApiId = contactApiId;
        this.customerId = customerId;
        this.expireDate = expireDate;
        this.allowPartialPay = allowPartialPay;
        this.attachFilesToEmail = attachFilesToEmail;
        this.sendEmail = sendEmail;
        this.invoiceNumber = invoiceNumber;
        this.itemHeader = itemHeader;
        this.itemFooter = itemFooter;
        this.amountDue = amountDue;
        this.notificationEmail = notificationEmail;
        this.paymentStatusId = paymentStatusId;
        this.statusId = statusId;
        this.note = note;
        this.notificationDaysBeforeDueDate = notificationDaysBeforeDueDate;
        this.notificationDaysAfterDueDate = notificationDaysAfterDueDate;
        this.notificationOnDueDate = notificationOnDueDate;
        this.sendTextToPay = sendTextToPay;
        this.files = files;
        this.remainingBalance = remainingBalance;
        this.singlePaymentMinAmount = singlePaymentMinAmount;
        this.singlePaymentMaxAmount = singlePaymentMaxAmount;
        this.cellPhone = cellPhone;
    }

    /**
     * Getter for LocationId.
     * Location ID
     * @return Returns the String
     */
    @JsonGetter("location_id")
    public String getLocationId() {
        return locationId;
    }

    /**
     * Setter for LocationId.
     * Location ID
     * @param locationId Value for String
     */
    @JsonSetter("location_id")
    public void setLocationId(String locationId) {
        this.locationId = locationId;
    }

    /**
     * Getter for Title.
     * Title
     * @return Returns the String
     */
    @JsonGetter("title")
    public String getTitle() {
        return title;
    }

    /**
     * Setter for Title.
     * Title
     * @param title Value for String
     */
    @JsonSetter("title")
    public void setTitle(String title) {
        this.title = title;
    }

    /**
     * Getter for CcProductTransactionId.
     * Transaction ID
     * @return Returns the String
     */
    @JsonGetter("cc_product_transaction_id")
    public String getCcProductTransactionId() {
        return ccProductTransactionId;
    }

    /**
     * Setter for CcProductTransactionId.
     * Transaction ID
     * @param ccProductTransactionId Value for String
     */
    @JsonSetter("cc_product_transaction_id")
    public void setCcProductTransactionId(String ccProductTransactionId) {
        this.ccProductTransactionId = ccProductTransactionId;
    }

    /**
     * Getter for AchProductTransactionId.
     * ACH Product Transaction Id
     * @return Returns the String
     */
    @JsonGetter("ach_product_transaction_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getAchProductTransactionId() {
        return achProductTransactionId;
    }

    /**
     * Setter for AchProductTransactionId.
     * ACH Product Transaction Id
     * @param achProductTransactionId Value for String
     */
    @JsonSetter("ach_product_transaction_id")
    public void setAchProductTransactionId(String achProductTransactionId) {
        this.achProductTransactionId = achProductTransactionId;
    }

    /**
     * Getter for DueDate.
     * Due Date, Format: Y-m-d
     * @return Returns the String
     */
    @JsonGetter("due_date")
    public String getDueDate() {
        return dueDate;
    }

    /**
     * Setter for DueDate.
     * Due Date, Format: Y-m-d
     * @param dueDate Value for String
     */
    @JsonSetter("due_date")
    public void setDueDate(String dueDate) {
        this.dueDate = dueDate;
    }

    /**
     * Getter for ItemList.
     * Item List
     * @return Returns the List of ItemList
     */
    @JsonGetter("item_list")
    public List<ItemList> getItemList() {
        return itemList;
    }

    /**
     * Setter for ItemList.
     * Item List
     * @param itemList Value for List of ItemList
     */
    @JsonSetter("item_list")
    public void setItemList(List<ItemList> itemList) {
        this.itemList = itemList;
    }

    /**
     * Getter for AllowOverpayment.
     * Allow Overpayment.
     * @return Returns the Boolean
     */
    @JsonGetter("allow_overpayment")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getAllowOverpayment() {
        return allowOverpayment;
    }

    /**
     * Setter for AllowOverpayment.
     * Allow Overpayment.
     * @param allowOverpayment Value for Boolean
     */
    @JsonSetter("allow_overpayment")
    public void setAllowOverpayment(Boolean allowOverpayment) {
        this.allowOverpayment = allowOverpayment;
    }

    /**
     * Internal Getter for Email.
     * Email
     * @return Returns the Internal String
     */
    @JsonGetter("email")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetEmail() {
        return this.email;
    }

    /**
     * Getter for Email.
     * Email
     * @return Returns the String
     */
    public String getEmail() {
        return OptionalNullable.getFrom(email);
    }

    /**
     * Setter for Email.
     * Email
     * @param email Value for String
     */
    @JsonSetter("email")
    public void setEmail(String email) {
        this.email = OptionalNullable.of(email);
    }

    /**
     * UnSetter for Email.
     * Email
     */
    public void unsetEmail() {
        email = null;
    }

    /**
     * Getter for ContactId.
     * Contact ID
     * @return Returns the String
     */
    @JsonGetter("contact_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getContactId() {
        return contactId;
    }

    /**
     * Setter for ContactId.
     * Contact ID
     * @param contactId Value for String
     */
    @JsonSetter("contact_id")
    public void setContactId(String contactId) {
        this.contactId = contactId;
    }

    /**
     * Getter for ContactApiId.
     * Contact API Id
     * @return Returns the String
     */
    @JsonGetter("contact_api_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getContactApiId() {
        return contactApiId;
    }

    /**
     * Setter for ContactApiId.
     * Contact API Id
     * @param contactApiId Value for String
     */
    @JsonSetter("contact_api_id")
    public void setContactApiId(String contactApiId) {
        this.contactApiId = contactApiId;
    }

    /**
     * Getter for CustomerId.
     * Customer Id
     * @return Returns the String
     */
    @JsonGetter("customer_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCustomerId() {
        return customerId;
    }

    /**
     * Setter for CustomerId.
     * Customer Id
     * @param customerId Value for String
     */
    @JsonSetter("customer_id")
    public void setCustomerId(String customerId) {
        this.customerId = customerId;
    }

    /**
     * Getter for ExpireDate.
     * Expire Date.
     * @return Returns the String
     */
    @JsonGetter("expire_date")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getExpireDate() {
        return expireDate;
    }

    /**
     * Setter for ExpireDate.
     * Expire Date.
     * @param expireDate Value for String
     */
    @JsonSetter("expire_date")
    public void setExpireDate(String expireDate) {
        this.expireDate = expireDate;
    }

    /**
     * Getter for AllowPartialPay.
     * Allow partial pay
     * @return Returns the Boolean
     */
    @JsonGetter("allow_partial_pay")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getAllowPartialPay() {
        return allowPartialPay;
    }

    /**
     * Setter for AllowPartialPay.
     * Allow partial pay
     * @param allowPartialPay Value for Boolean
     */
    @JsonSetter("allow_partial_pay")
    public void setAllowPartialPay(Boolean allowPartialPay) {
        this.allowPartialPay = allowPartialPay;
    }

    /**
     * Getter for AttachFilesToEmail.
     * Attach Files to Email
     * @return Returns the Boolean
     */
    @JsonGetter("attach_files_to_email")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getAttachFilesToEmail() {
        return attachFilesToEmail;
    }

    /**
     * Setter for AttachFilesToEmail.
     * Attach Files to Email
     * @param attachFilesToEmail Value for Boolean
     */
    @JsonSetter("attach_files_to_email")
    public void setAttachFilesToEmail(Boolean attachFilesToEmail) {
        this.attachFilesToEmail = attachFilesToEmail;
    }

    /**
     * Getter for SendEmail.
     * Send Email
     * @return Returns the Boolean
     */
    @JsonGetter("send_email")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getSendEmail() {
        return sendEmail;
    }

    /**
     * Setter for SendEmail.
     * Send Email
     * @param sendEmail Value for Boolean
     */
    @JsonSetter("send_email")
    public void setSendEmail(Boolean sendEmail) {
        this.sendEmail = sendEmail;
    }

    /**
     * Internal Getter for InvoiceNumber.
     * Invoice number
     * @return Returns the Internal String
     */
    @JsonGetter("invoice_number")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetInvoiceNumber() {
        return this.invoiceNumber;
    }

    /**
     * Getter for InvoiceNumber.
     * Invoice number
     * @return Returns the String
     */
    public String getInvoiceNumber() {
        return OptionalNullable.getFrom(invoiceNumber);
    }

    /**
     * Setter for InvoiceNumber.
     * Invoice number
     * @param invoiceNumber Value for String
     */
    @JsonSetter("invoice_number")
    public void setInvoiceNumber(String invoiceNumber) {
        this.invoiceNumber = OptionalNullable.of(invoiceNumber);
    }

    /**
     * UnSetter for InvoiceNumber.
     * Invoice number
     */
    public void unsetInvoiceNumber() {
        invoiceNumber = null;
    }

    /**
     * Internal Getter for ItemHeader.
     * Item Header
     * @return Returns the Internal String
     */
    @JsonGetter("item_header")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetItemHeader() {
        return this.itemHeader;
    }

    /**
     * Getter for ItemHeader.
     * Item Header
     * @return Returns the String
     */
    public String getItemHeader() {
        return OptionalNullable.getFrom(itemHeader);
    }

    /**
     * Setter for ItemHeader.
     * Item Header
     * @param itemHeader Value for String
     */
    @JsonSetter("item_header")
    public void setItemHeader(String itemHeader) {
        this.itemHeader = OptionalNullable.of(itemHeader);
    }

    /**
     * UnSetter for ItemHeader.
     * Item Header
     */
    public void unsetItemHeader() {
        itemHeader = null;
    }

    /**
     * Internal Getter for ItemFooter.
     * Item footer
     * @return Returns the Internal String
     */
    @JsonGetter("item_footer")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetItemFooter() {
        return this.itemFooter;
    }

    /**
     * Getter for ItemFooter.
     * Item footer
     * @return Returns the String
     */
    public String getItemFooter() {
        return OptionalNullable.getFrom(itemFooter);
    }

    /**
     * Setter for ItemFooter.
     * Item footer
     * @param itemFooter Value for String
     */
    @JsonSetter("item_footer")
    public void setItemFooter(String itemFooter) {
        this.itemFooter = OptionalNullable.of(itemFooter);
    }

    /**
     * UnSetter for ItemFooter.
     * Item footer
     */
    public void unsetItemFooter() {
        itemFooter = null;
    }

    /**
     * Getter for AmountDue.
     * Amount Due
     * @return Returns the Double
     */
    @JsonGetter("amount_due")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getAmountDue() {
        return amountDue;
    }

    /**
     * Setter for AmountDue.
     * Amount Due
     * @param amountDue Value for Double
     */
    @JsonSetter("amount_due")
    public void setAmountDue(Double amountDue) {
        this.amountDue = amountDue;
    }

    /**
     * Internal Getter for NotificationEmail.
     * Notification email
     * @return Returns the Internal String
     */
    @JsonGetter("notification_email")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetNotificationEmail() {
        return this.notificationEmail;
    }

    /**
     * Getter for NotificationEmail.
     * Notification email
     * @return Returns the String
     */
    public String getNotificationEmail() {
        return OptionalNullable.getFrom(notificationEmail);
    }

    /**
     * Setter for NotificationEmail.
     * Notification email
     * @param notificationEmail Value for String
     */
    @JsonSetter("notification_email")
    public void setNotificationEmail(String notificationEmail) {
        this.notificationEmail = OptionalNullable.of(notificationEmail);
    }

    /**
     * UnSetter for NotificationEmail.
     * Notification email
     */
    public void unsetNotificationEmail() {
        notificationEmail = null;
    }

    /**
     * Getter for PaymentStatusId.
     * Payment Status Id
     * @return Returns the Double
     */
    @JsonGetter("payment_status_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getPaymentStatusId() {
        return paymentStatusId;
    }

    /**
     * Setter for PaymentStatusId.
     * Payment Status Id
     * @param paymentStatusId Value for Double
     */
    @JsonSetter("payment_status_id")
    public void setPaymentStatusId(Double paymentStatusId) {
        this.paymentStatusId = paymentStatusId;
    }

    /**
     * Getter for StatusId.
     * Status Id
     * @return Returns the Double
     */
    @JsonGetter("status_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getStatusId() {
        return statusId;
    }

    /**
     * Setter for StatusId.
     * Status Id
     * @param statusId Value for Double
     */
    @JsonSetter("status_id")
    public void setStatusId(Double statusId) {
        this.statusId = statusId;
    }

    /**
     * Internal Getter for Note.
     * Note
     * @return Returns the Internal String
     */
    @JsonGetter("note")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetNote() {
        return this.note;
    }

    /**
     * Getter for Note.
     * Note
     * @return Returns the String
     */
    public String getNote() {
        return OptionalNullable.getFrom(note);
    }

    /**
     * Setter for Note.
     * Note
     * @param note Value for String
     */
    @JsonSetter("note")
    public void setNote(String note) {
        this.note = OptionalNullable.of(note);
    }

    /**
     * UnSetter for Note.
     * Note
     */
    public void unsetNote() {
        note = null;
    }

    /**
     * Internal Getter for NotificationDaysBeforeDueDate.
     * Notification days before due date
     * @return Returns the Internal Integer
     */
    @JsonGetter("notification_days_before_due_date")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetNotificationDaysBeforeDueDate() {
        return this.notificationDaysBeforeDueDate;
    }

    /**
     * Getter for NotificationDaysBeforeDueDate.
     * Notification days before due date
     * @return Returns the Integer
     */
    public Integer getNotificationDaysBeforeDueDate() {
        return OptionalNullable.getFrom(notificationDaysBeforeDueDate);
    }

    /**
     * Setter for NotificationDaysBeforeDueDate.
     * Notification days before due date
     * @param notificationDaysBeforeDueDate Value for Integer
     */
    @JsonSetter("notification_days_before_due_date")
    public void setNotificationDaysBeforeDueDate(Integer notificationDaysBeforeDueDate) {
        this.notificationDaysBeforeDueDate = OptionalNullable.of(notificationDaysBeforeDueDate);
    }

    /**
     * UnSetter for NotificationDaysBeforeDueDate.
     * Notification days before due date
     */
    public void unsetNotificationDaysBeforeDueDate() {
        notificationDaysBeforeDueDate = null;
    }

    /**
     * Internal Getter for NotificationDaysAfterDueDate.
     * Notification days after due date
     * @return Returns the Internal Integer
     */
    @JsonGetter("notification_days_after_due_date")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetNotificationDaysAfterDueDate() {
        return this.notificationDaysAfterDueDate;
    }

    /**
     * Getter for NotificationDaysAfterDueDate.
     * Notification days after due date
     * @return Returns the Integer
     */
    public Integer getNotificationDaysAfterDueDate() {
        return OptionalNullable.getFrom(notificationDaysAfterDueDate);
    }

    /**
     * Setter for NotificationDaysAfterDueDate.
     * Notification days after due date
     * @param notificationDaysAfterDueDate Value for Integer
     */
    @JsonSetter("notification_days_after_due_date")
    public void setNotificationDaysAfterDueDate(Integer notificationDaysAfterDueDate) {
        this.notificationDaysAfterDueDate = OptionalNullable.of(notificationDaysAfterDueDate);
    }

    /**
     * UnSetter for NotificationDaysAfterDueDate.
     * Notification days after due date
     */
    public void unsetNotificationDaysAfterDueDate() {
        notificationDaysAfterDueDate = null;
    }

    /**
     * Getter for NotificationOnDueDate.
     * Notification on due date
     * @return Returns the Boolean
     */
    @JsonGetter("notification_on_due_date")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getNotificationOnDueDate() {
        return notificationOnDueDate;
    }

    /**
     * Setter for NotificationOnDueDate.
     * Notification on due date
     * @param notificationOnDueDate Value for Boolean
     */
    @JsonSetter("notification_on_due_date")
    public void setNotificationOnDueDate(Boolean notificationOnDueDate) {
        this.notificationOnDueDate = notificationOnDueDate;
    }

    /**
     * Getter for SendTextToPay.
     * Send Text To Pay
     * @return Returns the Integer
     */
    @JsonGetter("send_text_to_pay")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getSendTextToPay() {
        return sendTextToPay;
    }

    /**
     * Setter for SendTextToPay.
     * Send Text To Pay
     * @param sendTextToPay Value for Integer
     */
    @JsonSetter("send_text_to_pay")
    public void setSendTextToPay(Integer sendTextToPay) {
        this.sendTextToPay = sendTextToPay;
    }

    /**
     * Getter for Files.
     * Files
     * @return Returns the List of Object
     */
    @JsonGetter("files")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<Object> getFiles() {
        return files;
    }

    /**
     * Setter for Files.
     * Files
     * @param files Value for List of Object
     */
    @JsonSetter("files")
    public void setFiles(List<Object> files) {
        this.files = files;
    }

    /**
     * Getter for RemainingBalance.
     * Remaining Balance
     * @return Returns the Double
     */
    @JsonGetter("remaining_balance")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getRemainingBalance() {
        return remainingBalance;
    }

    /**
     * Setter for RemainingBalance.
     * Remaining Balance
     * @param remainingBalance Value for Double
     */
    @JsonSetter("remaining_balance")
    public void setRemainingBalance(Double remainingBalance) {
        this.remainingBalance = remainingBalance;
    }

    /**
     * Getter for SinglePaymentMinAmount.
     * Single Payment Min Amount
     * @return Returns the Double
     */
    @JsonGetter("single_payment_min_amount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getSinglePaymentMinAmount() {
        return singlePaymentMinAmount;
    }

    /**
     * Setter for SinglePaymentMinAmount.
     * Single Payment Min Amount
     * @param singlePaymentMinAmount Value for Double
     */
    @JsonSetter("single_payment_min_amount")
    public void setSinglePaymentMinAmount(Double singlePaymentMinAmount) {
        this.singlePaymentMinAmount = singlePaymentMinAmount;
    }

    /**
     * Getter for SinglePaymentMaxAmount.
     * Single Payment Max Amount
     * @return Returns the Double
     */
    @JsonGetter("single_payment_max_amount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getSinglePaymentMaxAmount() {
        return singlePaymentMaxAmount;
    }

    /**
     * Setter for SinglePaymentMaxAmount.
     * Single Payment Max Amount
     * @param singlePaymentMaxAmount Value for Double
     */
    @JsonSetter("single_payment_max_amount")
    public void setSinglePaymentMaxAmount(Double singlePaymentMaxAmount) {
        this.singlePaymentMaxAmount = singlePaymentMaxAmount;
    }

    /**
     * Internal Getter for CellPhone.
     * Cell Phone
     * @return Returns the Internal String
     */
    @JsonGetter("cell_phone")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCellPhone() {
        return this.cellPhone;
    }

    /**
     * Getter for CellPhone.
     * Cell Phone
     * @return Returns the String
     */
    public String getCellPhone() {
        return OptionalNullable.getFrom(cellPhone);
    }

    /**
     * Setter for CellPhone.
     * Cell Phone
     * @param cellPhone Value for String
     */
    @JsonSetter("cell_phone")
    public void setCellPhone(String cellPhone) {
        this.cellPhone = OptionalNullable.of(cellPhone);
    }

    /**
     * UnSetter for CellPhone.
     * Cell Phone
     */
    public void unsetCellPhone() {
        cellPhone = null;
    }

    /**
     * Converts this V1QuickInvoicesRequest into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "V1QuickInvoicesRequest [" + "locationId=" + locationId + ", title=" + title
                + ", ccProductTransactionId=" + ccProductTransactionId + ", dueDate=" + dueDate
                + ", itemList=" + itemList + ", achProductTransactionId=" + achProductTransactionId
                + ", allowOverpayment=" + allowOverpayment + ", email=" + email + ", contactId="
                + contactId + ", contactApiId=" + contactApiId + ", customerId=" + customerId
                + ", expireDate=" + expireDate + ", allowPartialPay=" + allowPartialPay
                + ", attachFilesToEmail=" + attachFilesToEmail + ", sendEmail=" + sendEmail
                + ", invoiceNumber=" + invoiceNumber + ", itemHeader=" + itemHeader
                + ", itemFooter=" + itemFooter + ", amountDue=" + amountDue + ", notificationEmail="
                + notificationEmail + ", paymentStatusId=" + paymentStatusId + ", statusId="
                + statusId + ", note=" + note + ", notificationDaysBeforeDueDate="
                + notificationDaysBeforeDueDate + ", notificationDaysAfterDueDate="
                + notificationDaysAfterDueDate + ", notificationOnDueDate=" + notificationOnDueDate
                + ", sendTextToPay=" + sendTextToPay + ", files=" + files + ", remainingBalance="
                + remainingBalance + ", singlePaymentMinAmount=" + singlePaymentMinAmount
                + ", singlePaymentMaxAmount=" + singlePaymentMaxAmount + ", cellPhone=" + cellPhone
                + "]";
    }

    /**
     * Builds a new {@link V1QuickInvoicesRequest.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link V1QuickInvoicesRequest.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(locationId, title, ccProductTransactionId, dueDate, itemList)
                .achProductTransactionId(getAchProductTransactionId())
                .allowOverpayment(getAllowOverpayment())
                .contactId(getContactId())
                .contactApiId(getContactApiId())
                .customerId(getCustomerId())
                .expireDate(getExpireDate())
                .allowPartialPay(getAllowPartialPay())
                .attachFilesToEmail(getAttachFilesToEmail())
                .sendEmail(getSendEmail())
                .amountDue(getAmountDue())
                .paymentStatusId(getPaymentStatusId())
                .statusId(getStatusId())
                .notificationOnDueDate(getNotificationOnDueDate())
                .sendTextToPay(getSendTextToPay())
                .files(getFiles())
                .remainingBalance(getRemainingBalance())
                .singlePaymentMinAmount(getSinglePaymentMinAmount())
                .singlePaymentMaxAmount(getSinglePaymentMaxAmount());
        builder.email = internalGetEmail();
        builder.invoiceNumber = internalGetInvoiceNumber();
        builder.itemHeader = internalGetItemHeader();
        builder.itemFooter = internalGetItemFooter();
        builder.notificationEmail = internalGetNotificationEmail();
        builder.note = internalGetNote();
        builder.notificationDaysBeforeDueDate = internalGetNotificationDaysBeforeDueDate();
        builder.notificationDaysAfterDueDate = internalGetNotificationDaysAfterDueDate();
        builder.cellPhone = internalGetCellPhone();
        return builder;
    }

    /**
     * Class to build instances of {@link V1QuickInvoicesRequest}.
     */
    public static class Builder {
        private String locationId;
        private String title;
        private String ccProductTransactionId;
        private String dueDate;
        private List<ItemList> itemList;
        private String achProductTransactionId;
        private Boolean allowOverpayment;
        private OptionalNullable<String> email;
        private String contactId;
        private String contactApiId;
        private String customerId;
        private String expireDate;
        private Boolean allowPartialPay;
        private Boolean attachFilesToEmail;
        private Boolean sendEmail;
        private OptionalNullable<String> invoiceNumber;
        private OptionalNullable<String> itemHeader;
        private OptionalNullable<String> itemFooter;
        private Double amountDue;
        private OptionalNullable<String> notificationEmail;
        private Double paymentStatusId;
        private Double statusId;
        private OptionalNullable<String> note;
        private OptionalNullable<Integer> notificationDaysBeforeDueDate;
        private OptionalNullable<Integer> notificationDaysAfterDueDate;
        private Boolean notificationOnDueDate;
        private Integer sendTextToPay;
        private List<Object> files;
        private Double remainingBalance;
        private Double singlePaymentMinAmount;
        private Double singlePaymentMaxAmount = 9999999.99d;
        private OptionalNullable<String> cellPhone;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  locationId  String value for locationId.
         * @param  title  String value for title.
         * @param  ccProductTransactionId  String value for ccProductTransactionId.
         * @param  dueDate  String value for dueDate.
         * @param  itemList  List of ItemList value for itemList.
         */
        public Builder(String locationId, String title, String ccProductTransactionId,
                String dueDate, List<ItemList> itemList) {
            this.locationId = locationId;
            this.title = title;
            this.ccProductTransactionId = ccProductTransactionId;
            this.dueDate = dueDate;
            this.itemList = itemList;
        }

        /**
         * Setter for locationId.
         * @param  locationId  String value for locationId.
         * @return Builder
         */
        public Builder locationId(String locationId) {
            this.locationId = locationId;
            return this;
        }

        /**
         * Setter for title.
         * @param  title  String value for title.
         * @return Builder
         */
        public Builder title(String title) {
            this.title = title;
            return this;
        }

        /**
         * Setter for ccProductTransactionId.
         * @param  ccProductTransactionId  String value for ccProductTransactionId.
         * @return Builder
         */
        public Builder ccProductTransactionId(String ccProductTransactionId) {
            this.ccProductTransactionId = ccProductTransactionId;
            return this;
        }

        /**
         * Setter for dueDate.
         * @param  dueDate  String value for dueDate.
         * @return Builder
         */
        public Builder dueDate(String dueDate) {
            this.dueDate = dueDate;
            return this;
        }

        /**
         * Setter for itemList.
         * @param  itemList  List of ItemList value for itemList.
         * @return Builder
         */
        public Builder itemList(List<ItemList> itemList) {
            this.itemList = itemList;
            return this;
        }

        /**
         * Setter for achProductTransactionId.
         * @param  achProductTransactionId  String value for achProductTransactionId.
         * @return Builder
         */
        public Builder achProductTransactionId(String achProductTransactionId) {
            this.achProductTransactionId = achProductTransactionId;
            return this;
        }

        /**
         * Setter for allowOverpayment.
         * @param  allowOverpayment  Boolean value for allowOverpayment.
         * @return Builder
         */
        public Builder allowOverpayment(Boolean allowOverpayment) {
            this.allowOverpayment = allowOverpayment;
            return this;
        }

        /**
         * Setter for email.
         * @param  email  String value for email.
         * @return Builder
         */
        public Builder email(String email) {
            this.email = OptionalNullable.of(email);
            return this;
        }

        /**
         * UnSetter for email.
         * @return Builder
         */
        public Builder unsetEmail() {
            email = null;
            return this;
        }

        /**
         * Setter for contactId.
         * @param  contactId  String value for contactId.
         * @return Builder
         */
        public Builder contactId(String contactId) {
            this.contactId = contactId;
            return this;
        }

        /**
         * Setter for contactApiId.
         * @param  contactApiId  String value for contactApiId.
         * @return Builder
         */
        public Builder contactApiId(String contactApiId) {
            this.contactApiId = contactApiId;
            return this;
        }

        /**
         * Setter for customerId.
         * @param  customerId  String value for customerId.
         * @return Builder
         */
        public Builder customerId(String customerId) {
            this.customerId = customerId;
            return this;
        }

        /**
         * Setter for expireDate.
         * @param  expireDate  String value for expireDate.
         * @return Builder
         */
        public Builder expireDate(String expireDate) {
            this.expireDate = expireDate;
            return this;
        }

        /**
         * Setter for allowPartialPay.
         * @param  allowPartialPay  Boolean value for allowPartialPay.
         * @return Builder
         */
        public Builder allowPartialPay(Boolean allowPartialPay) {
            this.allowPartialPay = allowPartialPay;
            return this;
        }

        /**
         * Setter for attachFilesToEmail.
         * @param  attachFilesToEmail  Boolean value for attachFilesToEmail.
         * @return Builder
         */
        public Builder attachFilesToEmail(Boolean attachFilesToEmail) {
            this.attachFilesToEmail = attachFilesToEmail;
            return this;
        }

        /**
         * Setter for sendEmail.
         * @param  sendEmail  Boolean value for sendEmail.
         * @return Builder
         */
        public Builder sendEmail(Boolean sendEmail) {
            this.sendEmail = sendEmail;
            return this;
        }

        /**
         * Setter for invoiceNumber.
         * @param  invoiceNumber  String value for invoiceNumber.
         * @return Builder
         */
        public Builder invoiceNumber(String invoiceNumber) {
            this.invoiceNumber = OptionalNullable.of(invoiceNumber);
            return this;
        }

        /**
         * UnSetter for invoiceNumber.
         * @return Builder
         */
        public Builder unsetInvoiceNumber() {
            invoiceNumber = null;
            return this;
        }

        /**
         * Setter for itemHeader.
         * @param  itemHeader  String value for itemHeader.
         * @return Builder
         */
        public Builder itemHeader(String itemHeader) {
            this.itemHeader = OptionalNullable.of(itemHeader);
            return this;
        }

        /**
         * UnSetter for itemHeader.
         * @return Builder
         */
        public Builder unsetItemHeader() {
            itemHeader = null;
            return this;
        }

        /**
         * Setter for itemFooter.
         * @param  itemFooter  String value for itemFooter.
         * @return Builder
         */
        public Builder itemFooter(String itemFooter) {
            this.itemFooter = OptionalNullable.of(itemFooter);
            return this;
        }

        /**
         * UnSetter for itemFooter.
         * @return Builder
         */
        public Builder unsetItemFooter() {
            itemFooter = null;
            return this;
        }

        /**
         * Setter for amountDue.
         * @param  amountDue  Double value for amountDue.
         * @return Builder
         */
        public Builder amountDue(Double amountDue) {
            this.amountDue = amountDue;
            return this;
        }

        /**
         * Setter for notificationEmail.
         * @param  notificationEmail  String value for notificationEmail.
         * @return Builder
         */
        public Builder notificationEmail(String notificationEmail) {
            this.notificationEmail = OptionalNullable.of(notificationEmail);
            return this;
        }

        /**
         * UnSetter for notificationEmail.
         * @return Builder
         */
        public Builder unsetNotificationEmail() {
            notificationEmail = null;
            return this;
        }

        /**
         * Setter for paymentStatusId.
         * @param  paymentStatusId  Double value for paymentStatusId.
         * @return Builder
         */
        public Builder paymentStatusId(Double paymentStatusId) {
            this.paymentStatusId = paymentStatusId;
            return this;
        }

        /**
         * Setter for statusId.
         * @param  statusId  Double value for statusId.
         * @return Builder
         */
        public Builder statusId(Double statusId) {
            this.statusId = statusId;
            return this;
        }

        /**
         * Setter for note.
         * @param  note  String value for note.
         * @return Builder
         */
        public Builder note(String note) {
            this.note = OptionalNullable.of(note);
            return this;
        }

        /**
         * UnSetter for note.
         * @return Builder
         */
        public Builder unsetNote() {
            note = null;
            return this;
        }

        /**
         * Setter for notificationDaysBeforeDueDate.
         * @param  notificationDaysBeforeDueDate  Integer value for notificationDaysBeforeDueDate.
         * @return Builder
         */
        public Builder notificationDaysBeforeDueDate(Integer notificationDaysBeforeDueDate) {
            this.notificationDaysBeforeDueDate = OptionalNullable.of(notificationDaysBeforeDueDate);
            return this;
        }

        /**
         * UnSetter for notificationDaysBeforeDueDate.
         * @return Builder
         */
        public Builder unsetNotificationDaysBeforeDueDate() {
            notificationDaysBeforeDueDate = null;
            return this;
        }

        /**
         * Setter for notificationDaysAfterDueDate.
         * @param  notificationDaysAfterDueDate  Integer value for notificationDaysAfterDueDate.
         * @return Builder
         */
        public Builder notificationDaysAfterDueDate(Integer notificationDaysAfterDueDate) {
            this.notificationDaysAfterDueDate = OptionalNullable.of(notificationDaysAfterDueDate);
            return this;
        }

        /**
         * UnSetter for notificationDaysAfterDueDate.
         * @return Builder
         */
        public Builder unsetNotificationDaysAfterDueDate() {
            notificationDaysAfterDueDate = null;
            return this;
        }

        /**
         * Setter for notificationOnDueDate.
         * @param  notificationOnDueDate  Boolean value for notificationOnDueDate.
         * @return Builder
         */
        public Builder notificationOnDueDate(Boolean notificationOnDueDate) {
            this.notificationOnDueDate = notificationOnDueDate;
            return this;
        }

        /**
         * Setter for sendTextToPay.
         * @param  sendTextToPay  Integer value for sendTextToPay.
         * @return Builder
         */
        public Builder sendTextToPay(Integer sendTextToPay) {
            this.sendTextToPay = sendTextToPay;
            return this;
        }

        /**
         * Setter for files.
         * @param  files  List of Object value for files.
         * @return Builder
         */
        public Builder files(List<Object> files) {
            this.files = files;
            return this;
        }

        /**
         * Setter for remainingBalance.
         * @param  remainingBalance  Double value for remainingBalance.
         * @return Builder
         */
        public Builder remainingBalance(Double remainingBalance) {
            this.remainingBalance = remainingBalance;
            return this;
        }

        /**
         * Setter for singlePaymentMinAmount.
         * @param  singlePaymentMinAmount  Double value for singlePaymentMinAmount.
         * @return Builder
         */
        public Builder singlePaymentMinAmount(Double singlePaymentMinAmount) {
            this.singlePaymentMinAmount = singlePaymentMinAmount;
            return this;
        }

        /**
         * Setter for singlePaymentMaxAmount.
         * @param  singlePaymentMaxAmount  Double value for singlePaymentMaxAmount.
         * @return Builder
         */
        public Builder singlePaymentMaxAmount(Double singlePaymentMaxAmount) {
            this.singlePaymentMaxAmount = singlePaymentMaxAmount;
            return this;
        }

        /**
         * Setter for cellPhone.
         * @param  cellPhone  String value for cellPhone.
         * @return Builder
         */
        public Builder cellPhone(String cellPhone) {
            this.cellPhone = OptionalNullable.of(cellPhone);
            return this;
        }

        /**
         * UnSetter for cellPhone.
         * @return Builder
         */
        public Builder unsetCellPhone() {
            cellPhone = null;
            return this;
        }

        /**
         * Builds a new {@link V1QuickInvoicesRequest} object using the set fields.
         * @return {@link V1QuickInvoicesRequest}
         */
        public V1QuickInvoicesRequest build() {
            return new V1QuickInvoicesRequest(locationId, title, ccProductTransactionId, dueDate,
                    itemList, achProductTransactionId, allowOverpayment, email, contactId,
                    contactApiId, customerId, expireDate, allowPartialPay, attachFilesToEmail,
                    sendEmail, invoiceNumber, itemHeader, itemFooter, amountDue, notificationEmail,
                    paymentStatusId, statusId, note, notificationDaysBeforeDueDate,
                    notificationDaysAfterDueDate, notificationOnDueDate, sendTextToPay, files,
                    remainingBalance, singlePaymentMinAmount, singlePaymentMaxAmount, cellPhone);
        }
    }
}
