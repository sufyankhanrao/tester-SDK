/*
 * LobAPI20200211SpecificationLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import com.lob.api.ApiHelper;
import com.lob.api.LobAPI20200211SpecificationClient;
import com.lob.api.exceptions.ApiException;
import com.lob.api.models.IntlVerification;
import com.lob.api.models.XLangOutputEnum;
import com.lob.api.testing.TestHelper;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class IntlVerificationsControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static LobAPI20200211SpecificationClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static IntlVerificationsController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getIntlVerificationsController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * Verify an international (except US or US territories) address _with a live API key_. Requests
     * to this endpoint with a test API key will return a dummy response based on the primary line
     * you input.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestIntlVerification() throws Exception {
        // Parameters for the API call
        Object body = ApiHelper.deserialize(
                "{\"recipient\":\"Harry Zhang\",\"primary_line\":\"370 Water St\",\"secondary_line"
                + "\":\"\",\"city\":\"Summerside\",\"state\":\"Prince Edward Island\",\"postal code"
                + "\":\"C1N 1C4\",\"country\":\"CA\"}");
        XLangOutputEnum xLangOutput = null;

        // Set callback and perform API call
        IntlVerification result = null;
        try {
            result = controller.intlVerification(body, xLangOutput);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("ratelimit-limit", TestHelper.nullString);
        headers.put("ratelimit-remaining", TestHelper.nullString);
        headers.put("ratelimit-reset", TestHelper.nullString);
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"id\":\"intl_ver_c7cb63d68f8d6\",\"recipient\":null,\"primary_line\":\"370 WATER"
                + " ST\",\"secondary_line\":\"\",\"last_line\":\"SUMMERSIDE PE C1N 1C4\",\"country"
                + "\":\"CA\",\"coverage\":\"SUBBUILDING\",\"deliverability\":\"deliverable\",\"stat"
                + "us\":\"LV4\",\"components\":{\"primary_number\":\"370\",\"street_name\":\"WATER "
                + "ST\",\"city\":\"SUMMERSIDE\",\"state\":\"PE\",\"postal_code\":\"C1N 1C4\"},\"obj"
                + "ect\":\"intl_verification\"}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

}
