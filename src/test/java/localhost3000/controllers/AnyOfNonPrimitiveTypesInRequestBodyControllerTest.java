/*
 * AnyOfNonScalarEndpointsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package localhost3000.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import com.fasterxml.jackson.core.type.TypeReference;
import java.util.List;
import java.util.Map;
import localhost3000.AnyOfNonScalarEndpointsClient;
import localhost3000.ApiHelper;
import localhost3000.exceptions.ApiException;
import localhost3000.models.ServerResponse;
import localhost3000.models.containers.SendAnyofArrayOfArrayOfMapFlagSession;
import localhost3000.models.containers.SendAnyofArrayOfArraysSession;
import localhost3000.models.containers.SendAnyofArrayOfMapFlagOfArrayOfMapFlagSession;
import localhost3000.models.containers.SendAnyofArrayOfMapFlagOfArraySession;
import localhost3000.models.containers.SendAnyofArrayOfMapFlagOfMapSession;
import localhost3000.models.containers.SendAnyofArrayOfMapFlagOfMixedArrayOfMapFlagSession;
import localhost3000.models.containers.SendAnyofArrayOfMapsSession;
import localhost3000.models.containers.SendAnyofArrayOfMixedArraysSession;
import localhost3000.models.containers.SendAnyofInnerArrayOfMapFlagSession;
import localhost3000.models.containers.SendAnyofInnerArraySession;
import localhost3000.models.containers.SendAnyofInnerMapOfArraySession;
import localhost3000.models.containers.SendAnyofInnerMapSession;
import localhost3000.models.containers.SendAnyofInnerMixedArrayOfMapFlagSession;
import localhost3000.models.containers.SendAnyofInnerMixedArraysSession;
import localhost3000.models.containers.SendAnyofInnerMixedMapOfArraySession;
import localhost3000.models.containers.SendAnyofInnerMixedMapSession;
import localhost3000.models.containers.SendAnyofMapOfArrayOfMapFlagSession;
import localhost3000.models.containers.SendAnyofMapOfArrayOfMapOfArraySession;
import localhost3000.models.containers.SendAnyofMapOfArrayOfMixedMapOfArraySession;
import localhost3000.models.containers.SendAnyofMapOfArraySession;
import localhost3000.models.containers.SendAnyofMapOfInnerMixedMapSession;
import localhost3000.models.containers.SendAnyofMapOfMapSession;
import localhost3000.models.containers.SendAnyofOuterArrayOfMapFlagSession;
import localhost3000.models.containers.SendAnyofOuterArraySession;
import localhost3000.models.containers.SendAnyofOuterMapOfArraySession;
import localhost3000.models.containers.SendAnyofOuterMapSession;
import localhost3000.models.containers.SendAnyofSimpleSession;
import localhost3000.models.containers.SendMultiLevelAnyofSession;
import localhost3000.testing.TestHelper;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class AnyOfNonPrimitiveTypesInRequestBodyControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static AnyOfNonScalarEndpointsClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static AnyOfNonPrimitiveTypesInRequestBodyController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getAnyOfNonPrimitiveTypesInRequestBodyController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * Test case for send_anyof_simple.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofSimple() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        SendAnyofSimpleSession session = ApiHelper.deserialize(
                "{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}", SendAnyofSimpleSession.class);

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofSimple(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_anyof_outer_array.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofOuterArray() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        List<SendAnyofOuterArraySession> session = ApiHelper.deserializeArray(
                "[{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}, {\"startsAt"
                + "\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}]",
                SendAnyofOuterArraySession[].class);

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofOuterArray(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_anyof_inner_array.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofInnerArray() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        SendAnyofInnerArraySession session = ApiHelper.deserialize(
                "[{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}, {\"startsAt"
                + "\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}]", SendAnyofInnerArraySession.class);

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofInnerArray(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_anyof_array_of_arrays.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofArrayOfArrays() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        List<SendAnyofArrayOfArraysSession> session = ApiHelper.deserializeArray(
                "[[{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}, {\"startsA"
                + "t\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}], [{\"startsAt\":\"15"
                + ":00\",\"endsAt\":\"21:00\",\"offerDinner\":true}, {\"startsAt\":\"15:00\",\"ends"
                + "At\":\"21:00\",\"offerDinner\":true}]]",
                SendAnyofArrayOfArraysSession[].class);

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofArrayOfArrays(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_anyof_inner_mixed_arrays.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofInnerMixedArrays() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        SendAnyofInnerMixedArraysSession session = ApiHelper.deserialize(
                "{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}", SendAnyofInnerMixedArraysSession.class);

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofInnerMixedArrays(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_anyof_array_of_mixed_arrays.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofArrayOfMixedArrays() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        List<SendAnyofArrayOfMixedArraysSession> session = ApiHelper.deserializeArray(
                "[[{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}, {\"startsAt"
                + "\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}], [{\"startsAt\":\"15:00"
                + "\",\"endsAt\":\"21:00\",\"offerDinner\":true}, {\"startsAt\":\"15:00\",\"endsAt"
                + "\":\"21:00\",\"offerDinner\":true}]]",
                SendAnyofArrayOfMixedArraysSession[].class);

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofArrayOfMixedArrays(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_anyof_outer_map.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofOuterMap() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        Map<String, SendAnyofOuterMapSession> session = ApiHelper.deserialize(
                "{\"key1\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true},\"key"
                + "2\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}}",
                new TypeReference<Map<String, SendAnyofOuterMapSession>>(){});

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofOuterMap(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_anyof_inner_map.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofInnerMap() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        SendAnyofInnerMapSession session = ApiHelper.deserialize(
                "{\"key1\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true},\"key"
                + "2\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}}", SendAnyofInnerMapSession.class);

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofInnerMap(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_anyof_map_of_map.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofMapOfMap() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        Map<String, SendAnyofMapOfMapSession> session = ApiHelper.deserialize(
                "{\"key1\":{\"innerKey\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner"
                + "\":true}},\"key2\":{\"innerKey\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\","
                + "\"offerTeaBreak\":true}}}",
                new TypeReference<Map<String, SendAnyofMapOfMapSession>>(){});

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofMapOfMap(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_anyof_inner_mixed_map.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofInnerMixedMap() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        SendAnyofInnerMixedMapSession session = ApiHelper.deserialize(
                "{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}", SendAnyofInnerMixedMapSession.class);

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofInnerMixedMap(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_anyof_map_of_inner_mixed_map.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofMapOfInnerMixedMap() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        Map<String, SendAnyofMapOfInnerMixedMapSession> session = ApiHelper.deserialize(
                "{\"key1\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true},\"k"
                + "ey2\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true},\"key"
                + "3\":{\"innerKey1\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":"
                + "true},\"innerKey2\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner"
                + "\":true}}}",
                new TypeReference<Map<String, SendAnyofMapOfInnerMixedMapSession>>(){});

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofMapOfInnerMixedMap(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_anyof_outer_arrayOfMap_flag.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofOuterArrayOfMapFlag() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        List<Map<String, SendAnyofOuterArrayOfMapFlagSession>> session = ApiHelper.deserialize(
                "[{\"key1\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}},{"
                + "\"key1\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}}]",
                new TypeReference<List<Map<String, SendAnyofOuterArrayOfMapFlagSession>>>(){});

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofOuterArrayOfMapFlag(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_anyof_inner_arrayOfMap_flag.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofInnerArrayOfMapFlag() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        SendAnyofInnerArrayOfMapFlagSession session = ApiHelper.deserialize(
                "[{\"innerKey\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}}"
                + ",{\"innerKey\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true"
                + "}}]", SendAnyofInnerArrayOfMapFlagSession.class);

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofInnerArrayOfMapFlag(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_anyof_arrayOfMap_flag_of_arrayOfMap_flag.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofArrayOfMapFlagOfArrayOfMapFlag() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        List<Map<String, SendAnyofArrayOfMapFlagOfArrayOfMapFlagSession>> session = ApiHelper.deserialize(
                "[{\"key\":[{\"innerKey\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinne"
                + "r\":true}},{\"innerKey\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDin"
                + "ner\":true}}]},{\"key\":[{\"innerKey\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:0"
                + "0\",\"offerTeaBreak\":true}},{\"innerKey\":{\"startsAt\":\"08:00\",\"endsAt\":"
                + "\"14:00\",\"offerTeaBreak\":true}}]}]",
                new TypeReference<List<Map<String, SendAnyofArrayOfMapFlagOfArrayOfMapFlagSession>>>(){});

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofArrayOfMapFlagOfArrayOfMapFlag(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_anyof_inner_mixed_arrayOfMap_flag.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofInnerMixedArrayOfMapFlag() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        SendAnyofInnerMixedArrayOfMapFlagSession session = ApiHelper.deserialize(
                "{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}", SendAnyofInnerMixedArrayOfMapFlagSession.class);

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofInnerMixedArrayOfMapFlag(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_anyof_arrayOfMap_flag_of_mixed_arrayOfMap_flag.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofArrayOfMapFlagOfMixedArrayOfMapFlag() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        List<Map<String, SendAnyofArrayOfMapFlagOfMixedArrayOfMapFlagSession>> session = ApiHelper.deserialize(
                "[{\"key\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}},{\"k"
                + "ey\":[{\"innerKey\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak"
                + "\":true}},{\"innerKey\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaB"
                + "reak\":true}}]}]",
                new TypeReference<List<Map<String, SendAnyofArrayOfMapFlagOfMixedArrayOfMapFlagSession>>>(){});

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofArrayOfMapFlagOfMixedArrayOfMapFlag(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_anyof_outer_mapOfArray.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofOuterMapOfArray() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        Map<String, List<SendAnyofOuterMapOfArraySession>> session = ApiHelper.deserialize(
                "{\"key1\":[{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true},{"
                + "\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}],\"key2\":[{"
                + "\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true},{\"startsAt\":"
                + "\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}]}",
                new TypeReference<Map<String, List<SendAnyofOuterMapOfArraySession>>>(){});

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofOuterMapOfArray(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_anyof_inner_mapOfArray.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofInnerMapOfArray() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        SendAnyofInnerMapOfArraySession session = ApiHelper.deserialize(
                "{\"key\":[{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true},{\"st"
                + "artsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}]}", SendAnyofInnerMapOfArraySession.class);

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofInnerMapOfArray(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_anyof_mapOfArray_of_mapOfArray.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofMapOfArrayOfMapOfArray() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        Map<String, List<SendAnyofMapOfArrayOfMapOfArraySession>> session = ApiHelper.deserialize(
                "{\"outerKey\": [{\"key\":[{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaB"
                + "reak\":true},{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true"
                + "}]}, {\"key\":[{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true"
                + "},{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}]}]}",
                new TypeReference<Map<String, List<SendAnyofMapOfArrayOfMapOfArraySession>>>(){});

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofMapOfArrayOfMapOfArray(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_anyof_inner_mixed_mapOfArray.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofInnerMixedMapOfArray() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        SendAnyofInnerMixedMapOfArraySession session = ApiHelper.deserialize(
                "{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}", SendAnyofInnerMixedMapOfArraySession.class);

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofInnerMixedMapOfArray(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_anyof_mapOfArray_of_mixed_mapOfArray.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofMapOfArrayOfMixedMapOfArray() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        Map<String, List<SendAnyofMapOfArrayOfMixedMapOfArraySession>> session = ApiHelper.deserialize(
                "{\"outerKey\":[{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true},"
                + "{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}]}",
                new TypeReference<Map<String, List<SendAnyofMapOfArrayOfMixedMapOfArraySession>>>(){});

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofMapOfArrayOfMixedMapOfArray(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_anyof_array_of_maps.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofArrayOfMaps() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        List<SendAnyofArrayOfMapsSession> session = ApiHelper.deserializeArray(
                "[{\"key\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}},{\"k"
                + "ey\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}}]",
                SendAnyofArrayOfMapsSession[].class);

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofArrayOfMaps(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_anyof_array_of_arrayOfMap_flag.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofArrayOfArrayOfMapFlag() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        List<SendAnyofArrayOfArrayOfMapFlagSession> session = ApiHelper.deserializeArray(
                "[[{\"key\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}},{"
                + "\"key\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}}],["
                + "{\"key\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}},{"
                + "\"key\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}}]]",
                SendAnyofArrayOfArrayOfMapFlagSession[].class);

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofArrayOfArrayOfMapFlag(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_anyof_map_of_array.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofMapOfArray() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        Map<String, SendAnyofMapOfArraySession> session = ApiHelper.deserialize(
                "{\"key1\":[{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true},{"
                + "\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}],\"key2\":[{"
                + "\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true},{\"startsAt\":"
                + "\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}]}",
                new TypeReference<Map<String, SendAnyofMapOfArraySession>>(){});

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofMapOfArray(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_anyof_map_of_arrayOfMap_flag.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofMapOfArrayOfMapFlag() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        Map<String, SendAnyofMapOfArrayOfMapFlagSession> session = ApiHelper.deserialize(
                "{\"outerKey1\":[{\"key\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBr"
                + "eak\":true}},{\"key\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBre"
                + "ak\":true}}],\"outerKey2\":[{\"key\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00"
                + "\",\"offerDinner\":true}},{\"key\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\","
                + "\"offerDinner\":true}}]}",
                new TypeReference<Map<String, SendAnyofMapOfArrayOfMapFlagSession>>(){});

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofMapOfArrayOfMapFlag(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_anyof_arrayOfMap_flag_of_array.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofArrayOfMapFlagOfArray() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        List<Map<String, SendAnyofArrayOfMapFlagOfArraySession>> session = ApiHelper.deserialize(
                "[{\"key1\":[{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true},{"
                + "\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}],\"key2\":[{"
                + "\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true},{\"startsAt\":"
                + "\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}]},{\"key1\":[{\"startsAt\":"
                + "\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true},{\"startsAt\":\"15:00\",\"e"
                + "ndsAt\":\"21:00\",\"offerDinner\":true}],\"key2\":[{\"startsAt\":\"08:00\",\"end"
                + "sAt\":\"14:00\",\"offerTeaBreak\":true},{\"startsAt\":\"08:00\",\"endsAt\":\"14:"
                + "00\",\"offerTeaBreak\":true}]}]",
                new TypeReference<List<Map<String, SendAnyofArrayOfMapFlagOfArraySession>>>(){});

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofArrayOfMapFlagOfArray(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_anyof_arrayOfMap_flag_of_map.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofArrayOfMapFlagOfMap() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        List<Map<String, SendAnyofArrayOfMapFlagOfMapSession>> session = ApiHelper.deserialize(
                "[{\"key1\":{\"key\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak"
                + "\":true}},\"key2\":{\"key\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offer"
                + "Dinner\":true}}},{\"key1\":{\"key\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00"
                + "\",\"offerTeaBreak\":true}},\"key2\":{\"key\":{\"startsAt\":\"15:00\",\"endsAt"
                + "\":\"21:00\",\"offerDinner\":true}}}]",
                new TypeReference<List<Map<String, SendAnyofArrayOfMapFlagOfMapSession>>>(){});

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofArrayOfMapFlagOfMap(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_multi_level_anyof.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendMultiLevelAnyof() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        SendMultiLevelAnyofSession session = ApiHelper.deserialize(
                "{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}", SendMultiLevelAnyofSession.class);

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendMultiLevelAnyof(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

}
