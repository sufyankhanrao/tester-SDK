/*
 * AnyOfNonScalarEndpointsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package localhost3000.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.util.List;
import java.util.Map;
import localhost3000.AnyOfNonScalarEndpointsClient;
import localhost3000.exceptions.ApiException;
import localhost3000.models.containers.GetAnyofArrayOfArrayOfMapFlagSession;
import localhost3000.models.containers.GetAnyofArrayOfArraysSession;
import localhost3000.models.containers.GetAnyofArrayOfMapFlagOfArrayOfMapFlagSession;
import localhost3000.models.containers.GetAnyofArrayOfMapFlagOfArraySession;
import localhost3000.models.containers.GetAnyofArrayOfMapFlagOfMapSession;
import localhost3000.models.containers.GetAnyofArrayOfMapFlagOfMixedArrayOfMapFlagSession;
import localhost3000.models.containers.GetAnyofArrayOfMapsSession;
import localhost3000.models.containers.GetAnyofArrayOfMixedArraysSession;
import localhost3000.models.containers.GetAnyofInnerArrayOfMapFlagSession;
import localhost3000.models.containers.GetAnyofInnerArraySession;
import localhost3000.models.containers.GetAnyofInnerMapOfArraySession;
import localhost3000.models.containers.GetAnyofInnerMapSession;
import localhost3000.models.containers.GetAnyofInnerMixedArrayOfMapFlagSession;
import localhost3000.models.containers.GetAnyofInnerMixedArraysSession;
import localhost3000.models.containers.GetAnyofInnerMixedMapOfArraySession;
import localhost3000.models.containers.GetAnyofInnerMixedMapSession;
import localhost3000.models.containers.GetAnyofMapOfArrayOfMapFlagSession;
import localhost3000.models.containers.GetAnyofMapOfArrayOfMapOfArraySession;
import localhost3000.models.containers.GetAnyofMapOfArrayOfMixedMapOfArraySession;
import localhost3000.models.containers.GetAnyofMapOfArraySession;
import localhost3000.models.containers.GetAnyofMapOfInnerMixedMapSession;
import localhost3000.models.containers.GetAnyofMapOfMapSession;
import localhost3000.models.containers.GetAnyofOuterArrayOfMapFlagSession;
import localhost3000.models.containers.GetAnyofOuterArraySession;
import localhost3000.models.containers.GetAnyofOuterMapOfArraySession;
import localhost3000.models.containers.GetAnyofOuterMapSession;
import localhost3000.models.containers.GetAnyofSimpleSession;
import localhost3000.models.containers.GetMultiLevelAnyofSession;
import localhost3000.testing.TestHelper;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class AnyOfNonPrimitiveTypesInResponseBodyControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static AnyOfNonScalarEndpointsClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static AnyOfNonPrimitiveTypesInResponseBodyController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getAnyOfNonPrimitiveTypesInResponseBodyController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * Test case for get_anyof_simple.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofSimple() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        GetAnyofSimpleSession result = null;
        try {
            result = controller.getAnyofSimple(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_anyof_outer_array.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofOuterArray() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        List<GetAnyofOuterArraySession> result = null;
        try {
            result = controller.getAnyofOuterArray(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "[{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}, {\"startsAt"
                + "\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}]",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_anyof_inner_array.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofInnerArray() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        GetAnyofInnerArraySession result = null;
        try {
            result = controller.getAnyofInnerArray(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "[{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}, {\"startsAt"
                + "\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}]",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_anyof_array_of_arrays.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofArrayOfArrays() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        List<GetAnyofArrayOfArraysSession> result = null;
        try {
            result = controller.getAnyofArrayOfArrays(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "[[{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}, {\"startsAt"
                + "\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}], [{\"startsAt\":\"08:00"
                + "\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}, {\"startsAt\":\"08:00\",\"endsA"
                + "t\":\"14:00\",\"offerTeaBreak\":true}]]",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_anyof_inner_mixed_arrays.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofInnerMixedArrays() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        GetAnyofInnerMixedArraysSession result = null;
        try {
            result = controller.getAnyofInnerMixedArrays(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "[{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}, {\"startsAt"
                + "\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}]",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_anyof_array_of_mixed_arrays.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofArrayOfMixedArrays() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        List<GetAnyofArrayOfMixedArraysSession> result = null;
        try {
            result = controller.getAnyofArrayOfMixedArrays(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "[{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}, {\"startsAt"
                + "\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}]",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_anyof_outer_map.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofOuterMap() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        Map<String, GetAnyofOuterMapSession> result = null;
        try {
            result = controller.getAnyofOuterMap(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "{\"key1\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true},\"k"
                + "ey2\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_anyof_inner_map.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofInnerMap() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        GetAnyofInnerMapSession result = null;
        try {
            result = controller.getAnyofInnerMap(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "{\"key1\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true},\"k"
                + "ey2\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_anyof_map_of_map.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofMapOfMap() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        Map<String, GetAnyofMapOfMapSession> result = null;
        try {
            result = controller.getAnyofMapOfMap(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "{\"key1\":{\"innerKey\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBre"
                + "ak\":true}},\"key2\":{\"innerKey\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\","
                + "\"offerDinner\":true}}}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_anyof_inner_mixed_map.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofInnerMixedMap() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        GetAnyofInnerMixedMapSession result = null;
        try {
            result = controller.getAnyofInnerMixedMap(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "{\"key1\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true},\"k"
                + "ey2\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_anyof_map_of_inner_mixed_map.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofMapOfInnerMixedMap() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        Map<String, GetAnyofMapOfInnerMixedMapSession> result = null;
        try {
            result = controller.getAnyofMapOfInnerMixedMap(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "{\"key1\":{\"innerKey1\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinne"
                + "r\":true},\"innerKey2\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinn"
                + "er\":true}},\"key2\":{\"innerKey1\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00"
                + "\",\"offerDinner\":true},\"innerKey2\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:0"
                + "0\",\"offerDinner\":true}},\"key3\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00"
                + "\",\"offerTeaBreak\":true}}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_anyof_outer_arrayOfMap_flag.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofOuterArrayOfMapFlag() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        List<Map<String, GetAnyofOuterArrayOfMapFlagSession>> result = null;
        try {
            result = controller.getAnyofOuterArrayOfMapFlag(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "[{\"key1\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}},{"
                + "\"key1\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}}]",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_anyof_inner_arrayOfMap_flag.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofInnerArrayOfMapFlag() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        GetAnyofInnerArrayOfMapFlagSession result = null;
        try {
            result = controller.getAnyofInnerArrayOfMapFlag(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "[{\"innerKey\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true"
                + "}},{\"innerKey\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":"
                + "true}}]",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_anyof_arrayOfMap_flag_of_arrayOfMap_flag.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofArrayOfMapFlagOfArrayOfMapFlag() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        List<Map<String, GetAnyofArrayOfMapFlagOfArrayOfMapFlagSession>> result = null;
        try {
            result = controller.getAnyofArrayOfMapFlagOfArrayOfMapFlag(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "[{\"key\":[{\"innerKey\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBr"
                + "eak\":true}},{\"innerKey\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerT"
                + "eaBreak\":true}}]},{\"key\":[{\"innerKey\":{\"startsAt\":\"15:00\",\"endsAt\":"
                + "\"21:00\",\"offerDinner\":true}},{\"innerKey\":{\"startsAt\":\"15:00\",\"endsAt"
                + "\":\"21:00\",\"offerDinner\":true}}]}]",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_anyof_inner_mixed_arrayOfMap_flag.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofInnerMixedArrayOfMapFlag() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        GetAnyofInnerMixedArrayOfMapFlagSession result = null;
        try {
            result = controller.getAnyofInnerMixedArrayOfMapFlag(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "[{\"innerKey\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true"
                + "}},{\"innerKey\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":"
                + "true}}]",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_anyof_arrayOfMap_flag_of_mixed_arrayOfMap_flag.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofArrayOfMapFlagOfMixedArrayOfMapFlag() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        List<Map<String, GetAnyofArrayOfMapFlagOfMixedArrayOfMapFlagSession>> result = null;
        try {
            result = controller.getAnyofArrayOfMapFlagOfMixedArrayOfMapFlag(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "[{\"key\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}},{\"k"
                + "ey\":[{\"innerKey\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak"
                + "\":true}},{\"innerKey\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaB"
                + "reak\":true}}]}]",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_anyof_outer_mapOfArray.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofOuterMapOfArray() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        Map<String, List<GetAnyofOuterMapOfArraySession>> result = null;
        try {
            result = controller.getAnyofOuterMapOfArray(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "{\"key1\":[{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true},{"
                + "\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}],\"key2\":[{"
                + "\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true},{\"startsAt"
                + "\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_anyof_inner_mapOfArray.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofInnerMapOfArray() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        GetAnyofInnerMapOfArraySession result = null;
        try {
            result = controller.getAnyofInnerMapOfArray(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "{\"key\":[{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true},{"
                + "\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_anyof_mapOfArray_of_mapOfArray.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofMapOfArrayOfMapOfArray() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        Map<String, List<GetAnyofMapOfArrayOfMapOfArraySession>> result = null;
        try {
            result = controller.getAnyofMapOfArrayOfMapOfArray(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "{\"outerKey\": [{\"key\":[{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaB"
                + "reak\":true},{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true"
                + "}]}, {\"key\":[{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true"
                + "},{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}]}]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_anyof_inner_mixed_mapOfArray.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofInnerMixedMapOfArray() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        GetAnyofInnerMixedMapOfArraySession result = null;
        try {
            result = controller.getAnyofInnerMixedMapOfArray(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "{\"key1\":[{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true},{"
                + "\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}], \"key2\":["
                + "{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true},{\"startsAt"
                + "\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_anyof_mapOfArray_of_mixed_mapOfArray.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofMapOfArrayOfMixedMapOfArray() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        Map<String, List<GetAnyofMapOfArrayOfMixedMapOfArraySession>> result = null;
        try {
            result = controller.getAnyofMapOfArrayOfMixedMapOfArray(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "{\"outerKey\": [{\"key\":[{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaB"
                + "reak\":true},{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true"
                + "}]}, {\"key\":[{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":tr"
                + "ue},{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}]}]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_anyof_array_of_maps.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofArrayOfMaps() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        List<GetAnyofArrayOfMapsSession> result = null;
        try {
            result = controller.getAnyofArrayOfMaps(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "[{\"key\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}},{"
                + "\"key\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}}]",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_anyof_array_of_arrayOfMap_flag.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofArrayOfArrayOfMapFlag() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        List<GetAnyofArrayOfArrayOfMapFlagSession> result = null;
        try {
            result = controller.getAnyofArrayOfArrayOfMapFlag(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "[[{\"key\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}},{"
                + "\"key\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}}],["
                + "{\"key\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}},{"
                + "\"key\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}}]]",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_anyof_map_of_array.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofMapOfArray() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        Map<String, GetAnyofMapOfArraySession> result = null;
        try {
            result = controller.getAnyofMapOfArray(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "{\"key1\":[{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true},{"
                + "\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}],\"key2\":[{"
                + "\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true},{\"startsAt\":"
                + "\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_anyof_map_of_arrayOfMap_flag.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofMapOfArrayOfMapFlag() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        Map<String, GetAnyofMapOfArrayOfMapFlagSession> result = null;
        try {
            result = controller.getAnyofMapOfArrayOfMapFlag(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "{\"outerKey1\":[{\"key\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBr"
                + "eak\":true}},{\"key\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBre"
                + "ak\":true}}],\"outerKey2\":[{\"key\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00"
                + "\",\"offerDinner\":true}},{\"key\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\","
                + "\"offerDinner\":true}}]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_anyof_arrayOfMap_flag_of_array.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofArrayOfMapFlagOfArray() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        List<Map<String, GetAnyofArrayOfMapFlagOfArraySession>> result = null;
        try {
            result = controller.getAnyofArrayOfMapFlagOfArray(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "[{\"key1\":[{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true},{"
                + "\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}],\"key2\":[{"
                + "\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true},{\"startsAt\":"
                + "\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}]},{\"key1\":[{\"startsAt\":"
                + "\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true},{\"startsAt\":\"15:00\",\"e"
                + "ndsAt\":\"21:00\",\"offerDinner\":true}],\"key2\":[{\"startsAt\":\"08:00\",\"end"
                + "sAt\":\"14:00\",\"offerTeaBreak\":true},{\"startsAt\":\"08:00\",\"endsAt\":\"14:"
                + "00\",\"offerTeaBreak\":true}]}]",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_anyof_arrayOfMap_flag_of_map.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofArrayOfMapFlagOfMap() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        List<Map<String, GetAnyofArrayOfMapFlagOfMapSession>> result = null;
        try {
            result = controller.getAnyofArrayOfMapFlagOfMap(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "[{\"key1\":{\"key\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak"
                + "\":true}},\"key2\":{\"key\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offer"
                + "Dinner\":true}}},{\"key1\":{\"key\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00"
                + "\",\"offerTeaBreak\":true}},\"key2\":{\"key\":{\"startsAt\":\"15:00\",\"endsAt"
                + "\":\"21:00\",\"offerDinner\":true}}}]",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_multi_level_anyof.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetMultiLevelAnyof() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        GetMultiLevelAnyofSession result = null;
        try {
            result = controller.getMultiLevelAnyof(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "[{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}, {\"startsAt"
                + "\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}]",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

}
