/*
 * AnyOfScalarModelsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package localhost3000.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import localhost3000.AnyOfScalarModelsClient;
import localhost3000.ApiHelper;
import localhost3000.exceptions.ApiException;
import localhost3000.models.ArrayOfArrayOfMapFlagCase;
import localhost3000.models.ArrayOfArraysCase;
import localhost3000.models.ArrayOfMapFlagOfArrayCase;
import localhost3000.models.ArrayOfMapFlagOfInnerArrayOfMapFlagCase;
import localhost3000.models.ArrayOfMapFlagOfInnerMixedArrayOfMapFlagCase;
import localhost3000.models.ArrayOfMapFlagOfMapCase;
import localhost3000.models.ArrayOfMapsCase;
import localhost3000.models.ArrayOfMixedArrayCase;
import localhost3000.models.InnerArrayCase;
import localhost3000.models.InnerArrayOfMapFlagCase;
import localhost3000.models.InnerMapCase;
import localhost3000.models.InnerMapOfArrayCase;
import localhost3000.models.InnerMixedArrayCase;
import localhost3000.models.InnerMixedMapCase;
import localhost3000.models.MapOfArrayOfInnerMapOfArrayCase;
import localhost3000.models.MapOfArrayOfInnerMixedMapOfArrayCase;
import localhost3000.models.MapOfArrayOfMapFlagCase;
import localhost3000.models.MapOfArraysCase;
import localhost3000.models.MapOfMapsCase;
import localhost3000.models.MapOfMixedMapCase;
import localhost3000.models.MixedArrayOfMapFlagCase;
import localhost3000.models.MixedMapOfArrayCase;
import localhost3000.models.MultiLevelAnyOf;
import localhost3000.models.OuterArrayCase;
import localhost3000.models.OuterArrayOfMapFlagCase;
import localhost3000.models.OuterMapCase;
import localhost3000.models.OuterMapOfArrayCase;
import localhost3000.models.SendAnyofArrayOfArrayOfMapFlagInput;
import localhost3000.models.SendAnyofArrayOfArraysInput;
import localhost3000.models.SendAnyofArrayOfMapFlagOfArrayInput;
import localhost3000.models.SendAnyofArrayOfMapFlagOfArrayOfMapFlagInput;
import localhost3000.models.SendAnyofArrayOfMapFlagOfMapInput;
import localhost3000.models.SendAnyofArrayOfMapFlagOfMixedArrayOfMapFlagInput;
import localhost3000.models.SendAnyofArrayOfMapsInput;
import localhost3000.models.SendAnyofArrayOfMixedArraysInput;
import localhost3000.models.SendAnyofInnerArrayInput;
import localhost3000.models.SendAnyofInnerArrayOfMapFlagInput;
import localhost3000.models.SendAnyofInnerMapInput;
import localhost3000.models.SendAnyofInnerMapOfArrayInput;
import localhost3000.models.SendAnyofInnerMixedArrayOfMapFlagInput;
import localhost3000.models.SendAnyofInnerMixedArraysInput;
import localhost3000.models.SendAnyofInnerMixedMapInput;
import localhost3000.models.SendAnyofInnerMixedMapOfArrayInput;
import localhost3000.models.SendAnyofMapOfArrayInput;
import localhost3000.models.SendAnyofMapOfArrayOfMapFlagInput;
import localhost3000.models.SendAnyofMapOfArrayOfMapOfArrayInput;
import localhost3000.models.SendAnyofMapOfArrayOfMixedMapOfArrayInput;
import localhost3000.models.SendAnyofMapOfInnerMixedMapInput;
import localhost3000.models.SendAnyofMapOfMapInput;
import localhost3000.models.SendAnyofOuterArrayInput;
import localhost3000.models.SendAnyofOuterArrayOfMapFlagInput;
import localhost3000.models.SendAnyofOuterMapInput;
import localhost3000.models.SendAnyofOuterMapOfArrayInput;
import localhost3000.models.SendAnyofSimpleInput;
import localhost3000.models.SendMultiLevelAnyofInput;
import localhost3000.models.ServerResponse;
import localhost3000.models.SimpleCase;
import localhost3000.testing.TestHelper;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class AnyOfPrimitiveTypesInRequestBodyControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static AnyOfScalarModelsClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static AnyOfPrimitiveTypesInRequestBodyController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getAnyOfPrimitiveTypesInRequestBodyController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * Test case for send_anyof_simple.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofSimple() throws Exception {
        // Parameters for the API call
        SendAnyofSimpleInput input = new SendAnyofSimpleInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);
        input.setSimpleCase(ApiHelper.deserialize(
                "{\"value\": true}",
                SimpleCase.class));

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofSimple(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_anyof_outer_array.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofOuterArray() throws Exception {
        // Parameters for the API call
        SendAnyofOuterArrayInput input = new SendAnyofOuterArrayInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);
        input.setOuterArrayCase(ApiHelper.deserialize(
                "{\"value\": [true, 20.5454]}",
                OuterArrayCase.class));

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofOuterArray(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_anyof_inner_array.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofInnerArray() throws Exception {
        // Parameters for the API call
        SendAnyofInnerArrayInput input = new SendAnyofInnerArrayInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);
        input.setInnerArrayCase(ApiHelper.deserialize(
                "{\"value\": [true, true]}",
                InnerArrayCase.class));

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofInnerArray(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_anyof_array_of_arrays.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofArrayOfArrays() throws Exception {
        // Parameters for the API call
        SendAnyofArrayOfArraysInput input = new SendAnyofArrayOfArraysInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);
        input.setArrayOfArraysCase(ApiHelper.deserialize(
                "{\"value\":[[20.5454, 20.5454], [true, true]]}",
                ArrayOfArraysCase.class));

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofArrayOfArrays(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_anyof_inner_mixed_arrays.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofInnerMixedArrays() throws Exception {
        // Parameters for the API call
        SendAnyofInnerMixedArraysInput input = new SendAnyofInnerMixedArraysInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);
        input.setInnerMixedArrayCase(ApiHelper.deserialize(
                "{\"value\":true}",
                InnerMixedArrayCase.class));

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofInnerMixedArrays(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_anyof_array_of_mixed_arrays.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofArrayOfMixedArrays() throws Exception {
        // Parameters for the API call
        SendAnyofArrayOfMixedArraysInput input = new SendAnyofArrayOfMixedArraysInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);
        input.setArrayOfMixedArrayCase(ApiHelper.deserialize(
                "{\"value\": [[true, true],[true, true]]}",
                ArrayOfMixedArrayCase.class));

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofArrayOfMixedArrays(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_anyof_outer_map.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofOuterMap() throws Exception {
        // Parameters for the API call
        SendAnyofOuterMapInput input = new SendAnyofOuterMapInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);
        input.setOuterMapCase(ApiHelper.deserialize(
                "{\"value\":{\"key1\":true,\"key2\":20.5454}}",
                OuterMapCase.class));

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofOuterMap(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_anyof_inner_map.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofInnerMap() throws Exception {
        // Parameters for the API call
        SendAnyofInnerMapInput input = new SendAnyofInnerMapInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);
        input.setInnerMapCase(ApiHelper.deserialize(
                "{\"value\":{\"key1\":true,\"key2\":true}}",
                InnerMapCase.class));

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofInnerMap(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_anyof_map_of_map.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofMapOfMap() throws Exception {
        // Parameters for the API call
        SendAnyofMapOfMapInput input = new SendAnyofMapOfMapInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);
        input.setMapOfMapsCase(ApiHelper.deserialize(
                "{\"value\":{\"key1\":{\"innerKey\":true},\"key2\":{\"innerKey\":20.5454}}}",
                MapOfMapsCase.class));

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofMapOfMap(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_anyof_inner_mixed_map.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofInnerMixedMap() throws Exception {
        // Parameters for the API call
        SendAnyofInnerMixedMapInput input = new SendAnyofInnerMixedMapInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);
        input.setInnerMixedMapCase(ApiHelper.deserialize(
                "{\"value\":true}",
                InnerMixedMapCase.class));

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofInnerMixedMap(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_anyof_map_of_inner_mixed_map.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofMapOfInnerMixedMap() throws Exception {
        // Parameters for the API call
        SendAnyofMapOfInnerMixedMapInput input = new SendAnyofMapOfInnerMixedMapInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);
        input.setMapOfMixedMapCase(ApiHelper.deserialize(
                "{\"value\":{\"key1\":20.5454,\"key2\":20.5454,\"key3\":{\"innerKey1\":true,\"inner"
                + "Key2\":false}}}",
                MapOfMixedMapCase.class));

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofMapOfInnerMixedMap(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_anyof_outer_arrayOfMap_flag.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofOuterArrayOfMapFlag() throws Exception {
        // Parameters for the API call
        SendAnyofOuterArrayOfMapFlagInput input = new SendAnyofOuterArrayOfMapFlagInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);
        input.setOuterArrayOfMapFlagCase(ApiHelper.deserialize(
                "{\"value\":[{\"key1\":true},{\"key1\":20.5454}]}",
                OuterArrayOfMapFlagCase.class));

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofOuterArrayOfMapFlag(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_anyof_inner_arrayOfMap_flag.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofInnerArrayOfMapFlag() throws Exception {
        // Parameters for the API call
        SendAnyofInnerArrayOfMapFlagInput input = new SendAnyofInnerArrayOfMapFlagInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);
        input.setInnerArrayOfMapFlagCase(ApiHelper.deserialize(
                "{\"value\":[{\"innerKey\":true},{\"innerKey\":true}]}",
                InnerArrayOfMapFlagCase.class));

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofInnerArrayOfMapFlag(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_anyof_arrayOfMap_flag_of_arrayOfMap_flag.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofArrayOfMapFlagOfArrayOfMapFlag() throws Exception {
        // Parameters for the API call
        SendAnyofArrayOfMapFlagOfArrayOfMapFlagInput input = new
                SendAnyofArrayOfMapFlagOfArrayOfMapFlagInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);
        input.setArrayOfMapFlagOfInnerArrayOfMapFlagCase(ApiHelper.deserialize(
                "{\"value\":[{\"key\":[{\"innerKey\":true},{\"innerKey\":true}]},{\"key\":[{\"inner"
                + "Key\":20.5454},{\"innerKey\":20.5454}]}]}",
                ArrayOfMapFlagOfInnerArrayOfMapFlagCase.class));

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofArrayOfMapFlagOfArrayOfMapFlag(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_anyof_inner_mixed_arrayOfMap_flag.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofInnerMixedArrayOfMapFlag() throws Exception {
        // Parameters for the API call
        SendAnyofInnerMixedArrayOfMapFlagInput input = new
                SendAnyofInnerMixedArrayOfMapFlagInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);
        input.setMixedArrayOfMapFlagCase(ApiHelper.deserialize(
                "{\"value\":true}",
                MixedArrayOfMapFlagCase.class));

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofInnerMixedArrayOfMapFlag(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_anyof_arrayOfMap_flag_of_mixed_arrayOfMap_flag.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofArrayOfMapFlagOfMixedArrayOfMapFlag() throws Exception {
        // Parameters for the API call
        SendAnyofArrayOfMapFlagOfMixedArrayOfMapFlagInput input = new
                SendAnyofArrayOfMapFlagOfMixedArrayOfMapFlagInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);
        input.setArrayOfMapFlagOfInnerMixedArrayOfMapFlagCase(ApiHelper.deserialize(
                "{\"value\":[{\"key\":true},{\"key\":[{\"innerKey\":20.5454},{\"innerKey\":20.5454}"
                + "]}]}",
                ArrayOfMapFlagOfInnerMixedArrayOfMapFlagCase.class));

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofArrayOfMapFlagOfMixedArrayOfMapFlag(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_anyof_outer_mapOfArray.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofOuterMapOfArray() throws Exception {
        // Parameters for the API call
        SendAnyofOuterMapOfArrayInput input = new SendAnyofOuterMapOfArrayInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);
        input.setOuterMapOfArrayCase(ApiHelper.deserialize(
                "{\"value\":{\"key1\":[20.5454,true],\"key2\":[true,20.5454]}}",
                OuterMapOfArrayCase.class));

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofOuterMapOfArray(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_anyof_inner_mapOfArray.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofInnerMapOfArray() throws Exception {
        // Parameters for the API call
        SendAnyofInnerMapOfArrayInput input = new SendAnyofInnerMapOfArrayInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);
        input.setInnerMapOfArrayCase(ApiHelper.deserialize(
                "{\"value\":{\"key\":[true,true]}}",
                InnerMapOfArrayCase.class));

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofInnerMapOfArray(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_anyof_mapOfArray_of_mapOfArray.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofMapOfArrayOfMapOfArray() throws Exception {
        // Parameters for the API call
        SendAnyofMapOfArrayOfMapOfArrayInput input = new SendAnyofMapOfArrayOfMapOfArrayInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);
        input.setMapOfArrayOfInnerMapOfArrayCase(ApiHelper.deserialize(
                "{\"value\":{\"outerKey\": [{\"key\":[20.5454,20.5454]}, {\"key\":[true,true]}]}}",
                MapOfArrayOfInnerMapOfArrayCase.class));

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofMapOfArrayOfMapOfArray(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_anyof_inner_mixed_mapOfArray.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofInnerMixedMapOfArray() throws Exception {
        // Parameters for the API call
        SendAnyofInnerMixedMapOfArrayInput input = new SendAnyofInnerMixedMapOfArrayInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);
        input.setMixedMapOfArrayCase(ApiHelper.deserialize(
                "{\"value\":true}",
                MixedMapOfArrayCase.class));

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofInnerMixedMapOfArray(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_anyof_mapOfArray_of_mixed_mapOfArray.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofMapOfArrayOfMixedMapOfArray() throws Exception {
        // Parameters for the API call
        SendAnyofMapOfArrayOfMixedMapOfArrayInput input = new
                SendAnyofMapOfArrayOfMixedMapOfArrayInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);
        input.setMapOfArrayOfInnerMixedMapOfArrayCase(ApiHelper.deserialize(
                "{\"value\":{\"outerKey\":[true,true]}}",
                MapOfArrayOfInnerMixedMapOfArrayCase.class));

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofMapOfArrayOfMixedMapOfArray(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_anyof_array_of_maps.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofArrayOfMaps() throws Exception {
        // Parameters for the API call
        SendAnyofArrayOfMapsInput input = new SendAnyofArrayOfMapsInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);
        input.setArrayOfMapsCase(ApiHelper.deserialize(
                "{\"value\":[{\"key\":true},{\"key\":20.5454}]}",
                ArrayOfMapsCase.class));

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofArrayOfMaps(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_anyof_array_of_arrayOfMap_flag.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofArrayOfArrayOfMapFlag() throws Exception {
        // Parameters for the API call
        SendAnyofArrayOfArrayOfMapFlagInput input = new SendAnyofArrayOfArrayOfMapFlagInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);
        input.setArrayOfArrayOfMapFlagCase(ApiHelper.deserialize(
                "{\"value\":[[{\"key\":20.5454},{\"key\":20.5454}],[{\"key\":true},{\"key\":true}]]"
                + "}",
                ArrayOfArrayOfMapFlagCase.class));

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofArrayOfArrayOfMapFlag(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_anyof_map_of_array.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofMapOfArray() throws Exception {
        // Parameters for the API call
        SendAnyofMapOfArrayInput input = new SendAnyofMapOfArrayInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);
        input.setMapOfArraysCase(ApiHelper.deserialize(
                "{\"value\":{\"key1\":[20.5454,20.5454],\"key2\":[true,true]}}",
                MapOfArraysCase.class));

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofMapOfArray(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_anyof_map_of_arrayOfMap_flag.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofMapOfArrayOfMapFlag() throws Exception {
        // Parameters for the API call
        SendAnyofMapOfArrayOfMapFlagInput input = new SendAnyofMapOfArrayOfMapFlagInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);
        input.setMapOfArrayOfMapFlagCase(ApiHelper.deserialize(
                "{\"value\":{\"outerKey1\":[{\"key\":20.5454},{\"key\":20.5454}],\"outerKey2\":[{"
                + "\"key\":true},{\"key\":true}]}}",
                MapOfArrayOfMapFlagCase.class));

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofMapOfArrayOfMapFlag(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_anyof_arrayOfMap_flag_of_array.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofArrayOfMapFlagOfArray() throws Exception {
        // Parameters for the API call
        SendAnyofArrayOfMapFlagOfArrayInput input = new SendAnyofArrayOfMapFlagOfArrayInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);
        input.setArrayOfMapFlagOfArrayCase(ApiHelper.deserialize(
                "{\"value\":[{\"key1\":[20.5454,20.5454],\"key2\":[true,true]},{\"key1\":[false,fal"
                + "se],\"key2\":[20.5454,20.5454]}]}",
                ArrayOfMapFlagOfArrayCase.class));

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofArrayOfMapFlagOfArray(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_anyof_arrayOfMap_flag_of_map.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendAnyofArrayOfMapFlagOfMap() throws Exception {
        // Parameters for the API call
        SendAnyofArrayOfMapFlagOfMapInput input = new SendAnyofArrayOfMapFlagOfMapInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);
        input.setArrayOfMapFlagOfMapCase(ApiHelper.deserialize(
                "{\"value\":[{\"key1\":{\"key\":20.5454},\"key2\":{\"key\":true}},{\"key1\":{\"key"
                + "\":20.5454},\"key2\":{\"key\":true}}]}",
                ArrayOfMapFlagOfMapCase.class));

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendAnyofArrayOfMapFlagOfMap(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_multi_level_anyof.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendMultiLevelAnyof() throws Exception {
        // Parameters for the API call
        SendMultiLevelAnyofInput input = new SendMultiLevelAnyofInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);
        input.setMultiLevelAnyOf(ApiHelper.deserialize(
                "{\"value\":20.5454}",
                MultiLevelAnyOf.class));

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendMultiLevelAnyof(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

}
