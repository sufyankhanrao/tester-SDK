/*
 * AnyOfScalarModelsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package localhost3000.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import localhost3000.AnyOfScalarModelsClient;
import localhost3000.exceptions.ApiException;
import localhost3000.models.ArrayOfArrayOfMapFlagCase;
import localhost3000.models.ArrayOfArraysCase;
import localhost3000.models.ArrayOfMapFlagOfArrayCase;
import localhost3000.models.ArrayOfMapFlagOfInnerArrayOfMapFlagCase;
import localhost3000.models.ArrayOfMapFlagOfInnerMixedArrayOfMapFlagCase;
import localhost3000.models.ArrayOfMapFlagOfMapCase;
import localhost3000.models.ArrayOfMapsCase;
import localhost3000.models.ArrayOfMixedArrayCase;
import localhost3000.models.GetAnyofArrayOfArrayOfMapFlagInput;
import localhost3000.models.GetAnyofArrayOfArraysInput;
import localhost3000.models.GetAnyofArrayOfMapFlagOfArrayInput;
import localhost3000.models.GetAnyofArrayOfMapFlagOfArrayOfMapFlagInput;
import localhost3000.models.GetAnyofArrayOfMapFlagOfMapInput;
import localhost3000.models.GetAnyofArrayOfMapFlagOfMixedArrayOfMapFlagInput;
import localhost3000.models.GetAnyofArrayOfMapsInput;
import localhost3000.models.GetAnyofArrayOfMixedArraysInput;
import localhost3000.models.GetAnyofInnerArrayInput;
import localhost3000.models.GetAnyofInnerArrayOfMapFlagInput;
import localhost3000.models.GetAnyofInnerMapInput;
import localhost3000.models.GetAnyofInnerMapOfArrayInput;
import localhost3000.models.GetAnyofInnerMixedArrayOfMapFlagInput;
import localhost3000.models.GetAnyofInnerMixedArraysInput;
import localhost3000.models.GetAnyofInnerMixedMapInput;
import localhost3000.models.GetAnyofInnerMixedMapOfArrayInput;
import localhost3000.models.GetAnyofMapOfArrayInput;
import localhost3000.models.GetAnyofMapOfArrayOfMapFlagInput;
import localhost3000.models.GetAnyofMapOfArrayOfMapOfArrayInput;
import localhost3000.models.GetAnyofMapOfArrayOfMixedMapOfArrayInput;
import localhost3000.models.GetAnyofMapOfInnerMixedMapInput;
import localhost3000.models.GetAnyofMapOfMapInput;
import localhost3000.models.GetAnyofOuterArrayInput;
import localhost3000.models.GetAnyofOuterArrayOfMapFlagInput;
import localhost3000.models.GetAnyofOuterMapInput;
import localhost3000.models.GetAnyofOuterMapOfArrayInput;
import localhost3000.models.GetAnyofSimpleInput;
import localhost3000.models.GetMultiLevelAnyofInput;
import localhost3000.models.InnerArrayCase;
import localhost3000.models.InnerArrayOfMapFlagCase;
import localhost3000.models.InnerMapCase;
import localhost3000.models.InnerMapOfArrayCase;
import localhost3000.models.InnerMixedArrayCase;
import localhost3000.models.InnerMixedMapCase;
import localhost3000.models.MapOfArrayOfInnerMapOfArrayCase;
import localhost3000.models.MapOfArrayOfInnerMixedMapOfArrayCase;
import localhost3000.models.MapOfArrayOfMapFlagCase;
import localhost3000.models.MapOfArraysCase;
import localhost3000.models.MapOfMapsCase;
import localhost3000.models.MapOfMixedMapCase;
import localhost3000.models.MixedArrayOfMapFlagCase;
import localhost3000.models.MixedMapOfArrayCase;
import localhost3000.models.MultiLevelAnyOf;
import localhost3000.models.OuterArrayCase;
import localhost3000.models.OuterArrayOfMapFlagCase;
import localhost3000.models.OuterMapCase;
import localhost3000.models.OuterMapOfArrayCase;
import localhost3000.models.SimpleCase;
import localhost3000.testing.TestHelper;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class AnyOfPrimitiveTypesInResponseBodyControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static AnyOfScalarModelsClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static AnyOfPrimitiveTypesInResponseBodyController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getAnyOfPrimitiveTypesInResponseBodyController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * Test case for get_anyof_simple.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofSimple() throws Exception {
        // Parameters for the API call
        GetAnyofSimpleInput input = new GetAnyofSimpleInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);

        // Set callback and perform API call
        SimpleCase result = null;
        try {
            result = controller.getAnyofSimple(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"value\":20.5454}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_anyof_outer_array.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofOuterArray() throws Exception {
        // Parameters for the API call
        GetAnyofOuterArrayInput input = new GetAnyofOuterArrayInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);

        // Set callback and perform API call
        OuterArrayCase result = null;
        try {
            result = controller.getAnyofOuterArray(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"value\": [20.5454,true]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_anyof_inner_array.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofInnerArray() throws Exception {
        // Parameters for the API call
        GetAnyofInnerArrayInput input = new GetAnyofInnerArrayInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);

        // Set callback and perform API call
        InnerArrayCase result = null;
        try {
            result = controller.getAnyofInnerArray(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"value\": [20.5454, 20.5454]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_anyof_array_of_arrays.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofArrayOfArrays() throws Exception {
        // Parameters for the API call
        GetAnyofArrayOfArraysInput input = new GetAnyofArrayOfArraysInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);

        // Set callback and perform API call
        ArrayOfArraysCase result = null;
        try {
            result = controller.getAnyofArrayOfArrays(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"value\":[[true, true], [20.5454, 20.5454]]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_anyof_inner_mixed_arrays.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofInnerMixedArrays() throws Exception {
        // Parameters for the API call
        GetAnyofInnerMixedArraysInput input = new GetAnyofInnerMixedArraysInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);

        // Set callback and perform API call
        InnerMixedArrayCase result = null;
        try {
            result = controller.getAnyofInnerMixedArrays(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"value\": [20.5454, 20.5454]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_anyof_array_of_mixed_arrays.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofArrayOfMixedArrays() throws Exception {
        // Parameters for the API call
        GetAnyofArrayOfMixedArraysInput input = new GetAnyofArrayOfMixedArraysInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);

        // Set callback and perform API call
        ArrayOfMixedArrayCase result = null;
        try {
            result = controller.getAnyofArrayOfMixedArrays(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"value\":[20.5454, 20.5454]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_anyof_outer_map.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofOuterMap() throws Exception {
        // Parameters for the API call
        GetAnyofOuterMapInput input = new GetAnyofOuterMapInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);

        // Set callback and perform API call
        OuterMapCase result = null;
        try {
            result = controller.getAnyofOuterMap(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"value\":{\"key1\":20.5454,\"key2\":true}}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_anyof_inner_map.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofInnerMap() throws Exception {
        // Parameters for the API call
        GetAnyofInnerMapInput input = new GetAnyofInnerMapInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);

        // Set callback and perform API call
        InnerMapCase result = null;
        try {
            result = controller.getAnyofInnerMap(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"value\":{\"key1\":20.5454,\"key2\":20.5454}}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_anyof_map_of_map.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofMapOfMap() throws Exception {
        // Parameters for the API call
        GetAnyofMapOfMapInput input = new GetAnyofMapOfMapInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);

        // Set callback and perform API call
        MapOfMapsCase result = null;
        try {
            result = controller.getAnyofMapOfMap(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"value\":{\"key1\":{\"innerKey\":20.5454},\"key2\":{\"innerKey\":false}}}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_anyof_inner_mixed_map.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofInnerMixedMap() throws Exception {
        // Parameters for the API call
        GetAnyofInnerMixedMapInput input = new GetAnyofInnerMixedMapInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);

        // Set callback and perform API call
        InnerMixedMapCase result = null;
        try {
            result = controller.getAnyofInnerMixedMap(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"value\":{\"key1\":20.5454,\"key2\":20.5454}}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_anyof_map_of_inner_mixed_map.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofMapOfInnerMixedMap() throws Exception {
        // Parameters for the API call
        GetAnyofMapOfInnerMixedMapInput input = new GetAnyofMapOfInnerMixedMapInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);

        // Set callback and perform API call
        MapOfMixedMapCase result = null;
        try {
            result = controller.getAnyofMapOfInnerMixedMap(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"value\":{\"key1\":{\"innerKey1\":true,\"innerKey2\":false},\"key2\":{\"innerKey"
                + "1\":true,\"innerKey2\":false},\"key3\":20.5454}}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_anyof_outer_arrayOfMap_flag.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofOuterArrayOfMapFlag() throws Exception {
        // Parameters for the API call
        GetAnyofOuterArrayOfMapFlagInput input = new GetAnyofOuterArrayOfMapFlagInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);

        // Set callback and perform API call
        OuterArrayOfMapFlagCase result = null;
        try {
            result = controller.getAnyofOuterArrayOfMapFlag(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"value\":[{\"key1\":true},{\"key1\":20.5454}]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_anyof_inner_arrayOfMap_flag.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofInnerArrayOfMapFlag() throws Exception {
        // Parameters for the API call
        GetAnyofInnerArrayOfMapFlagInput input = new GetAnyofInnerArrayOfMapFlagInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);

        // Set callback and perform API call
        InnerArrayOfMapFlagCase result = null;
        try {
            result = controller.getAnyofInnerArrayOfMapFlag(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"value\":[{\"innerKey\":20.5454},{\"innerKey\":20.5454}]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_anyof_arrayOfMap_flag_of_arrayOfMap_flag.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofArrayOfMapFlagOfArrayOfMapFlag() throws Exception {
        // Parameters for the API call
        GetAnyofArrayOfMapFlagOfArrayOfMapFlagInput input = new
                GetAnyofArrayOfMapFlagOfArrayOfMapFlagInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);

        // Set callback and perform API call
        ArrayOfMapFlagOfInnerArrayOfMapFlagCase result = null;
        try {
            result = controller.getAnyofArrayOfMapFlagOfArrayOfMapFlag(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"value\":[{\"key\":[{\"innerKey\":20.5454},{\"innerKey\":20.5454}]},{\"key\":[{"
                + "\"innerKey\":true},{\"innerKey\":true}]}]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_anyof_inner_mixed_arrayOfMap_flag.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofInnerMixedArrayOfMapFlag() throws Exception {
        // Parameters for the API call
        GetAnyofInnerMixedArrayOfMapFlagInput input = new GetAnyofInnerMixedArrayOfMapFlagInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);

        // Set callback and perform API call
        MixedArrayOfMapFlagCase result = null;
        try {
            result = controller.getAnyofInnerMixedArrayOfMapFlag(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"value\":[{\"innerKey\":20.5454},{\"innerKey\":20.5454}]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_anyof_arrayOfMap_flag_of_mixed_arrayOfMap_flag.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofArrayOfMapFlagOfMixedArrayOfMapFlag() throws Exception {
        // Parameters for the API call
        GetAnyofArrayOfMapFlagOfMixedArrayOfMapFlagInput input = new
                GetAnyofArrayOfMapFlagOfMixedArrayOfMapFlagInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);

        // Set callback and perform API call
        ArrayOfMapFlagOfInnerMixedArrayOfMapFlagCase result = null;
        try {
            result = controller.getAnyofArrayOfMapFlagOfMixedArrayOfMapFlag(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"value\":[{\"key\":true},{\"key\":[{\"innerKey\":20.5454},{\"innerKey\":20.5454}"
                + "]}]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_anyof_outer_mapOfArray.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofOuterMapOfArray() throws Exception {
        // Parameters for the API call
        GetAnyofOuterMapOfArrayInput input = new GetAnyofOuterMapOfArrayInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);

        // Set callback and perform API call
        OuterMapOfArrayCase result = null;
        try {
            result = controller.getAnyofOuterMapOfArray(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"value\":{\"key1\":[20.5454,true],\"key2\":[20.5454,true]}}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_anyof_inner_mapOfArray.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofInnerMapOfArray() throws Exception {
        // Parameters for the API call
        GetAnyofInnerMapOfArrayInput input = new GetAnyofInnerMapOfArrayInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);

        // Set callback and perform API call
        InnerMapOfArrayCase result = null;
        try {
            result = controller.getAnyofInnerMapOfArray(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"value\":{\"key\":[20.5454,20.5454]}}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_anyof_mapOfArray_of_mapOfArray.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofMapOfArrayOfMapOfArray() throws Exception {
        // Parameters for the API call
        GetAnyofMapOfArrayOfMapOfArrayInput input = new GetAnyofMapOfArrayOfMapOfArrayInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);

        // Set callback and perform API call
        MapOfArrayOfInnerMapOfArrayCase result = null;
        try {
            result = controller.getAnyofMapOfArrayOfMapOfArray(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"value\":{\"outerKey\": [{\"key\":[20.5454,20.5454]}, {\"key\":[true,true]}]}}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_anyof_inner_mixed_mapOfArray.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofInnerMixedMapOfArray() throws Exception {
        // Parameters for the API call
        GetAnyofInnerMixedMapOfArrayInput input = new GetAnyofInnerMixedMapOfArrayInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);

        // Set callback and perform API call
        MixedMapOfArrayCase result = null;
        try {
            result = controller.getAnyofInnerMixedMapOfArray(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"value\":{\"key1\":[20.5454,20.5454], \"key2\":[20.5454,20.5454]}}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_anyof_mapOfArray_of_mixed_mapOfArray.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofMapOfArrayOfMixedMapOfArray() throws Exception {
        // Parameters for the API call
        GetAnyofMapOfArrayOfMixedMapOfArrayInput input = new
                GetAnyofMapOfArrayOfMixedMapOfArrayInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);

        // Set callback and perform API call
        MapOfArrayOfInnerMixedMapOfArrayCase result = null;
        try {
            result = controller.getAnyofMapOfArrayOfMixedMapOfArray(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"value\":{\"outerKey\": [{\"key\":[20.5454,20.5454]}, {\"key\":[20.5454,20.5454]"
                + "}]}}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_anyof_array_of_maps.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofArrayOfMaps() throws Exception {
        // Parameters for the API call
        GetAnyofArrayOfMapsInput input = new GetAnyofArrayOfMapsInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);

        // Set callback and perform API call
        ArrayOfMapsCase result = null;
        try {
            result = controller.getAnyofArrayOfMaps(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"value\":[{\"key\":20.5454},{\"key\":true}]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_anyof_array_of_arrayOfMap_flag.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofArrayOfArrayOfMapFlag() throws Exception {
        // Parameters for the API call
        GetAnyofArrayOfArrayOfMapFlagInput input = new GetAnyofArrayOfArrayOfMapFlagInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);

        // Set callback and perform API call
        ArrayOfArrayOfMapFlagCase result = null;
        try {
            result = controller.getAnyofArrayOfArrayOfMapFlag(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"value\":[[{\"key\":20.5454},{\"key\":20.5454}],[{\"key\":true},{\"key\":true}]]"
                + "}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_anyof_map_of_array.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofMapOfArray() throws Exception {
        // Parameters for the API call
        GetAnyofMapOfArrayInput input = new GetAnyofMapOfArrayInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);

        // Set callback and perform API call
        MapOfArraysCase result = null;
        try {
            result = controller.getAnyofMapOfArray(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"value\":{\"key1\":[20.5454,20.5454],\"key2\":[true,true]}}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_anyof_map_of_arrayOfMap_flag.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofMapOfArrayOfMapFlag() throws Exception {
        // Parameters for the API call
        GetAnyofMapOfArrayOfMapFlagInput input = new GetAnyofMapOfArrayOfMapFlagInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);

        // Set callback and perform API call
        MapOfArrayOfMapFlagCase result = null;
        try {
            result = controller.getAnyofMapOfArrayOfMapFlag(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"value\":{\"outerKey1\":[{\"key\":20.5454},{\"key\":20.5454}],\"outerKey2\":[{"
                + "\"key\":true},{\"key\":true}]}}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_anyof_arrayOfMap_flag_of_array.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofArrayOfMapFlagOfArray() throws Exception {
        // Parameters for the API call
        GetAnyofArrayOfMapFlagOfArrayInput input = new GetAnyofArrayOfMapFlagOfArrayInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);

        // Set callback and perform API call
        ArrayOfMapFlagOfArrayCase result = null;
        try {
            result = controller.getAnyofArrayOfMapFlagOfArray(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"value\":[{\"key1\":[20.5454,20.5454],\"key2\":[true,true]},{\"key1\":[false,fal"
                + "se],\"key2\":[20.5454,20.5454]}]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_anyof_arrayOfMap_flag_of_map.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetAnyofArrayOfMapFlagOfMap() throws Exception {
        // Parameters for the API call
        GetAnyofArrayOfMapFlagOfMapInput input = new GetAnyofArrayOfMapFlagOfMapInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);

        // Set callback and perform API call
        ArrayOfMapFlagOfMapCase result = null;
        try {
            result = controller.getAnyofArrayOfMapFlagOfMap(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"value\":[{\"key1\":{\"key\":20.5454},\"key2\":{\"key\":true}},{\"key1\":{\"key"
                + "\":20.5454},\"key2\":{\"key\":true}}]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_multi_level_anyof.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetMultiLevelAnyof() throws Exception {
        // Parameters for the API call
        GetMultiLevelAnyofInput input = new GetMultiLevelAnyofInput();
        input.setIsPrimitiveType(true);
        input.setIsAtEndpointLevel(false);
        input.setHasDiscriminator(false);

        // Set callback and perform API call
        MultiLevelAnyOf result = null;
        try {
            result = controller.getMultiLevelAnyof(input);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"value\":[true, true]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

}
