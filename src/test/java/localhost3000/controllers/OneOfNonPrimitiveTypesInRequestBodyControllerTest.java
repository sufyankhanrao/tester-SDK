/*
 * OneOfNonScalarEndpointsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package localhost3000.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import com.fasterxml.jackson.core.type.TypeReference;
import java.util.List;
import java.util.Map;
import localhost3000.ApiHelper;
import localhost3000.OneOfNonScalarEndpointsClient;
import localhost3000.exceptions.ApiException;
import localhost3000.models.ServerResponse;
import localhost3000.models.containers.SendMultiLevelOneofSession;
import localhost3000.models.containers.SendOneofArrayOfArrayOfMapFlagSession;
import localhost3000.models.containers.SendOneofArrayOfArraysSession;
import localhost3000.models.containers.SendOneofArrayOfMapFlagOfArrayOfMapFlagSession;
import localhost3000.models.containers.SendOneofArrayOfMapFlagOfArraySession;
import localhost3000.models.containers.SendOneofArrayOfMapFlagOfMapSession;
import localhost3000.models.containers.SendOneofArrayOfMapFlagOfMixedArrayOfMapFlagSession;
import localhost3000.models.containers.SendOneofArrayOfMapsSession;
import localhost3000.models.containers.SendOneofArrayOfMixedArraysSession;
import localhost3000.models.containers.SendOneofInnerArrayOfMapFlagSession;
import localhost3000.models.containers.SendOneofInnerArraySession;
import localhost3000.models.containers.SendOneofInnerMapOfArraySession;
import localhost3000.models.containers.SendOneofInnerMapSession;
import localhost3000.models.containers.SendOneofInnerMixedArrayOfMapFlagSession;
import localhost3000.models.containers.SendOneofInnerMixedArraysSession;
import localhost3000.models.containers.SendOneofInnerMixedMapOfArraySession;
import localhost3000.models.containers.SendOneofInnerMixedMapSession;
import localhost3000.models.containers.SendOneofMapOfArrayOfMapFlagSession;
import localhost3000.models.containers.SendOneofMapOfArrayOfMapOfArraySession;
import localhost3000.models.containers.SendOneofMapOfArrayOfMixedMapOfArraySession;
import localhost3000.models.containers.SendOneofMapOfArraySession;
import localhost3000.models.containers.SendOneofMapOfInnerMixedMapSession;
import localhost3000.models.containers.SendOneofMapOfMapSession;
import localhost3000.models.containers.SendOneofOuterArrayOfMapFlagSession;
import localhost3000.models.containers.SendOneofOuterArraySession;
import localhost3000.models.containers.SendOneofOuterMapOfArraySession;
import localhost3000.models.containers.SendOneofOuterMapSession;
import localhost3000.models.containers.SendOneofSimpleSession;
import localhost3000.testing.TestHelper;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class OneOfNonPrimitiveTypesInRequestBodyControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static OneOfNonScalarEndpointsClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static OneOfNonPrimitiveTypesInRequestBodyController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getOneOfNonPrimitiveTypesInRequestBodyController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * Test case for send_oneof_simple.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendOneofSimple() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        SendOneofSimpleSession session = ApiHelper.deserialize(
                "{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}", SendOneofSimpleSession.class);

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendOneofSimple(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_oneof_outer_array.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendOneofOuterArray() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        List<SendOneofOuterArraySession> session = ApiHelper.deserializeArray(
                "[{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}, {\"startsAt"
                + "\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}]",
                SendOneofOuterArraySession[].class);

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendOneofOuterArray(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_oneof_inner_array.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendOneofInnerArray() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        SendOneofInnerArraySession session = ApiHelper.deserialize(
                "[{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}, {\"startsAt"
                + "\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}]", SendOneofInnerArraySession.class);

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendOneofInnerArray(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_oneof_array_of_arrays.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendOneofArrayOfArrays() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        List<SendOneofArrayOfArraysSession> session = ApiHelper.deserializeArray(
                "[[{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}, {\"startsA"
                + "t\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}], [{\"startsAt\":\"15"
                + ":00\",\"endsAt\":\"21:00\",\"offerDinner\":true}, {\"startsAt\":\"15:00\",\"ends"
                + "At\":\"21:00\",\"offerDinner\":true}]]",
                SendOneofArrayOfArraysSession[].class);

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendOneofArrayOfArrays(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_oneof_inner_mixed_arrays.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendOneofInnerMixedArrays() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        SendOneofInnerMixedArraysSession session = ApiHelper.deserialize(
                "{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}", SendOneofInnerMixedArraysSession.class);

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendOneofInnerMixedArrays(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_oneof_array_of_mixed_arrays.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendOneofArrayOfMixedArrays() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        List<SendOneofArrayOfMixedArraysSession> session = ApiHelper.deserializeArray(
                "[[{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}, {\"startsAt"
                + "\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}], [{\"startsAt\":\"15:00"
                + "\",\"endsAt\":\"21:00\",\"offerDinner\":true}, {\"startsAt\":\"15:00\",\"endsAt"
                + "\":\"21:00\",\"offerDinner\":true}]]",
                SendOneofArrayOfMixedArraysSession[].class);

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendOneofArrayOfMixedArrays(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_oneof_outer_map.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendOneofOuterMap() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        Map<String, SendOneofOuterMapSession> session = ApiHelper.deserialize(
                "{\"key1\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true},\"key"
                + "2\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}}",
                new TypeReference<Map<String, SendOneofOuterMapSession>>(){});

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendOneofOuterMap(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_oneof_inner_map.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendOneofInnerMap() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        SendOneofInnerMapSession session = ApiHelper.deserialize(
                "{\"key1\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true},\"key"
                + "2\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}}", SendOneofInnerMapSession.class);

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendOneofInnerMap(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_oneof_map_of_map.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendOneofMapOfMap() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        Map<String, SendOneofMapOfMapSession> session = ApiHelper.deserialize(
                "{\"key1\":{\"innerKey\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner"
                + "\":true}},\"key2\":{\"innerKey\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\","
                + "\"offerTeaBreak\":true}}}",
                new TypeReference<Map<String, SendOneofMapOfMapSession>>(){});

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendOneofMapOfMap(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_oneof_inner_mixed_map.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendOneofInnerMixedMap() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        SendOneofInnerMixedMapSession session = ApiHelper.deserialize(
                "{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}", SendOneofInnerMixedMapSession.class);

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendOneofInnerMixedMap(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_oneof_map_of_inner_mixed_map.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendOneofMapOfInnerMixedMap() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        Map<String, SendOneofMapOfInnerMixedMapSession> session = ApiHelper.deserialize(
                "{\"key1\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true},\"k"
                + "ey2\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true},\"key"
                + "3\":{\"innerKey1\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":"
                + "true},\"innerKey2\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner"
                + "\":true}}}",
                new TypeReference<Map<String, SendOneofMapOfInnerMixedMapSession>>(){});

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendOneofMapOfInnerMixedMap(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_oneof_outer_arrayOfMap_flag.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendOneofOuterArrayOfMapFlag() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        List<Map<String, SendOneofOuterArrayOfMapFlagSession>> session = ApiHelper.deserialize(
                "[{\"key1\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}},{"
                + "\"key1\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}}]",
                new TypeReference<List<Map<String, SendOneofOuterArrayOfMapFlagSession>>>(){});

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendOneofOuterArrayOfMapFlag(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_oneof_inner_arrayOfMap_flag.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendOneofInnerArrayOfMapFlag() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        SendOneofInnerArrayOfMapFlagSession session = ApiHelper.deserialize(
                "[{\"innerKey\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}}"
                + ",{\"innerKey\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true"
                + "}}]", SendOneofInnerArrayOfMapFlagSession.class);

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendOneofInnerArrayOfMapFlag(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_oneof_arrayOfMap_flag_of_arrayOfMap_flag.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendOneofArrayOfMapFlagOfArrayOfMapFlag() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        List<Map<String, SendOneofArrayOfMapFlagOfArrayOfMapFlagSession>> session = ApiHelper.deserialize(
                "[{\"key\":[{\"innerKey\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinne"
                + "r\":true}},{\"innerKey\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDin"
                + "ner\":true}}]},{\"key\":[{\"innerKey\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:0"
                + "0\",\"offerTeaBreak\":true}},{\"innerKey\":{\"startsAt\":\"08:00\",\"endsAt\":"
                + "\"14:00\",\"offerTeaBreak\":true}}]}]",
                new TypeReference<List<Map<String, SendOneofArrayOfMapFlagOfArrayOfMapFlagSession>>>(){});

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendOneofArrayOfMapFlagOfArrayOfMapFlag(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_oneof_inner_mixed_arrayOfMap_flag.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendOneofInnerMixedArrayOfMapFlag() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        SendOneofInnerMixedArrayOfMapFlagSession session = ApiHelper.deserialize(
                "{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}", SendOneofInnerMixedArrayOfMapFlagSession.class);

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendOneofInnerMixedArrayOfMapFlag(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_oneof_arrayOfMap_flag_of_mixed_arrayOfMap_flag.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendOneofArrayOfMapFlagOfMixedArrayOfMapFlag() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        List<Map<String, SendOneofArrayOfMapFlagOfMixedArrayOfMapFlagSession>> session = ApiHelper.deserialize(
                "[{\"key\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}},{\"k"
                + "ey\":[{\"innerKey\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak"
                + "\":true}},{\"innerKey\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaB"
                + "reak\":true}}]}]",
                new TypeReference<List<Map<String, SendOneofArrayOfMapFlagOfMixedArrayOfMapFlagSession>>>(){});

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendOneofArrayOfMapFlagOfMixedArrayOfMapFlag(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_oneof_outer_mapOfArray.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendOneofOuterMapOfArray() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        Map<String, List<SendOneofOuterMapOfArraySession>> session = ApiHelper.deserialize(
                "{\"key1\":[{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true},{"
                + "\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}],\"key2\":[{"
                + "\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true},{\"startsAt\":"
                + "\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}]}",
                new TypeReference<Map<String, List<SendOneofOuterMapOfArraySession>>>(){});

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendOneofOuterMapOfArray(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_oneof_inner_mapOfArray.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendOneofInnerMapOfArray() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        SendOneofInnerMapOfArraySession session = ApiHelper.deserialize(
                "{\"key\":[{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true},{\"st"
                + "artsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}]}", SendOneofInnerMapOfArraySession.class);

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendOneofInnerMapOfArray(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_oneof_mapOfArray_of_mapOfArray.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendOneofMapOfArrayOfMapOfArray() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        Map<String, List<SendOneofMapOfArrayOfMapOfArraySession>> session = ApiHelper.deserialize(
                "{\"outerKey\": [{\"key\":[{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaB"
                + "reak\":true},{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true"
                + "}]}, {\"key\":[{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true"
                + "},{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}]}]}",
                new TypeReference<Map<String, List<SendOneofMapOfArrayOfMapOfArraySession>>>(){});

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendOneofMapOfArrayOfMapOfArray(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_oneof_inner_mixed_mapOfArray.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendOneofInnerMixedMapOfArray() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        SendOneofInnerMixedMapOfArraySession session = ApiHelper.deserialize(
                "{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}", SendOneofInnerMixedMapOfArraySession.class);

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendOneofInnerMixedMapOfArray(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_oneof_mapOfArray_of_mixed_mapOfArray.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendOneofMapOfArrayOfMixedMapOfArray() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        Map<String, List<SendOneofMapOfArrayOfMixedMapOfArraySession>> session = ApiHelper.deserialize(
                "{\"outerKey\":[{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true},"
                + "{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}]}",
                new TypeReference<Map<String, List<SendOneofMapOfArrayOfMixedMapOfArraySession>>>(){});

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendOneofMapOfArrayOfMixedMapOfArray(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_oneof_array_of_maps.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendOneofArrayOfMaps() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        List<SendOneofArrayOfMapsSession> session = ApiHelper.deserializeArray(
                "[{\"key\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}},{\"k"
                + "ey\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}}]",
                SendOneofArrayOfMapsSession[].class);

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendOneofArrayOfMaps(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_oneof_array_of_arrayOfMap_flag.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendOneofArrayOfArrayOfMapFlag() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        List<SendOneofArrayOfArrayOfMapFlagSession> session = ApiHelper.deserializeArray(
                "[[{\"key\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}},{"
                + "\"key\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}}],["
                + "{\"key\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}},{"
                + "\"key\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}}]]",
                SendOneofArrayOfArrayOfMapFlagSession[].class);

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendOneofArrayOfArrayOfMapFlag(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_oneof_map_of_array.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendOneofMapOfArray() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        Map<String, SendOneofMapOfArraySession> session = ApiHelper.deserialize(
                "{\"key1\":[{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true},{"
                + "\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}],\"key2\":[{"
                + "\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true},{\"startsAt\":"
                + "\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}]}",
                new TypeReference<Map<String, SendOneofMapOfArraySession>>(){});

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendOneofMapOfArray(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_oneof_map_of_arrayOfMap_flag.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendOneofMapOfArrayOfMapFlag() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        Map<String, SendOneofMapOfArrayOfMapFlagSession> session = ApiHelper.deserialize(
                "{\"outerKey1\":[{\"key\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBr"
                + "eak\":true}},{\"key\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBre"
                + "ak\":true}}],\"outerKey2\":[{\"key\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00"
                + "\",\"offerDinner\":true}},{\"key\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\","
                + "\"offerDinner\":true}}]}",
                new TypeReference<Map<String, SendOneofMapOfArrayOfMapFlagSession>>(){});

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendOneofMapOfArrayOfMapFlag(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_oneof_arrayOfMap_flag_of_array.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendOneofArrayOfMapFlagOfArray() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        List<Map<String, SendOneofArrayOfMapFlagOfArraySession>> session = ApiHelper.deserialize(
                "[{\"key1\":[{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true},{"
                + "\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}],\"key2\":[{"
                + "\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true},{\"startsAt\":"
                + "\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}]},{\"key1\":[{\"startsAt\":"
                + "\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true},{\"startsAt\":\"15:00\",\"e"
                + "ndsAt\":\"21:00\",\"offerDinner\":true}],\"key2\":[{\"startsAt\":\"08:00\",\"end"
                + "sAt\":\"14:00\",\"offerTeaBreak\":true},{\"startsAt\":\"08:00\",\"endsAt\":\"14:"
                + "00\",\"offerTeaBreak\":true}]}]",
                new TypeReference<List<Map<String, SendOneofArrayOfMapFlagOfArraySession>>>(){});

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendOneofArrayOfMapFlagOfArray(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_oneof_arrayOfMap_flag_of_map.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendOneofArrayOfMapFlagOfMap() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        List<Map<String, SendOneofArrayOfMapFlagOfMapSession>> session = ApiHelper.deserialize(
                "[{\"key1\":{\"key\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak"
                + "\":true}},\"key2\":{\"key\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offer"
                + "Dinner\":true}}},{\"key1\":{\"key\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00"
                + "\",\"offerTeaBreak\":true}},\"key2\":{\"key\":{\"startsAt\":\"15:00\",\"endsAt"
                + "\":\"21:00\",\"offerDinner\":true}}}]",
                new TypeReference<List<Map<String, SendOneofArrayOfMapFlagOfMapSession>>>(){});

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendOneofArrayOfMapFlagOfMap(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for send_multi_level_oneof.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testSendMultiLevelOneof() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;
        SendMultiLevelOneofSession session = ApiHelper.deserialize(
                "{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}", SendMultiLevelOneofSession.class);

        // Set callback and perform API call
        ServerResponse result = null;
        try {
            result = controller.sendMultiLevelOneof(isPrimitiveType, isAtEndpointLevel, hasDiscriminator, session);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"passed\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

}
