/*
 * OneOfNonScalarEndpointsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package localhost3000.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.util.List;
import java.util.Map;
import localhost3000.OneOfNonScalarEndpointsClient;
import localhost3000.exceptions.ApiException;
import localhost3000.models.containers.GetMultiLevelOneofSession;
import localhost3000.models.containers.GetOneofArrayOfArrayOfMapFlagSession;
import localhost3000.models.containers.GetOneofArrayOfArraysSession;
import localhost3000.models.containers.GetOneofArrayOfMapFlagOfArrayOfMapFlagSession;
import localhost3000.models.containers.GetOneofArrayOfMapFlagOfArraySession;
import localhost3000.models.containers.GetOneofArrayOfMapFlagOfMapSession;
import localhost3000.models.containers.GetOneofArrayOfMapFlagOfMixedArrayOfMapFlagSession;
import localhost3000.models.containers.GetOneofArrayOfMapsSession;
import localhost3000.models.containers.GetOneofArrayOfMixedArraysSession;
import localhost3000.models.containers.GetOneofInnerArrayOfMapFlagSession;
import localhost3000.models.containers.GetOneofInnerArraySession;
import localhost3000.models.containers.GetOneofInnerMapOfArraySession;
import localhost3000.models.containers.GetOneofInnerMapSession;
import localhost3000.models.containers.GetOneofInnerMixedArrayOfMapFlagSession;
import localhost3000.models.containers.GetOneofInnerMixedArraysSession;
import localhost3000.models.containers.GetOneofInnerMixedMapOfArraySession;
import localhost3000.models.containers.GetOneofInnerMixedMapSession;
import localhost3000.models.containers.GetOneofMapOfArrayOfMapFlagSession;
import localhost3000.models.containers.GetOneofMapOfArrayOfMapOfArraySession;
import localhost3000.models.containers.GetOneofMapOfArrayOfMixedMapOfArraySession;
import localhost3000.models.containers.GetOneofMapOfArraySession;
import localhost3000.models.containers.GetOneofMapOfInnerMixedMapSession;
import localhost3000.models.containers.GetOneofMapOfMapSession;
import localhost3000.models.containers.GetOneofOuterArrayOfMapFlagSession;
import localhost3000.models.containers.GetOneofOuterArraySession;
import localhost3000.models.containers.GetOneofOuterMapOfArraySession;
import localhost3000.models.containers.GetOneofOuterMapSession;
import localhost3000.models.containers.GetOneofSimpleSession;
import localhost3000.testing.TestHelper;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class OneOfNonPrimitiveTypesInResponseBodyControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static OneOfNonScalarEndpointsClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static OneOfNonPrimitiveTypesInResponseBodyController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getOneOfNonPrimitiveTypesInResponseBodyController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * Test case for get_oneof_simple.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetOneofSimple() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        GetOneofSimpleSession result = null;
        try {
            result = controller.getOneofSimple(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_oneof_outer_array.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetOneofOuterArray() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        List<GetOneofOuterArraySession> result = null;
        try {
            result = controller.getOneofOuterArray(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "[{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}, {\"startsAt"
                + "\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}]",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_oneof_inner_array.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetOneofInnerArray() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        GetOneofInnerArraySession result = null;
        try {
            result = controller.getOneofInnerArray(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "[{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}, {\"startsAt"
                + "\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}]",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_oneof_array_of_arrays.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetOneofArrayOfArrays() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        List<GetOneofArrayOfArraysSession> result = null;
        try {
            result = controller.getOneofArrayOfArrays(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "[[{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}, {\"startsAt"
                + "\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}], [{\"startsAt\":\"08:00"
                + "\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}, {\"startsAt\":\"08:00\",\"endsA"
                + "t\":\"14:00\",\"offerTeaBreak\":true}]]",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_oneof_inner_mixed_arrays.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetOneofInnerMixedArrays() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        GetOneofInnerMixedArraysSession result = null;
        try {
            result = controller.getOneofInnerMixedArrays(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "[{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}, {\"startsAt"
                + "\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}]",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_oneof_array_of_mixed_arrays.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetOneofArrayOfMixedArrays() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        List<GetOneofArrayOfMixedArraysSession> result = null;
        try {
            result = controller.getOneofArrayOfMixedArrays(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "[{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}, {\"startsAt"
                + "\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}]",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_oneof_outer_map.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetOneofOuterMap() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        Map<String, GetOneofOuterMapSession> result = null;
        try {
            result = controller.getOneofOuterMap(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "{\"key1\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true},\"k"
                + "ey2\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_oneof_inner_map.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetOneofInnerMap() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        GetOneofInnerMapSession result = null;
        try {
            result = controller.getOneofInnerMap(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "{\"key1\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true},\"k"
                + "ey2\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_oneof_map_of_map.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetOneofMapOfMap() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        Map<String, GetOneofMapOfMapSession> result = null;
        try {
            result = controller.getOneofMapOfMap(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "{\"key1\":{\"innerKey\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBre"
                + "ak\":true}},\"key2\":{\"innerKey\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\","
                + "\"offerDinner\":true}}}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_oneof_inner_mixed_map.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetOneofInnerMixedMap() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        GetOneofInnerMixedMapSession result = null;
        try {
            result = controller.getOneofInnerMixedMap(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "{\"key1\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true},\"k"
                + "ey2\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_oneof_map_of_inner_mixed_map.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetOneofMapOfInnerMixedMap() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        Map<String, GetOneofMapOfInnerMixedMapSession> result = null;
        try {
            result = controller.getOneofMapOfInnerMixedMap(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "{\"key1\":{\"innerKey1\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinne"
                + "r\":true},\"innerKey2\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinn"
                + "er\":true}},\"key2\":{\"innerKey1\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00"
                + "\",\"offerDinner\":true},\"innerKey2\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:0"
                + "0\",\"offerDinner\":true}},\"key3\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00"
                + "\",\"offerTeaBreak\":true}}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_oneof_outer_arrayOfMap_flag.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetOneofOuterArrayOfMapFlag() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        List<Map<String, GetOneofOuterArrayOfMapFlagSession>> result = null;
        try {
            result = controller.getOneofOuterArrayOfMapFlag(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "[{\"key1\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}},{"
                + "\"key1\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}}]",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_oneof_inner_arrayOfMap_flag.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetOneofInnerArrayOfMapFlag() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        GetOneofInnerArrayOfMapFlagSession result = null;
        try {
            result = controller.getOneofInnerArrayOfMapFlag(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "[{\"innerKey\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true"
                + "}},{\"innerKey\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":"
                + "true}}]",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_oneof_arrayOfMap_flag_of_arrayOfMap_flag.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetOneofArrayOfMapFlagOfArrayOfMapFlag() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        List<Map<String, GetOneofArrayOfMapFlagOfArrayOfMapFlagSession>> result = null;
        try {
            result = controller.getOneofArrayOfMapFlagOfArrayOfMapFlag(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "[{\"key\":[{\"innerKey\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBr"
                + "eak\":true}},{\"innerKey\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerT"
                + "eaBreak\":true}}]},{\"key\":[{\"innerKey\":{\"startsAt\":\"15:00\",\"endsAt\":"
                + "\"21:00\",\"offerDinner\":true}},{\"innerKey\":{\"startsAt\":\"15:00\",\"endsAt"
                + "\":\"21:00\",\"offerDinner\":true}}]}]",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_oneof_inner_mixed_arrayOfMap_flag.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetOneofInnerMixedArrayOfMapFlag() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        GetOneofInnerMixedArrayOfMapFlagSession result = null;
        try {
            result = controller.getOneofInnerMixedArrayOfMapFlag(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "[{\"innerKey\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true"
                + "}},{\"innerKey\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":"
                + "true}}]",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_oneof_arrayOfMap_flag_of_mixed_arrayOfMap_flag.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetOneofArrayOfMapFlagOfMixedArrayOfMapFlag() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        List<Map<String, GetOneofArrayOfMapFlagOfMixedArrayOfMapFlagSession>> result = null;
        try {
            result = controller.getOneofArrayOfMapFlagOfMixedArrayOfMapFlag(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "[{\"key\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}},{\"k"
                + "ey\":[{\"innerKey\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak"
                + "\":true}},{\"innerKey\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaB"
                + "reak\":true}}]}]",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_oneof_outer_mapOfArray.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetOneofOuterMapOfArray() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        Map<String, List<GetOneofOuterMapOfArraySession>> result = null;
        try {
            result = controller.getOneofOuterMapOfArray(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "{\"key1\":[{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true},{"
                + "\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}],\"key2\":[{"
                + "\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true},{\"startsAt"
                + "\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_oneof_inner_mapOfArray.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetOneofInnerMapOfArray() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        GetOneofInnerMapOfArraySession result = null;
        try {
            result = controller.getOneofInnerMapOfArray(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "{\"key\":[{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true},{"
                + "\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_oneof_mapOfArray_of_mapOfArray.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetOneofMapOfArrayOfMapOfArray() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        Map<String, List<GetOneofMapOfArrayOfMapOfArraySession>> result = null;
        try {
            result = controller.getOneofMapOfArrayOfMapOfArray(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "{\"outerKey\": [{\"key\":[{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaB"
                + "reak\":true},{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true"
                + "}]}, {\"key\":[{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true"
                + "},{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}]}]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_oneof_inner_mixed_mapOfArray.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetOneofInnerMixedMapOfArray() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        GetOneofInnerMixedMapOfArraySession result = null;
        try {
            result = controller.getOneofInnerMixedMapOfArray(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "{\"key1\":[{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true},{"
                + "\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}], \"key2\":["
                + "{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true},{\"startsAt"
                + "\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_oneof_mapOfArray_of_mixed_mapOfArray.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetOneofMapOfArrayOfMixedMapOfArray() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        Map<String, List<GetOneofMapOfArrayOfMixedMapOfArraySession>> result = null;
        try {
            result = controller.getOneofMapOfArrayOfMixedMapOfArray(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "{\"outerKey\": [{\"key\":[{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaB"
                + "reak\":true},{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true"
                + "}]}, {\"key\":[{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":tr"
                + "ue},{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}]}]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_oneof_array_of_maps.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetOneofArrayOfMaps() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        List<GetOneofArrayOfMapsSession> result = null;
        try {
            result = controller.getOneofArrayOfMaps(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "[{\"key\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}},{"
                + "\"key\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}}]",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_oneof_array_of_arrayOfMap_flag.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetOneofArrayOfArrayOfMapFlag() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        List<GetOneofArrayOfArrayOfMapFlagSession> result = null;
        try {
            result = controller.getOneofArrayOfArrayOfMapFlag(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "[[{\"key\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}},{"
                + "\"key\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}}],["
                + "{\"key\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}},{"
                + "\"key\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}}]]",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_oneof_map_of_array.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetOneofMapOfArray() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        Map<String, GetOneofMapOfArraySession> result = null;
        try {
            result = controller.getOneofMapOfArray(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "{\"key1\":[{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true},{"
                + "\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}],\"key2\":[{"
                + "\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true},{\"startsAt\":"
                + "\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_oneof_map_of_arrayOfMap_flag.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetOneofMapOfArrayOfMapFlag() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        Map<String, GetOneofMapOfArrayOfMapFlagSession> result = null;
        try {
            result = controller.getOneofMapOfArrayOfMapFlag(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "{\"outerKey1\":[{\"key\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBr"
                + "eak\":true}},{\"key\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBre"
                + "ak\":true}}],\"outerKey2\":[{\"key\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00"
                + "\",\"offerDinner\":true}},{\"key\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\","
                + "\"offerDinner\":true}}]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_oneof_arrayOfMap_flag_of_array.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetOneofArrayOfMapFlagOfArray() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        List<Map<String, GetOneofArrayOfMapFlagOfArraySession>> result = null;
        try {
            result = controller.getOneofArrayOfMapFlagOfArray(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "[{\"key1\":[{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true},{"
                + "\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak\":true}],\"key2\":[{"
                + "\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true},{\"startsAt\":"
                + "\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}]},{\"key1\":[{\"startsAt\":"
                + "\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true},{\"startsAt\":\"15:00\",\"e"
                + "ndsAt\":\"21:00\",\"offerDinner\":true}],\"key2\":[{\"startsAt\":\"08:00\",\"end"
                + "sAt\":\"14:00\",\"offerTeaBreak\":true},{\"startsAt\":\"08:00\",\"endsAt\":\"14:"
                + "00\",\"offerTeaBreak\":true}]}]",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_oneof_arrayOfMap_flag_of_map.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetOneofArrayOfMapFlagOfMap() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        List<Map<String, GetOneofArrayOfMapFlagOfMapSession>> result = null;
        try {
            result = controller.getOneofArrayOfMapFlagOfMap(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "[{\"key1\":{\"key\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00\",\"offerTeaBreak"
                + "\":true}},\"key2\":{\"key\":{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offer"
                + "Dinner\":true}}},{\"key1\":{\"key\":{\"startsAt\":\"08:00\",\"endsAt\":\"14:00"
                + "\",\"offerTeaBreak\":true}},\"key2\":{\"key\":{\"startsAt\":\"15:00\",\"endsAt"
                + "\":\"21:00\",\"offerDinner\":true}}}]",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

    /**
     * Test case for get_multi_level_oneof.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testGetMultiLevelOneof() throws Exception {
        // Parameters for the API call
        boolean isPrimitiveType = false;
        boolean isAtEndpointLevel = true;
        boolean hasDiscriminator = false;

        // Set callback and perform API call
        GetMultiLevelOneofSession result = null;
        try {
            result = controller.getMultiLevelOneof(isPrimitiveType, isAtEndpointLevel, hasDiscriminator);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys and/or values",
                TestHelper.isProperSubsetOf(
                "[{\"startsAt\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}, {\"startsAt"
                + "\":\"15:00\",\"endsAt\":\"21:00\",\"offerDinner\":true}]",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                true, true, false));
    }

}
