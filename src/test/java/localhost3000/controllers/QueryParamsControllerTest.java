/*
 * NullableLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package localhost3000.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import localhost3000.NullableClient;
import localhost3000.exceptions.ApiException;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class QueryParamsControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static NullableClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static QueryParamsController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getQueryParamsController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * Test case for sendNullableScalarTypesInQuery.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testQueryParamsContainingNonNullValues() throws Exception {
        // Parameters for the API call
        boolean allNullableSetToNull = false;
        Double testPrecision = 123.456d;
        Integer testNumber = 10;
        Boolean testBoolean = true;
        Long testLong = 123456789L;
        String testString = 
                "My test string";

        // Set callback and perform API call
        try {
            controller.getSendNullableScalarTypesInQuery(allNullableSetToNull, testPrecision, testNumber, testBoolean, testLong, testString);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

    }

    /**
     * Test case for sendNullableScalarTypesInQuery.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testQueryParamsContainingNullValues() throws Exception {
        // Parameters for the API call
        boolean allNullableSetToNull = true;
        Double testPrecision = null;
        Integer testNumber = null;
        Boolean testBoolean = null;
        Long testLong = null;
        String testString = null;

        // Set callback and perform API call
        try {
            controller.getSendNullableScalarTypesInQuery(allNullableSetToNull, testPrecision, testNumber, testBoolean, testLong, testString);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

    }

}
