/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package tech.fortis.sandbox.api.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.util.LinkedHashMap;
import java.util.Map;
import java.util.UUID;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;
import tech.fortis.sandbox.api.FortisAPIClient;
import tech.fortis.sandbox.api.exceptions.ApiException;
import tech.fortis.sandbox.api.models.ResponseAsyncStatus;
import tech.fortis.sandbox.api.testing.TestHelper;

public class AsyncProcessingControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static FortisAPIClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static AsyncProcessingController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getAsyncProcessingController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * Retrieve the current status for a particular code.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestStatusCheck() throws Exception {
        // Parameters for the API call
        UUID statusCode = UUID.fromString(
                "406c66c3-21cb-47fb-80fc-843bc42507fb");

        // Set callback and perform API call
        ResponseAsyncStatus result = null;
        try {
            result = controller.statusCheck(statusCode);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"type\":\"AsyncStatus\",\"data\":{\"code\":\"406c66c3-21cb-47fb-80fc-843bc42507f"
                + "b\",\"type\":\"Transaction\",\"id\":\"11e95f8ec39de8fbdb0a4f1a\",\"progress\":10"
                + "0,\"error\":\"\",\"ttl\":7956886942}}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

}
